
Fuzzy_Balancing_Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000632c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08006440  08006440  00007440  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064e0  080064e0  00008100  2**0
                  CONTENTS
  4 .ARM          00000000  080064e0  080064e0  00008100  2**0
                  CONTENTS
  5 .preinit_array 00000000  080064e0  080064e0  00008100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064e0  080064e0  000074e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080064e4  080064e4  000074e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000100  20000000  080064e8  00008000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  20000100  080065e8  00008100  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  080065e8  00008454  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef34  00000000  00000000  00008129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fe5  00000000  00000000  0001705d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef0  00000000  00000000  00019048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000be1  00000000  00000000  00019f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d65  00000000  00000000  0001ab19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001143a  00000000  00000000  0003287e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cad6  00000000  00000000  00043cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d078e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045d4  00000000  00000000  000d07d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000d4da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000100 	.word	0x20000100
 800012c:	00000000 	.word	0x00000000
 8000130:	08006424 	.word	0x08006424

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000104 	.word	0x20000104
 800014c:	08006424 	.word	0x08006424

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2f>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a70:	bf24      	itt	cs
 8000a72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a7a:	d90d      	bls.n	8000a98 <__aeabi_d2f+0x30>
 8000a7c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a88:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a90:	bf08      	it	eq
 8000a92:	f020 0001 	biceq.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a9c:	d121      	bne.n	8000ae2 <__aeabi_d2f+0x7a>
 8000a9e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aa2:	bfbc      	itt	lt
 8000aa4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	4770      	bxlt	lr
 8000aaa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab2:	f1c2 0218 	rsb	r2, r2, #24
 8000ab6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000abe:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	f040 0001 	orrne.w	r0, r0, #1
 8000ac8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000acc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad4:	ea40 000c 	orr.w	r0, r0, ip
 8000ad8:	fa23 f302 	lsr.w	r3, r3, r2
 8000adc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae0:	e7cc      	b.n	8000a7c <__aeabi_d2f+0x14>
 8000ae2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ae6:	d107      	bne.n	8000af8 <__aeabi_d2f+0x90>
 8000ae8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aec:	bf1e      	ittt	ne
 8000aee:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000af2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000af6:	4770      	bxne	lr
 8000af8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000afc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_frsub>:
 8000b08:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b0c:	e002      	b.n	8000b14 <__addsf3>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_fsub>:
 8000b10:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b14 <__addsf3>:
 8000b14:	0042      	lsls	r2, r0, #1
 8000b16:	bf1f      	itttt	ne
 8000b18:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b1c:	ea92 0f03 	teqne	r2, r3
 8000b20:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b24:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b28:	d06a      	beq.n	8000c00 <__addsf3+0xec>
 8000b2a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b2e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b32:	bfc1      	itttt	gt
 8000b34:	18d2      	addgt	r2, r2, r3
 8000b36:	4041      	eorgt	r1, r0
 8000b38:	4048      	eorgt	r0, r1
 8000b3a:	4041      	eorgt	r1, r0
 8000b3c:	bfb8      	it	lt
 8000b3e:	425b      	neglt	r3, r3
 8000b40:	2b19      	cmp	r3, #25
 8000b42:	bf88      	it	hi
 8000b44:	4770      	bxhi	lr
 8000b46:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b4a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b4e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b5a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b5e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4249      	negne	r1, r1
 8000b66:	ea92 0f03 	teq	r2, r3
 8000b6a:	d03f      	beq.n	8000bec <__addsf3+0xd8>
 8000b6c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b70:	fa41 fc03 	asr.w	ip, r1, r3
 8000b74:	eb10 000c 	adds.w	r0, r0, ip
 8000b78:	f1c3 0320 	rsb	r3, r3, #32
 8000b7c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b80:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b84:	d502      	bpl.n	8000b8c <__addsf3+0x78>
 8000b86:	4249      	negs	r1, r1
 8000b88:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b8c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b90:	d313      	bcc.n	8000bba <__addsf3+0xa6>
 8000b92:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b96:	d306      	bcc.n	8000ba6 <__addsf3+0x92>
 8000b98:	0840      	lsrs	r0, r0, #1
 8000b9a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b9e:	f102 0201 	add.w	r2, r2, #1
 8000ba2:	2afe      	cmp	r2, #254	@ 0xfe
 8000ba4:	d251      	bcs.n	8000c4a <__addsf3+0x136>
 8000ba6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000baa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bae:	bf08      	it	eq
 8000bb0:	f020 0001 	biceq.w	r0, r0, #1
 8000bb4:	ea40 0003 	orr.w	r0, r0, r3
 8000bb8:	4770      	bx	lr
 8000bba:	0049      	lsls	r1, r1, #1
 8000bbc:	eb40 0000 	adc.w	r0, r0, r0
 8000bc0:	3a01      	subs	r2, #1
 8000bc2:	bf28      	it	cs
 8000bc4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bc8:	d2ed      	bcs.n	8000ba6 <__addsf3+0x92>
 8000bca:	fab0 fc80 	clz	ip, r0
 8000bce:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bd2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bd6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bda:	bfaa      	itet	ge
 8000bdc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000be0:	4252      	neglt	r2, r2
 8000be2:	4318      	orrge	r0, r3
 8000be4:	bfbc      	itt	lt
 8000be6:	40d0      	lsrlt	r0, r2
 8000be8:	4318      	orrlt	r0, r3
 8000bea:	4770      	bx	lr
 8000bec:	f092 0f00 	teq	r2, #0
 8000bf0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bf4:	bf06      	itte	eq
 8000bf6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bfa:	3201      	addeq	r2, #1
 8000bfc:	3b01      	subne	r3, #1
 8000bfe:	e7b5      	b.n	8000b6c <__addsf3+0x58>
 8000c00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c08:	bf18      	it	ne
 8000c0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c0e:	d021      	beq.n	8000c54 <__addsf3+0x140>
 8000c10:	ea92 0f03 	teq	r2, r3
 8000c14:	d004      	beq.n	8000c20 <__addsf3+0x10c>
 8000c16:	f092 0f00 	teq	r2, #0
 8000c1a:	bf08      	it	eq
 8000c1c:	4608      	moveq	r0, r1
 8000c1e:	4770      	bx	lr
 8000c20:	ea90 0f01 	teq	r0, r1
 8000c24:	bf1c      	itt	ne
 8000c26:	2000      	movne	r0, #0
 8000c28:	4770      	bxne	lr
 8000c2a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c2e:	d104      	bne.n	8000c3a <__addsf3+0x126>
 8000c30:	0040      	lsls	r0, r0, #1
 8000c32:	bf28      	it	cs
 8000c34:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c38:	4770      	bx	lr
 8000c3a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c3e:	bf3c      	itt	cc
 8000c40:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bxcc	lr
 8000c46:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c4a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c4e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c52:	4770      	bx	lr
 8000c54:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c58:	bf16      	itet	ne
 8000c5a:	4608      	movne	r0, r1
 8000c5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c60:	4601      	movne	r1, r0
 8000c62:	0242      	lsls	r2, r0, #9
 8000c64:	bf06      	itte	eq
 8000c66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c6a:	ea90 0f01 	teqeq	r0, r1
 8000c6e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c72:	4770      	bx	lr

08000c74 <__aeabi_ui2f>:
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	e004      	b.n	8000c84 <__aeabi_i2f+0x8>
 8000c7a:	bf00      	nop

08000c7c <__aeabi_i2f>:
 8000c7c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c80:	bf48      	it	mi
 8000c82:	4240      	negmi	r0, r0
 8000c84:	ea5f 0c00 	movs.w	ip, r0
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c90:	4601      	mov	r1, r0
 8000c92:	f04f 0000 	mov.w	r0, #0
 8000c96:	e01c      	b.n	8000cd2 <__aeabi_l2f+0x2a>

08000c98 <__aeabi_ul2f>:
 8000c98:	ea50 0201 	orrs.w	r2, r0, r1
 8000c9c:	bf08      	it	eq
 8000c9e:	4770      	bxeq	lr
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	e00a      	b.n	8000cbc <__aeabi_l2f+0x14>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_l2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__aeabi_l2f+0x14>
 8000cb6:	4240      	negs	r0, r0
 8000cb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cbc:	ea5f 0c01 	movs.w	ip, r1
 8000cc0:	bf02      	ittt	eq
 8000cc2:	4684      	moveq	ip, r0
 8000cc4:	4601      	moveq	r1, r0
 8000cc6:	2000      	moveq	r0, #0
 8000cc8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ccc:	bf08      	it	eq
 8000cce:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cd2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cd6:	fabc f28c 	clz	r2, ip
 8000cda:	3a08      	subs	r2, #8
 8000cdc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ce0:	db10      	blt.n	8000d04 <__aeabi_l2f+0x5c>
 8000ce2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cec:	f1c2 0220 	rsb	r2, r2, #32
 8000cf0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cf4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf8:	eb43 0002 	adc.w	r0, r3, r2
 8000cfc:	bf08      	it	eq
 8000cfe:	f020 0001 	biceq.w	r0, r0, #1
 8000d02:	4770      	bx	lr
 8000d04:	f102 0220 	add.w	r2, r2, #32
 8000d08:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d14:	fa21 f202 	lsr.w	r2, r1, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d22:	4770      	bx	lr

08000d24 <__aeabi_fmul>:
 8000d24:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d32:	ea92 0f0c 	teqne	r2, ip
 8000d36:	ea93 0f0c 	teqne	r3, ip
 8000d3a:	d06f      	beq.n	8000e1c <__aeabi_fmul+0xf8>
 8000d3c:	441a      	add	r2, r3
 8000d3e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d42:	0240      	lsls	r0, r0, #9
 8000d44:	bf18      	it	ne
 8000d46:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d4a:	d01e      	beq.n	8000d8a <__aeabi_fmul+0x66>
 8000d4c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d50:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d54:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d58:	fba0 3101 	umull	r3, r1, r0, r1
 8000d5c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d60:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d64:	bf3e      	ittt	cc
 8000d66:	0049      	lslcc	r1, r1, #1
 8000d68:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d6c:	005b      	lslcc	r3, r3, #1
 8000d6e:	ea40 0001 	orr.w	r0, r0, r1
 8000d72:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d76:	2afd      	cmp	r2, #253	@ 0xfd
 8000d78:	d81d      	bhi.n	8000db6 <__aeabi_fmul+0x92>
 8000d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d82:	bf08      	it	eq
 8000d84:	f020 0001 	biceq.w	r0, r0, #1
 8000d88:	4770      	bx	lr
 8000d8a:	f090 0f00 	teq	r0, #0
 8000d8e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d92:	bf08      	it	eq
 8000d94:	0249      	lsleq	r1, r1, #9
 8000d96:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d9a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d9e:	3a7f      	subs	r2, #127	@ 0x7f
 8000da0:	bfc2      	ittt	gt
 8000da2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000da6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000daa:	4770      	bxgt	lr
 8000dac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	3a01      	subs	r2, #1
 8000db6:	dc5d      	bgt.n	8000e74 <__aeabi_fmul+0x150>
 8000db8:	f112 0f19 	cmn.w	r2, #25
 8000dbc:	bfdc      	itt	le
 8000dbe:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000dc2:	4770      	bxle	lr
 8000dc4:	f1c2 0200 	rsb	r2, r2, #0
 8000dc8:	0041      	lsls	r1, r0, #1
 8000dca:	fa21 f102 	lsr.w	r1, r1, r2
 8000dce:	f1c2 0220 	rsb	r2, r2, #32
 8000dd2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dda:	f140 0000 	adc.w	r0, r0, #0
 8000dde:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000de2:	bf08      	it	eq
 8000de4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000de8:	4770      	bx	lr
 8000dea:	f092 0f00 	teq	r2, #0
 8000dee:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000df2:	bf02      	ittt	eq
 8000df4:	0040      	lsleq	r0, r0, #1
 8000df6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dfa:	3a01      	subeq	r2, #1
 8000dfc:	d0f9      	beq.n	8000df2 <__aeabi_fmul+0xce>
 8000dfe:	ea40 000c 	orr.w	r0, r0, ip
 8000e02:	f093 0f00 	teq	r3, #0
 8000e06:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e0a:	bf02      	ittt	eq
 8000e0c:	0049      	lsleq	r1, r1, #1
 8000e0e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e12:	3b01      	subeq	r3, #1
 8000e14:	d0f9      	beq.n	8000e0a <__aeabi_fmul+0xe6>
 8000e16:	ea41 010c 	orr.w	r1, r1, ip
 8000e1a:	e78f      	b.n	8000d3c <__aeabi_fmul+0x18>
 8000e1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e20:	ea92 0f0c 	teq	r2, ip
 8000e24:	bf18      	it	ne
 8000e26:	ea93 0f0c 	teqne	r3, ip
 8000e2a:	d00a      	beq.n	8000e42 <__aeabi_fmul+0x11e>
 8000e2c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e30:	bf18      	it	ne
 8000e32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e36:	d1d8      	bne.n	8000dea <__aeabi_fmul+0xc6>
 8000e38:	ea80 0001 	eor.w	r0, r0, r1
 8000e3c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e40:	4770      	bx	lr
 8000e42:	f090 0f00 	teq	r0, #0
 8000e46:	bf17      	itett	ne
 8000e48:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e4c:	4608      	moveq	r0, r1
 8000e4e:	f091 0f00 	teqne	r1, #0
 8000e52:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e56:	d014      	beq.n	8000e82 <__aeabi_fmul+0x15e>
 8000e58:	ea92 0f0c 	teq	r2, ip
 8000e5c:	d101      	bne.n	8000e62 <__aeabi_fmul+0x13e>
 8000e5e:	0242      	lsls	r2, r0, #9
 8000e60:	d10f      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e62:	ea93 0f0c 	teq	r3, ip
 8000e66:	d103      	bne.n	8000e70 <__aeabi_fmul+0x14c>
 8000e68:	024b      	lsls	r3, r1, #9
 8000e6a:	bf18      	it	ne
 8000e6c:	4608      	movne	r0, r1
 8000e6e:	d108      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e70:	ea80 0001 	eor.w	r0, r0, r1
 8000e74:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e78:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e7c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e80:	4770      	bx	lr
 8000e82:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e86:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e8a:	4770      	bx	lr

08000e8c <__aeabi_fdiv>:
 8000e8c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e94:	bf1e      	ittt	ne
 8000e96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e9a:	ea92 0f0c 	teqne	r2, ip
 8000e9e:	ea93 0f0c 	teqne	r3, ip
 8000ea2:	d069      	beq.n	8000f78 <__aeabi_fdiv+0xec>
 8000ea4:	eba2 0203 	sub.w	r2, r2, r3
 8000ea8:	ea80 0c01 	eor.w	ip, r0, r1
 8000eac:	0249      	lsls	r1, r1, #9
 8000eae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eb2:	d037      	beq.n	8000f24 <__aeabi_fdiv+0x98>
 8000eb4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000eb8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ebc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ec0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	bf38      	it	cc
 8000ec8:	005b      	lslcc	r3, r3, #1
 8000eca:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ece:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	bf24      	itt	cs
 8000ed6:	1a5b      	subcs	r3, r3, r1
 8000ed8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000edc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ee6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eee:	bf24      	itt	cs
 8000ef0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ef4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ef8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000efc:	bf24      	itt	cs
 8000efe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f06:	011b      	lsls	r3, r3, #4
 8000f08:	bf18      	it	ne
 8000f0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f0e:	d1e0      	bne.n	8000ed2 <__aeabi_fdiv+0x46>
 8000f10:	2afd      	cmp	r2, #253	@ 0xfd
 8000f12:	f63f af50 	bhi.w	8000db6 <__aeabi_fmul+0x92>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f1c:	bf08      	it	eq
 8000f1e:	f020 0001 	biceq.w	r0, r0, #1
 8000f22:	4770      	bx	lr
 8000f24:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f2c:	327f      	adds	r2, #127	@ 0x7f
 8000f2e:	bfc2      	ittt	gt
 8000f30:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f38:	4770      	bxgt	lr
 8000f3a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f3e:	f04f 0300 	mov.w	r3, #0
 8000f42:	3a01      	subs	r2, #1
 8000f44:	e737      	b.n	8000db6 <__aeabi_fmul+0x92>
 8000f46:	f092 0f00 	teq	r2, #0
 8000f4a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f4e:	bf02      	ittt	eq
 8000f50:	0040      	lsleq	r0, r0, #1
 8000f52:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f56:	3a01      	subeq	r2, #1
 8000f58:	d0f9      	beq.n	8000f4e <__aeabi_fdiv+0xc2>
 8000f5a:	ea40 000c 	orr.w	r0, r0, ip
 8000f5e:	f093 0f00 	teq	r3, #0
 8000f62:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f66:	bf02      	ittt	eq
 8000f68:	0049      	lsleq	r1, r1, #1
 8000f6a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f6e:	3b01      	subeq	r3, #1
 8000f70:	d0f9      	beq.n	8000f66 <__aeabi_fdiv+0xda>
 8000f72:	ea41 010c 	orr.w	r1, r1, ip
 8000f76:	e795      	b.n	8000ea4 <__aeabi_fdiv+0x18>
 8000f78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f7c:	ea92 0f0c 	teq	r2, ip
 8000f80:	d108      	bne.n	8000f94 <__aeabi_fdiv+0x108>
 8000f82:	0242      	lsls	r2, r0, #9
 8000f84:	f47f af7d 	bne.w	8000e82 <__aeabi_fmul+0x15e>
 8000f88:	ea93 0f0c 	teq	r3, ip
 8000f8c:	f47f af70 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000f90:	4608      	mov	r0, r1
 8000f92:	e776      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000f94:	ea93 0f0c 	teq	r3, ip
 8000f98:	d104      	bne.n	8000fa4 <__aeabi_fdiv+0x118>
 8000f9a:	024b      	lsls	r3, r1, #9
 8000f9c:	f43f af4c 	beq.w	8000e38 <__aeabi_fmul+0x114>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e76e      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fa4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fa8:	bf18      	it	ne
 8000faa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fae:	d1ca      	bne.n	8000f46 <__aeabi_fdiv+0xba>
 8000fb0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fb4:	f47f af5c 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000fb8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fbc:	f47f af3c 	bne.w	8000e38 <__aeabi_fmul+0x114>
 8000fc0:	e75f      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fc2:	bf00      	nop

08000fc4 <__gesf2>:
 8000fc4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fc8:	e006      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fca:	bf00      	nop

08000fcc <__lesf2>:
 8000fcc:	f04f 0c01 	mov.w	ip, #1
 8000fd0:	e002      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fd2:	bf00      	nop

08000fd4 <__cmpsf2>:
 8000fd4:	f04f 0c01 	mov.w	ip, #1
 8000fd8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fdc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	bf18      	it	ne
 8000fea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fee:	d011      	beq.n	8001014 <__cmpsf2+0x40>
 8000ff0:	b001      	add	sp, #4
 8000ff2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ff6:	bf18      	it	ne
 8000ff8:	ea90 0f01 	teqne	r0, r1
 8000ffc:	bf58      	it	pl
 8000ffe:	ebb2 0003 	subspl.w	r0, r2, r3
 8001002:	bf88      	it	hi
 8001004:	17c8      	asrhi	r0, r1, #31
 8001006:	bf38      	it	cc
 8001008:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800100c:	bf18      	it	ne
 800100e:	f040 0001 	orrne.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001018:	d102      	bne.n	8001020 <__cmpsf2+0x4c>
 800101a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800101e:	d105      	bne.n	800102c <__cmpsf2+0x58>
 8001020:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001024:	d1e4      	bne.n	8000ff0 <__cmpsf2+0x1c>
 8001026:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800102a:	d0e1      	beq.n	8000ff0 <__cmpsf2+0x1c>
 800102c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__aeabi_cfrcmple>:
 8001034:	4684      	mov	ip, r0
 8001036:	4608      	mov	r0, r1
 8001038:	4661      	mov	r1, ip
 800103a:	e7ff      	b.n	800103c <__aeabi_cfcmpeq>

0800103c <__aeabi_cfcmpeq>:
 800103c:	b50f      	push	{r0, r1, r2, r3, lr}
 800103e:	f7ff ffc9 	bl	8000fd4 <__cmpsf2>
 8001042:	2800      	cmp	r0, #0
 8001044:	bf48      	it	mi
 8001046:	f110 0f00 	cmnmi.w	r0, #0
 800104a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800104c <__aeabi_fcmpeq>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff fff4 	bl	800103c <__aeabi_cfcmpeq>
 8001054:	bf0c      	ite	eq
 8001056:	2001      	moveq	r0, #1
 8001058:	2000      	movne	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_fcmplt>:
 8001060:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001064:	f7ff ffea 	bl	800103c <__aeabi_cfcmpeq>
 8001068:	bf34      	ite	cc
 800106a:	2001      	movcc	r0, #1
 800106c:	2000      	movcs	r0, #0
 800106e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001072:	bf00      	nop

08001074 <__aeabi_fcmple>:
 8001074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001078:	f7ff ffe0 	bl	800103c <__aeabi_cfcmpeq>
 800107c:	bf94      	ite	ls
 800107e:	2001      	movls	r0, #1
 8001080:	2000      	movhi	r0, #0
 8001082:	f85d fb08 	ldr.w	pc, [sp], #8
 8001086:	bf00      	nop

08001088 <__aeabi_fcmpge>:
 8001088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800108c:	f7ff ffd2 	bl	8001034 <__aeabi_cfrcmple>
 8001090:	bf94      	ite	ls
 8001092:	2001      	movls	r0, #1
 8001094:	2000      	movhi	r0, #0
 8001096:	f85d fb08 	ldr.w	pc, [sp], #8
 800109a:	bf00      	nop

0800109c <__aeabi_fcmpgt>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff ffc8 	bl	8001034 <__aeabi_cfrcmple>
 80010a4:	bf34      	ite	cc
 80010a6:	2001      	movcc	r0, #1
 80010a8:	2000      	movcs	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <min>:

typedef struct {
	float NB, NM, NS, ZE, PS, PM, PB;
} uk_struct;

float min(float a, float b) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
	return (a < b) ? a : b;
 80010ba:	6839      	ldr	r1, [r7, #0]
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ffcf 	bl	8001060 <__aeabi_fcmplt>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <min+0x1c>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	e000      	b.n	80010ce <min+0x1e>
 80010cc:	683b      	ldr	r3, [r7, #0]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <max>:

float c1, c2, c3; // parameters theta
float d1, d2, d3; // parameters theta_dot

float max(int num_args, ...) // VARIABLE MUST BE FLOAT (EX: 70.0, 980.0 NOT 70 OR 980) , IF NOT FLOAT --> MAX FUNC WILL BE FALSE!!
{
 80010d8:	b40f      	push	{r0, r1, r2, r3}
 80010da:	b580      	push	{r7, lr}
 80010dc:	b084      	sub	sp, #16
 80010de:	af00      	add	r7, sp, #0
   float max;
   float current;
   va_list ap;
   va_start(ap, num_args);
 80010e0:	f107 031c 	add.w	r3, r7, #28
 80010e4:	603b      	str	r3, [r7, #0]
   for(int i = 0; i < num_args; i++)
 80010e6:	2300      	movs	r3, #0
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	e023      	b.n	8001134 <max+0x5c>
   {
	   current = (float)va_arg(ap, double);  // Auto increment the pointer to receive the next argument (float) every call function
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	3307      	adds	r3, #7
 80010f0:	f023 0307 	bic.w	r3, r3, #7
 80010f4:	f103 0208 	add.w	r2, r3, #8
 80010f8:	603a      	str	r2, [r7, #0]
 80010fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fe:	4610      	mov	r0, r2
 8001100:	4619      	mov	r1, r3
 8001102:	f7ff fcb1 	bl	8000a68 <__aeabi_d2f>
 8001106:	4603      	mov	r3, r0
 8001108:	607b      	str	r3, [r7, #4]
	   current += 0.0000001f; // Convert to float again :>
 800110a:	4910      	ldr	r1, [pc, #64]	@ (800114c <max+0x74>)
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff fd01 	bl	8000b14 <__addsf3>
 8001112:	4603      	mov	r3, r0
 8001114:	607b      	str	r3, [r7, #4]
	   if(i == 0 || current > max)
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d006      	beq.n	800112a <max+0x52>
 800111c:	68f9      	ldr	r1, [r7, #12]
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff ffbc 	bl	800109c <__aeabi_fcmpgt>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <max+0x56>
	   {
		   max = current;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	60fb      	str	r3, [r7, #12]
   for(int i = 0; i < num_args; i++)
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	3301      	adds	r3, #1
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68ba      	ldr	r2, [r7, #8]
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	429a      	cmp	r2, r3
 800113a:	dbd7      	blt.n	80010ec <max+0x14>
	   }
   }
   va_end(ap);

   return max;
 800113c:	68fb      	ldr	r3, [r7, #12]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001148:	b004      	add	sp, #16
 800114a:	4770      	bx	lr
 800114c:	33d6bf95 	.word	0x33d6bf95

08001150 <mfTriang>:


float mfTriang(float x, float a, float b, float c) {
 8001150:	b590      	push	{r4, r7, lr}
 8001152:	b087      	sub	sp, #28
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
 800115c:	603b      	str	r3, [r7, #0]
  float out_tri;

  if (x < a) {
 800115e:	68b9      	ldr	r1, [r7, #8]
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	f7ff ff7d 	bl	8001060 <__aeabi_fcmplt>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <mfTriang+0x24>
	  out_tri = 0;
 800116c:	f04f 0300 	mov.w	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
 8001172:	e042      	b.n	80011fa <mfTriang+0xaa>
  } else if ((x >= a) && (x <= b)) {
 8001174:	68b9      	ldr	r1, [r7, #8]
 8001176:	68f8      	ldr	r0, [r7, #12]
 8001178:	f7ff ff86 	bl	8001088 <__aeabi_fcmpge>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d018      	beq.n	80011b4 <mfTriang+0x64>
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	68f8      	ldr	r0, [r7, #12]
 8001186:	f7ff ff75 	bl	8001074 <__aeabi_fcmple>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d011      	beq.n	80011b4 <mfTriang+0x64>
	  out_tri = (x - a) / (b - a);
 8001190:	68b9      	ldr	r1, [r7, #8]
 8001192:	68f8      	ldr	r0, [r7, #12]
 8001194:	f7ff fcbc 	bl	8000b10 <__aeabi_fsub>
 8001198:	4603      	mov	r3, r0
 800119a:	461c      	mov	r4, r3
 800119c:	68b9      	ldr	r1, [r7, #8]
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff fcb6 	bl	8000b10 <__aeabi_fsub>
 80011a4:	4603      	mov	r3, r0
 80011a6:	4619      	mov	r1, r3
 80011a8:	4620      	mov	r0, r4
 80011aa:	f7ff fe6f 	bl	8000e8c <__aeabi_fdiv>
 80011ae:	4603      	mov	r3, r0
 80011b0:	617b      	str	r3, [r7, #20]
 80011b2:	e022      	b.n	80011fa <mfTriang+0xaa>
  } else if ((x >= b) && (x <= c)) {
 80011b4:	6879      	ldr	r1, [r7, #4]
 80011b6:	68f8      	ldr	r0, [r7, #12]
 80011b8:	f7ff ff66 	bl	8001088 <__aeabi_fcmpge>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d018      	beq.n	80011f4 <mfTriang+0xa4>
 80011c2:	6839      	ldr	r1, [r7, #0]
 80011c4:	68f8      	ldr	r0, [r7, #12]
 80011c6:	f7ff ff55 	bl	8001074 <__aeabi_fcmple>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d011      	beq.n	80011f4 <mfTriang+0xa4>
	  out_tri = (c - x) / (c - b);
 80011d0:	68f9      	ldr	r1, [r7, #12]
 80011d2:	6838      	ldr	r0, [r7, #0]
 80011d4:	f7ff fc9c 	bl	8000b10 <__aeabi_fsub>
 80011d8:	4603      	mov	r3, r0
 80011da:	461c      	mov	r4, r3
 80011dc:	6879      	ldr	r1, [r7, #4]
 80011de:	6838      	ldr	r0, [r7, #0]
 80011e0:	f7ff fc96 	bl	8000b10 <__aeabi_fsub>
 80011e4:	4603      	mov	r3, r0
 80011e6:	4619      	mov	r1, r3
 80011e8:	4620      	mov	r0, r4
 80011ea:	f7ff fe4f 	bl	8000e8c <__aeabi_fdiv>
 80011ee:	4603      	mov	r3, r0
 80011f0:	617b      	str	r3, [r7, #20]
 80011f2:	e002      	b.n	80011fa <mfTriang+0xaa>
  } else {
	  out_tri = 0;
 80011f4:	f04f 0300 	mov.w	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
  }

  return out_tri;
 80011fa:	697b      	ldr	r3, [r7, #20]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	371c      	adds	r7, #28
 8001200:	46bd      	mov	sp, r7
 8001202:	bd90      	pop	{r4, r7, pc}

08001204 <mfTrap>:

float mfTrap(float x, float a, float b, float c, float d) {
 8001204:	b590      	push	{r4, r7, lr}
 8001206:	b087      	sub	sp, #28
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
 8001210:	603b      	str	r3, [r7, #0]
  float out_trap;

  if (x < a) {
 8001212:	68b9      	ldr	r1, [r7, #8]
 8001214:	68f8      	ldr	r0, [r7, #12]
 8001216:	f7ff ff23 	bl	8001060 <__aeabi_fcmplt>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <mfTrap+0x24>
	  out_trap = 0;
 8001220:	f04f 0300 	mov.w	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
 8001226:	e06a      	b.n	80012fe <mfTrap+0xfa>
  } else if ((x >= a) && (x <= b)) {
 8001228:	68b9      	ldr	r1, [r7, #8]
 800122a:	68f8      	ldr	r0, [r7, #12]
 800122c:	f7ff ff2c 	bl	8001088 <__aeabi_fcmpge>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d023      	beq.n	800127e <mfTrap+0x7a>
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	68f8      	ldr	r0, [r7, #12]
 800123a:	f7ff ff1b 	bl	8001074 <__aeabi_fcmple>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d01c      	beq.n	800127e <mfTrap+0x7a>
    if (a == b) {
 8001244:	6879      	ldr	r1, [r7, #4]
 8001246:	68b8      	ldr	r0, [r7, #8]
 8001248:	f7ff ff00 	bl	800104c <__aeabi_fcmpeq>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <mfTrap+0x56>
    	out_trap = 1;
 8001252:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001256:	617b      	str	r3, [r7, #20]
    if (a == b) {
 8001258:	e051      	b.n	80012fe <mfTrap+0xfa>
    } else {
    	out_trap = (x - a) / (b - a);
 800125a:	68b9      	ldr	r1, [r7, #8]
 800125c:	68f8      	ldr	r0, [r7, #12]
 800125e:	f7ff fc57 	bl	8000b10 <__aeabi_fsub>
 8001262:	4603      	mov	r3, r0
 8001264:	461c      	mov	r4, r3
 8001266:	68b9      	ldr	r1, [r7, #8]
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff fc51 	bl	8000b10 <__aeabi_fsub>
 800126e:	4603      	mov	r3, r0
 8001270:	4619      	mov	r1, r3
 8001272:	4620      	mov	r0, r4
 8001274:	f7ff fe0a 	bl	8000e8c <__aeabi_fdiv>
 8001278:	4603      	mov	r3, r0
 800127a:	617b      	str	r3, [r7, #20]
    if (a == b) {
 800127c:	e03f      	b.n	80012fe <mfTrap+0xfa>
    }
  } else if ((x >= b) && (x <= c)) {
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	68f8      	ldr	r0, [r7, #12]
 8001282:	f7ff ff01 	bl	8001088 <__aeabi_fcmpge>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d00a      	beq.n	80012a2 <mfTrap+0x9e>
 800128c:	6839      	ldr	r1, [r7, #0]
 800128e:	68f8      	ldr	r0, [r7, #12]
 8001290:	f7ff fef0 	bl	8001074 <__aeabi_fcmple>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <mfTrap+0x9e>
	  out_trap = 1;
 800129a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	e02d      	b.n	80012fe <mfTrap+0xfa>
  } else if ((x >= c) && (x <= d)) {
 80012a2:	6839      	ldr	r1, [r7, #0]
 80012a4:	68f8      	ldr	r0, [r7, #12]
 80012a6:	f7ff feef 	bl	8001088 <__aeabi_fcmpge>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d023      	beq.n	80012f8 <mfTrap+0xf4>
 80012b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f7ff fede 	bl	8001074 <__aeabi_fcmple>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d01c      	beq.n	80012f8 <mfTrap+0xf4>
    if (c == d) {
 80012be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80012c0:	6838      	ldr	r0, [r7, #0]
 80012c2:	f7ff fec3 	bl	800104c <__aeabi_fcmpeq>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <mfTrap+0xd0>
    	out_trap = 1;
 80012cc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80012d0:	617b      	str	r3, [r7, #20]
    if (c == d) {
 80012d2:	e014      	b.n	80012fe <mfTrap+0xfa>
    } else {
    	out_trap = (d - x) / (d - c);
 80012d4:	68f9      	ldr	r1, [r7, #12]
 80012d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80012d8:	f7ff fc1a 	bl	8000b10 <__aeabi_fsub>
 80012dc:	4603      	mov	r3, r0
 80012de:	461c      	mov	r4, r3
 80012e0:	6839      	ldr	r1, [r7, #0]
 80012e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80012e4:	f7ff fc14 	bl	8000b10 <__aeabi_fsub>
 80012e8:	4603      	mov	r3, r0
 80012ea:	4619      	mov	r1, r3
 80012ec:	4620      	mov	r0, r4
 80012ee:	f7ff fdcd 	bl	8000e8c <__aeabi_fdiv>
 80012f2:	4603      	mov	r3, r0
 80012f4:	617b      	str	r3, [r7, #20]
    if (c == d) {
 80012f6:	e002      	b.n	80012fe <mfTrap+0xfa>
    }
  } else {
	  out_trap = 0;
 80012f8:	f04f 0300 	mov.w	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
  }

  return out_trap;
 80012fe:	697b      	ldr	r3, [r7, #20]
}
 8001300:	4618      	mov	r0, r3
 8001302:	371c      	adds	r7, #28
 8001304:	46bd      	mov	sp, r7
 8001306:	bd90      	pop	{r4, r7, pc}

08001308 <run_fuzzy>:

float run_fuzzy(float x1, float x2) {
 8001308:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800130c:	b0ba      	sub	sp, #232	@ 0xe8
 800130e:	af08      	add	r7, sp, #32
 8001310:	60f8      	str	r0, [r7, #12]
 8001312:	60b9      	str	r1, [r7, #8]
  theta_struct theta;
  thetadot_struct theta_dot;
  uk_struct u_dot;

  // calculate alpha 1 (0->1)
  c1 = 0.3f;
 8001314:	4b98      	ldr	r3, [pc, #608]	@ (8001578 <run_fuzzy+0x270>)
 8001316:	4a99      	ldr	r2, [pc, #612]	@ (800157c <run_fuzzy+0x274>)
 8001318:	601a      	str	r2, [r3, #0]
  c2 = 0.22f;
 800131a:	4b99      	ldr	r3, [pc, #612]	@ (8001580 <run_fuzzy+0x278>)
 800131c:	4a99      	ldr	r2, [pc, #612]	@ (8001584 <run_fuzzy+0x27c>)
 800131e:	601a      	str	r2, [r3, #0]
  c3 = 0.18f;
 8001320:	4b99      	ldr	r3, [pc, #612]	@ (8001588 <run_fuzzy+0x280>)
 8001322:	4a9a      	ldr	r2, [pc, #616]	@ (800158c <run_fuzzy+0x284>)
 8001324:	601a      	str	r2, [r3, #0]
  theta.NB = mfTrap(x1, -2, -1, -c1, -c2); // ve hinh dinh nghia cac gia tri ngon ngu cua bien NB,NS,... (theta)
 8001326:	4b94      	ldr	r3, [pc, #592]	@ (8001578 <run_fuzzy+0x270>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 800132e:	4b94      	ldr	r3, [pc, #592]	@ (8001580 <run_fuzzy+0x278>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	4613      	mov	r3, r2
 800133a:	4a95      	ldr	r2, [pc, #596]	@ (8001590 <run_fuzzy+0x288>)
 800133c:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8001340:	68f8      	ldr	r0, [r7, #12]
 8001342:	f7ff ff5f 	bl	8001204 <mfTrap>
 8001346:	4603      	mov	r3, r0
 8001348:	647b      	str	r3, [r7, #68]	@ 0x44
  theta.NS = mfTrap(x1, -c1, -c2, -c3, -0.001);
 800134a:	4b8b      	ldr	r3, [pc, #556]	@ (8001578 <run_fuzzy+0x270>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f083 4100 	eor.w	r1, r3, #2147483648	@ 0x80000000
 8001352:	4b8b      	ldr	r3, [pc, #556]	@ (8001580 <run_fuzzy+0x278>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 800135a:	4b8b      	ldr	r3, [pc, #556]	@ (8001588 <run_fuzzy+0x280>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001362:	488c      	ldr	r0, [pc, #560]	@ (8001594 <run_fuzzy+0x28c>)
 8001364:	9000      	str	r0, [sp, #0]
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	f7ff ff4c 	bl	8001204 <mfTrap>
 800136c:	4603      	mov	r3, r0
 800136e:	64bb      	str	r3, [r7, #72]	@ 0x48
  theta.ZE = mfTrap(x1, -c3, -0.001, c3, c2);
 8001370:	4b85      	ldr	r3, [pc, #532]	@ (8001588 <run_fuzzy+0x280>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f083 4100 	eor.w	r1, r3, #2147483648	@ 0x80000000
 8001378:	4b83      	ldr	r3, [pc, #524]	@ (8001588 <run_fuzzy+0x280>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4b80      	ldr	r3, [pc, #512]	@ (8001580 <run_fuzzy+0x278>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	4613      	mov	r3, r2
 8001384:	4a83      	ldr	r2, [pc, #524]	@ (8001594 <run_fuzzy+0x28c>)
 8001386:	68f8      	ldr	r0, [r7, #12]
 8001388:	f7ff ff3c 	bl	8001204 <mfTrap>
 800138c:	4603      	mov	r3, r0
 800138e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  theta.PS = mfTrap(x1, c3, c2, c1, 1);
 8001390:	4b7d      	ldr	r3, [pc, #500]	@ (8001588 <run_fuzzy+0x280>)
 8001392:	6819      	ldr	r1, [r3, #0]
 8001394:	4b7a      	ldr	r3, [pc, #488]	@ (8001580 <run_fuzzy+0x278>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4b77      	ldr	r3, [pc, #476]	@ (8001578 <run_fuzzy+0x270>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80013a0:	9000      	str	r0, [sp, #0]
 80013a2:	68f8      	ldr	r0, [r7, #12]
 80013a4:	f7ff ff2e 	bl	8001204 <mfTrap>
 80013a8:	4603      	mov	r3, r0
 80013aa:	653b      	str	r3, [r7, #80]	@ 0x50
  theta.PB = mfTrap(x1, c2, c1, 1, 2);
 80013ac:	4b74      	ldr	r3, [pc, #464]	@ (8001580 <run_fuzzy+0x278>)
 80013ae:	6819      	ldr	r1, [r3, #0]
 80013b0:	4b71      	ldr	r3, [pc, #452]	@ (8001578 <run_fuzzy+0x270>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013b8:	9300      	str	r3, [sp, #0]
 80013ba:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80013be:	68f8      	ldr	r0, [r7, #12]
 80013c0:	f7ff ff20 	bl	8001204 <mfTrap>
 80013c4:	4603      	mov	r3, r0
 80013c6:	657b      	str	r3, [r7, #84]	@ 0x54

  // calculate alpha 2 (0->1)
  d1 = 0.25f;
 80013c8:	4b73      	ldr	r3, [pc, #460]	@ (8001598 <run_fuzzy+0x290>)
 80013ca:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 80013ce:	601a      	str	r2, [r3, #0]
  d2 = 0.05f;
 80013d0:	4b72      	ldr	r3, [pc, #456]	@ (800159c <run_fuzzy+0x294>)
 80013d2:	4a73      	ldr	r2, [pc, #460]	@ (80015a0 <run_fuzzy+0x298>)
 80013d4:	601a      	str	r2, [r3, #0]
  d3 = 0.6f;
 80013d6:	4b73      	ldr	r3, [pc, #460]	@ (80015a4 <run_fuzzy+0x29c>)
 80013d8:	4a73      	ldr	r2, [pc, #460]	@ (80015a8 <run_fuzzy+0x2a0>)
 80013da:	601a      	str	r2, [r3, #0]
  theta_dot.NB = mfTriang(x2, -2, -1, -d1); // // ve hinh dinh nghia cac gia tri ngon ngu cua bien NB,NS,... (thetadot)
 80013dc:	4b6e      	ldr	r3, [pc, #440]	@ (8001598 <run_fuzzy+0x290>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80013e4:	4a6a      	ldr	r2, [pc, #424]	@ (8001590 <run_fuzzy+0x288>)
 80013e6:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 80013ea:	68b8      	ldr	r0, [r7, #8]
 80013ec:	f7ff feb0 	bl	8001150 <mfTriang>
 80013f0:	4603      	mov	r3, r0
 80013f2:	633b      	str	r3, [r7, #48]	@ 0x30
  theta_dot.NS = mfTriang(x2, -d3, -d1, -d2);
 80013f4:	4b6b      	ldr	r3, [pc, #428]	@ (80015a4 <run_fuzzy+0x29c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f083 4100 	eor.w	r1, r3, #2147483648	@ 0x80000000
 80013fc:	4b66      	ldr	r3, [pc, #408]	@ (8001598 <run_fuzzy+0x290>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 8001404:	4b65      	ldr	r3, [pc, #404]	@ (800159c <run_fuzzy+0x294>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800140c:	68b8      	ldr	r0, [r7, #8]
 800140e:	f7ff fe9f 	bl	8001150 <mfTriang>
 8001412:	4603      	mov	r3, r0
 8001414:	637b      	str	r3, [r7, #52]	@ 0x34
  theta_dot.ZE = mfTrap(x2, -d1, -d2, d2, d1);
 8001416:	4b60      	ldr	r3, [pc, #384]	@ (8001598 <run_fuzzy+0x290>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f083 4100 	eor.w	r1, r3, #2147483648	@ 0x80000000
 800141e:	4b5f      	ldr	r3, [pc, #380]	@ (800159c <run_fuzzy+0x294>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 8001426:	4b5d      	ldr	r3, [pc, #372]	@ (800159c <run_fuzzy+0x294>)
 8001428:	6818      	ldr	r0, [r3, #0]
 800142a:	4b5b      	ldr	r3, [pc, #364]	@ (8001598 <run_fuzzy+0x290>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	4603      	mov	r3, r0
 8001432:	68b8      	ldr	r0, [r7, #8]
 8001434:	f7ff fee6 	bl	8001204 <mfTrap>
 8001438:	4603      	mov	r3, r0
 800143a:	63bb      	str	r3, [r7, #56]	@ 0x38
  theta_dot.PS = mfTriang(x2, d1, d2, d3);
 800143c:	4b56      	ldr	r3, [pc, #344]	@ (8001598 <run_fuzzy+0x290>)
 800143e:	6819      	ldr	r1, [r3, #0]
 8001440:	4b56      	ldr	r3, [pc, #344]	@ (800159c <run_fuzzy+0x294>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4b57      	ldr	r3, [pc, #348]	@ (80015a4 <run_fuzzy+0x29c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	68b8      	ldr	r0, [r7, #8]
 800144a:	f7ff fe81 	bl	8001150 <mfTriang>
 800144e:	4603      	mov	r3, r0
 8001450:	63fb      	str	r3, [r7, #60]	@ 0x3c
  theta_dot.PB = mfTriang(x2, d2, d3, 1);
 8001452:	4b52      	ldr	r3, [pc, #328]	@ (800159c <run_fuzzy+0x294>)
 8001454:	6819      	ldr	r1, [r3, #0]
 8001456:	4b53      	ldr	r3, [pc, #332]	@ (80015a4 <run_fuzzy+0x29c>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800145e:	68b8      	ldr	r0, [r7, #8]
 8001460:	f7ff fe76 	bl	8001150 <mfTriang>
 8001464:	4603      	mov	r3, r0
 8001466:	643b      	str	r3, [r7, #64]	@ 0x40

  // calculate beta (0->1) base on MAX-MIN, "and" => MIN

  r[0] = min(theta.NB, theta_dot.NB); // NB
 8001468:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800146a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800146c:	4611      	mov	r1, r2
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fe1e 	bl	80010b0 <min>
 8001474:	4603      	mov	r3, r0
 8001476:	65bb      	str	r3, [r7, #88]	@ 0x58

  r[1] = min(theta.NS, theta_dot.NB); // NB
 8001478:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800147a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800147c:	4611      	mov	r1, r2
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff fe16 	bl	80010b0 <min>
 8001484:	4603      	mov	r3, r0
 8001486:	65fb      	str	r3, [r7, #92]	@ 0x5c

  r[2] = min(theta.ZE, theta_dot.NB); // NM
 8001488:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800148a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800148c:	4611      	mov	r1, r2
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fe0e 	bl	80010b0 <min>
 8001494:	4603      	mov	r3, r0
 8001496:	663b      	str	r3, [r7, #96]	@ 0x60

  r[3] = min(theta.PS, theta_dot.NB); // NS
 8001498:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800149a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800149c:	4611      	mov	r1, r2
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fe06 	bl	80010b0 <min>
 80014a4:	4603      	mov	r3, r0
 80014a6:	667b      	str	r3, [r7, #100]	@ 0x64

  r[4] = min(theta.PB, theta_dot.NB); // ZE
 80014a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80014ac:	4611      	mov	r1, r2
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fdfe 	bl	80010b0 <min>
 80014b4:	4603      	mov	r3, r0
 80014b6:	66bb      	str	r3, [r7, #104]	@ 0x68
  //-----------------------

  r[5] = min(theta.NB, theta_dot.NS); // NB
 80014b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80014bc:	4611      	mov	r1, r2
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fdf6 	bl	80010b0 <min>
 80014c4:	4603      	mov	r3, r0
 80014c6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  r[6] = min(theta.NS, theta_dot.NS); // NM
 80014c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80014ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80014cc:	4611      	mov	r1, r2
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fdee 	bl	80010b0 <min>
 80014d4:	4603      	mov	r3, r0
 80014d6:	673b      	str	r3, [r7, #112]	@ 0x70

  r[7] = min(theta.ZE, theta_dot.NS); // NS
 80014d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80014da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80014dc:	4611      	mov	r1, r2
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff fde6 	bl	80010b0 <min>
 80014e4:	4603      	mov	r3, r0
 80014e6:	677b      	str	r3, [r7, #116]	@ 0x74

  r[8] = min(theta.PS, theta_dot.NS); // ZE
 80014e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80014ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80014ec:	4611      	mov	r1, r2
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fdde 	bl	80010b0 <min>
 80014f4:	4603      	mov	r3, r0
 80014f6:	67bb      	str	r3, [r7, #120]	@ 0x78

  r[9] = min(theta.PB, theta_dot.NS); // PS
 80014f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80014fc:	4611      	mov	r1, r2
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fdd6 	bl	80010b0 <min>
 8001504:	4603      	mov	r3, r0
 8001506:	67fb      	str	r3, [r7, #124]	@ 0x7c
  //-----------------------

  r[10] = min(theta.NB, theta_dot.ZE); // NM
 8001508:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800150a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800150c:	4611      	mov	r1, r2
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fdce 	bl	80010b0 <min>
 8001514:	4603      	mov	r3, r0
 8001516:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

  r[11] = min(theta.NS, theta_dot.ZE); // NS
 800151a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800151c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800151e:	4611      	mov	r1, r2
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fdc5 	bl	80010b0 <min>
 8001526:	4603      	mov	r3, r0
 8001528:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  r[12] = min(theta.ZE, theta_dot.ZE); // ZE
 800152c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800152e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001530:	4611      	mov	r1, r2
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff fdbc 	bl	80010b0 <min>
 8001538:	4603      	mov	r3, r0
 800153a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  r[13] = min(theta.PS, theta_dot.ZE); // PS
 800153e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001540:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001542:	4611      	mov	r1, r2
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fdb3 	bl	80010b0 <min>
 800154a:	4603      	mov	r3, r0
 800154c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

  r[14] = min(theta.PB, theta_dot.ZE); // PM
 8001550:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001552:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001554:	4611      	mov	r1, r2
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fdaa 	bl	80010b0 <min>
 800155c:	4603      	mov	r3, r0
 800155e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  //-----------------------
  r[15] = min(theta.NB, theta_dot.PS); // NS
 8001562:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001564:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001566:	4611      	mov	r1, r2
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff fda1 	bl	80010b0 <min>
 800156e:	4603      	mov	r3, r0
 8001570:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001574:	e01a      	b.n	80015ac <run_fuzzy+0x2a4>
 8001576:	bf00      	nop
 8001578:	2000011c 	.word	0x2000011c
 800157c:	3e99999a 	.word	0x3e99999a
 8001580:	20000120 	.word	0x20000120
 8001584:	3e6147ae 	.word	0x3e6147ae
 8001588:	20000124 	.word	0x20000124
 800158c:	3e3851ec 	.word	0x3e3851ec
 8001590:	bf800000 	.word	0xbf800000
 8001594:	ba83126f 	.word	0xba83126f
 8001598:	20000128 	.word	0x20000128
 800159c:	2000012c 	.word	0x2000012c
 80015a0:	3d4ccccd 	.word	0x3d4ccccd
 80015a4:	20000130 	.word	0x20000130
 80015a8:	3f19999a 	.word	0x3f19999a

	r[16] = min(theta.NS, theta_dot.PS); // ZE
 80015ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015ae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80015b0:	4611      	mov	r1, r2
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fd7c 	bl	80010b0 <min>
 80015b8:	4603      	mov	r3, r0
 80015ba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

	r[17] = min(theta.ZE, theta_dot.PS); // PS
 80015be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80015c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80015c2:	4611      	mov	r1, r2
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fd73 	bl	80010b0 <min>
 80015ca:	4603      	mov	r3, r0
 80015cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

	r[18] = min(theta.PS, theta_dot.PS); // PM
 80015d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80015d2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80015d4:	4611      	mov	r1, r2
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fd6a 	bl	80010b0 <min>
 80015dc:	4603      	mov	r3, r0
 80015de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	r[19] = min(theta.PB, theta_dot.PS); // PB
 80015e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80015e6:	4611      	mov	r1, r2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff fd61 	bl	80010b0 <min>
 80015ee:	4603      	mov	r3, r0
 80015f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	//-----------------------

	r[20] = min(theta.NB, theta_dot.PB); // ZE
 80015f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80015f8:	4611      	mov	r1, r2
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fd58 	bl	80010b0 <min>
 8001600:	4603      	mov	r3, r0
 8001602:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

	r[21] = min(theta.NS, theta_dot.PB); // PS
 8001606:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001608:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800160a:	4611      	mov	r1, r2
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fd4f 	bl	80010b0 <min>
 8001612:	4603      	mov	r3, r0
 8001614:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

	r[22] = min(theta.ZE, theta_dot.PB); // PM
 8001618:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800161a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800161c:	4611      	mov	r1, r2
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fd46 	bl	80010b0 <min>
 8001624:	4603      	mov	r3, r0
 8001626:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

	r[23] = min(theta.PS, theta_dot.PB); // PB
 800162a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800162c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800162e:	4611      	mov	r1, r2
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fd3d 	bl	80010b0 <min>
 8001636:	4603      	mov	r3, r0
 8001638:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

	r[24] = min(theta.PB, theta_dot.PB); // PB
 800163c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800163e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001640:	4611      	mov	r1, r2
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fd34 	bl	80010b0 <min>
 8001648:	4603      	mov	r3, r0
 800164a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   * ZE: r4 r8 r12 r16 r20
   * PS: r9 r13 r17 r21
   * PM: r14 r18 r22
   * PB: r19 r23 r24
   */
  u_dot.NB = max(3, r[0], r[1], r[5]);
 800164e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe fee1 	bl	8000418 <__aeabi_f2d>
 8001656:	4680      	mov	r8, r0
 8001658:	4689      	mov	r9, r1
 800165a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe fedb 	bl	8000418 <__aeabi_f2d>
 8001662:	4604      	mov	r4, r0
 8001664:	460d      	mov	r5, r1
 8001666:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001668:	4618      	mov	r0, r3
 800166a:	f7fe fed5 	bl	8000418 <__aeabi_f2d>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001676:	e9cd 4500 	strd	r4, r5, [sp]
 800167a:	4642      	mov	r2, r8
 800167c:	464b      	mov	r3, r9
 800167e:	2003      	movs	r0, #3
 8001680:	f7ff fd2a 	bl	80010d8 <max>
 8001684:	4603      	mov	r3, r0
 8001686:	617b      	str	r3, [r7, #20]
  u_dot.NM = max(3, r[2], r[6], r[10]);
 8001688:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800168a:	4618      	mov	r0, r3
 800168c:	f7fe fec4 	bl	8000418 <__aeabi_f2d>
 8001690:	4680      	mov	r8, r0
 8001692:	4689      	mov	r9, r1
 8001694:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001696:	4618      	mov	r0, r3
 8001698:	f7fe febe 	bl	8000418 <__aeabi_f2d>
 800169c:	4604      	mov	r4, r0
 800169e:	460d      	mov	r5, r1
 80016a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe feb7 	bl	8000418 <__aeabi_f2d>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80016b2:	e9cd 4500 	strd	r4, r5, [sp]
 80016b6:	4642      	mov	r2, r8
 80016b8:	464b      	mov	r3, r9
 80016ba:	2003      	movs	r0, #3
 80016bc:	f7ff fd0c 	bl	80010d8 <max>
 80016c0:	4603      	mov	r3, r0
 80016c2:	61bb      	str	r3, [r7, #24]
  u_dot.NS = max(4, r[3], r[7], r[11], r[15]);
 80016c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7fe fea6 	bl	8000418 <__aeabi_f2d>
 80016cc:	4682      	mov	sl, r0
 80016ce:	468b      	mov	fp, r1
 80016d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7fe fea0 	bl	8000418 <__aeabi_f2d>
 80016d8:	4604      	mov	r4, r0
 80016da:	460d      	mov	r5, r1
 80016dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe fe99 	bl	8000418 <__aeabi_f2d>
 80016e6:	4680      	mov	r8, r0
 80016e8:	4689      	mov	r9, r1
 80016ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe fe92 	bl	8000418 <__aeabi_f2d>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80016fc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001700:	e9cd 4500 	strd	r4, r5, [sp]
 8001704:	4652      	mov	r2, sl
 8001706:	465b      	mov	r3, fp
 8001708:	2004      	movs	r0, #4
 800170a:	f7ff fce5 	bl	80010d8 <max>
 800170e:	4603      	mov	r3, r0
 8001710:	61fb      	str	r3, [r7, #28]
  u_dot.ZE = max(5, r[4], r[8], r[12], r[16], r[20]);
 8001712:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe fe7f 	bl	8000418 <__aeabi_f2d>
 800171a:	e9c7 0100 	strd	r0, r1, [r7]
 800171e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001720:	4618      	mov	r0, r3
 8001722:	f7fe fe79 	bl	8000418 <__aeabi_f2d>
 8001726:	4604      	mov	r4, r0
 8001728:	460d      	mov	r5, r1
 800172a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800172e:	4618      	mov	r0, r3
 8001730:	f7fe fe72 	bl	8000418 <__aeabi_f2d>
 8001734:	4680      	mov	r8, r0
 8001736:	4689      	mov	r9, r1
 8001738:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800173c:	4618      	mov	r0, r3
 800173e:	f7fe fe6b 	bl	8000418 <__aeabi_f2d>
 8001742:	4682      	mov	sl, r0
 8001744:	468b      	mov	fp, r1
 8001746:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe fe64 	bl	8000418 <__aeabi_f2d>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001758:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800175c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001760:	e9cd 4500 	strd	r4, r5, [sp]
 8001764:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001768:	2005      	movs	r0, #5
 800176a:	f7ff fcb5 	bl	80010d8 <max>
 800176e:	4603      	mov	r3, r0
 8001770:	623b      	str	r3, [r7, #32]
  u_dot.PS = max(4, r[9], r[13], r[17], r[21]);
 8001772:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe fe4f 	bl	8000418 <__aeabi_f2d>
 800177a:	4682      	mov	sl, r0
 800177c:	468b      	mov	fp, r1
 800177e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fe48 	bl	8000418 <__aeabi_f2d>
 8001788:	4604      	mov	r4, r0
 800178a:	460d      	mov	r5, r1
 800178c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001790:	4618      	mov	r0, r3
 8001792:	f7fe fe41 	bl	8000418 <__aeabi_f2d>
 8001796:	4680      	mov	r8, r0
 8001798:	4689      	mov	r9, r1
 800179a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800179e:	4618      	mov	r0, r3
 80017a0:	f7fe fe3a 	bl	8000418 <__aeabi_f2d>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80017ac:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80017b0:	e9cd 4500 	strd	r4, r5, [sp]
 80017b4:	4652      	mov	r2, sl
 80017b6:	465b      	mov	r3, fp
 80017b8:	2004      	movs	r0, #4
 80017ba:	f7ff fc8d 	bl	80010d8 <max>
 80017be:	4603      	mov	r3, r0
 80017c0:	627b      	str	r3, [r7, #36]	@ 0x24
  u_dot.PM = max(3, r[14], r[18], r[22]);
 80017c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fe26 	bl	8000418 <__aeabi_f2d>
 80017cc:	4680      	mov	r8, r0
 80017ce:	4689      	mov	r9, r1
 80017d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe fe1f 	bl	8000418 <__aeabi_f2d>
 80017da:	4604      	mov	r4, r0
 80017dc:	460d      	mov	r5, r1
 80017de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe fe18 	bl	8000418 <__aeabi_f2d>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80017f0:	e9cd 4500 	strd	r4, r5, [sp]
 80017f4:	4642      	mov	r2, r8
 80017f6:	464b      	mov	r3, r9
 80017f8:	2003      	movs	r0, #3
 80017fa:	f7ff fc6d 	bl	80010d8 <max>
 80017fe:	4603      	mov	r3, r0
 8001800:	62bb      	str	r3, [r7, #40]	@ 0x28
  u_dot.PB = max(3, r[19], r[23], r[24]);
 8001802:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001806:	4618      	mov	r0, r3
 8001808:	f7fe fe06 	bl	8000418 <__aeabi_f2d>
 800180c:	4680      	mov	r8, r0
 800180e:	4689      	mov	r9, r1
 8001810:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe fdff 	bl	8000418 <__aeabi_f2d>
 800181a:	4604      	mov	r4, r0
 800181c:	460d      	mov	r5, r1
 800181e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001822:	4618      	mov	r0, r3
 8001824:	f7fe fdf8 	bl	8000418 <__aeabi_f2d>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001830:	e9cd 4500 	strd	r4, r5, [sp]
 8001834:	4642      	mov	r2, r8
 8001836:	464b      	mov	r3, r9
 8001838:	2003      	movs	r0, #3
 800183a:	f7ff fc4d 	bl	80010d8 <max>
 800183e:	4603      	mov	r3, r0
 8001840:	62fb      	str	r3, [r7, #44]	@ 0x2c

  // weighted average defuzzification method
  float sum_beta;
  float sum_beta_y;
  sum_beta = u_dot.NB + u_dot.NM + u_dot.NS + u_dot.ZE + u_dot.PS + u_dot.PM + u_dot.PB;
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4611      	mov	r1, r2
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff f963 	bl	8000b14 <__addsf3>
 800184e:	4603      	mov	r3, r0
 8001850:	461a      	mov	r2, r3
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	4619      	mov	r1, r3
 8001856:	4610      	mov	r0, r2
 8001858:	f7ff f95c 	bl	8000b14 <__addsf3>
 800185c:	4603      	mov	r3, r0
 800185e:	461a      	mov	r2, r3
 8001860:	6a3b      	ldr	r3, [r7, #32]
 8001862:	4619      	mov	r1, r3
 8001864:	4610      	mov	r0, r2
 8001866:	f7ff f955 	bl	8000b14 <__addsf3>
 800186a:	4603      	mov	r3, r0
 800186c:	461a      	mov	r2, r3
 800186e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001870:	4619      	mov	r1, r3
 8001872:	4610      	mov	r0, r2
 8001874:	f7ff f94e 	bl	8000b14 <__addsf3>
 8001878:	4603      	mov	r3, r0
 800187a:	461a      	mov	r2, r3
 800187c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800187e:	4619      	mov	r1, r3
 8001880:	4610      	mov	r0, r2
 8001882:	f7ff f947 	bl	8000b14 <__addsf3>
 8001886:	4603      	mov	r3, r0
 8001888:	461a      	mov	r2, r3
 800188a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800188c:	4619      	mov	r1, r3
 800188e:	4610      	mov	r0, r2
 8001890:	f7ff f940 	bl	8000b14 <__addsf3>
 8001894:	4603      	mov	r3, r0
 8001896:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  sum_beta_y = -1 * u_dot.NB + -0.75 * u_dot.NM + -0.45 * u_dot.NS + 0 * u_dot.ZE + 0.45 * u_dot.PS + 0.75 * u_dot.PM + 1 * u_dot.PB;
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fdb9 	bl	8000418 <__aeabi_f2d>
 80018a6:	4604      	mov	r4, r0
 80018a8:	460d      	mov	r5, r1
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe fdb3 	bl	8000418 <__aeabi_f2d>
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	4b42      	ldr	r3, [pc, #264]	@ (80019c0 <run_fuzzy+0x6b8>)
 80018b8:	f7fe fe06 	bl	80004c8 <__aeabi_dmul>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4620      	mov	r0, r4
 80018c2:	4629      	mov	r1, r5
 80018c4:	f7fe fc4a 	bl	800015c <__adddf3>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4614      	mov	r4, r2
 80018ce:	461d      	mov	r5, r3
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fda0 	bl	8000418 <__aeabi_f2d>
 80018d8:	a335      	add	r3, pc, #212	@ (adr r3, 80019b0 <run_fuzzy+0x6a8>)
 80018da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018de:	f7fe fdf3 	bl	80004c8 <__aeabi_dmul>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4620      	mov	r0, r4
 80018e8:	4629      	mov	r1, r5
 80018ea:	f7fe fc37 	bl	800015c <__adddf3>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4614      	mov	r4, r2
 80018f4:	461d      	mov	r5, r3
 80018f6:	6a3b      	ldr	r3, [r7, #32]
 80018f8:	f04f 0100 	mov.w	r1, #0
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fa11 	bl	8000d24 <__aeabi_fmul>
 8001902:	4603      	mov	r3, r0
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe fd87 	bl	8000418 <__aeabi_f2d>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4620      	mov	r0, r4
 8001910:	4629      	mov	r1, r5
 8001912:	f7fe fc23 	bl	800015c <__adddf3>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4614      	mov	r4, r2
 800191c:	461d      	mov	r5, r3
 800191e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001920:	4618      	mov	r0, r3
 8001922:	f7fe fd79 	bl	8000418 <__aeabi_f2d>
 8001926:	a324      	add	r3, pc, #144	@ (adr r3, 80019b8 <run_fuzzy+0x6b0>)
 8001928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192c:	f7fe fdcc 	bl	80004c8 <__aeabi_dmul>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4620      	mov	r0, r4
 8001936:	4629      	mov	r1, r5
 8001938:	f7fe fc10 	bl	800015c <__adddf3>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4614      	mov	r4, r2
 8001942:	461d      	mov	r5, r3
 8001944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe fd66 	bl	8000418 <__aeabi_f2d>
 800194c:	f04f 0200 	mov.w	r2, #0
 8001950:	4b1c      	ldr	r3, [pc, #112]	@ (80019c4 <run_fuzzy+0x6bc>)
 8001952:	f7fe fdb9 	bl	80004c8 <__aeabi_dmul>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4620      	mov	r0, r4
 800195c:	4629      	mov	r1, r5
 800195e:	f7fe fbfd 	bl	800015c <__adddf3>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4614      	mov	r4, r2
 8001968:	461d      	mov	r5, r3
 800196a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800196c:	4618      	mov	r0, r3
 800196e:	f7fe fd53 	bl	8000418 <__aeabi_f2d>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4620      	mov	r0, r4
 8001978:	4629      	mov	r1, r5
 800197a:	f7fe fbef 	bl	800015c <__adddf3>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4610      	mov	r0, r2
 8001984:	4619      	mov	r1, r3
 8001986:	f7ff f86f 	bl	8000a68 <__aeabi_d2f>
 800198a:	4603      	mov	r3, r0
 800198c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  out = sum_beta_y / sum_beta; // Homework3 :>
 8001990:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 8001994:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8001998:	f7ff fa78 	bl	8000e8c <__aeabi_fdiv>
 800199c:	4603      	mov	r3, r0
 800199e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  return out;
 80019a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	37c8      	adds	r7, #200	@ 0xc8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019b0:	cccccccd 	.word	0xcccccccd
 80019b4:	bfdccccc 	.word	0xbfdccccc
 80019b8:	cccccccd 	.word	0xcccccccd
 80019bc:	3fdccccc 	.word	0x3fdccccc
 80019c0:	bfe80000 	.word	0xbfe80000
 80019c4:	3fe80000 	.word	0x3fe80000

080019c8 <limit_range>:

void limit_range(float *x) {
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  if (*x > 1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff fb5f 	bl	800109c <__aeabi_fcmpgt>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d004      	beq.n	80019ee <limit_range+0x26>
    *x = 1;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80019ea:	601a      	str	r2, [r3, #0]
  else if (*x < -1)
    *x = -1;
}
 80019ec:	e00c      	b.n	8001a08 <limit_range+0x40>
  else if (*x < -1)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4907      	ldr	r1, [pc, #28]	@ (8001a10 <limit_range+0x48>)
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff fb33 	bl	8001060 <__aeabi_fcmplt>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d100      	bne.n	8001a02 <limit_range+0x3a>
}
 8001a00:	e002      	b.n	8001a08 <limit_range+0x40>
    *x = -1;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a02      	ldr	r2, [pc, #8]	@ (8001a10 <limit_range+0x48>)
 8001a06:	601a      	str	r2, [r3, #0]
}
 8001a08:	bf00      	nop
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	bf800000 	.word	0xbf800000

08001a14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a18:	f001 f9ba 	bl	8002d90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a1c:	f000 f818 	bl	8001a50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a20:	f000 f9c0 	bl	8001da4 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001a24:	f000 f8d6 	bl	8001bd4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001a28:	f000 f992 	bl	8001d50 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001a2c:	f000 f880 	bl	8001b30 <MX_TIM1_Init>
  MX_I2C1_Init();
 8001a30:	f000 f850 	bl	8001ad4 <MX_I2C1_Init>
  MX_TIM4_Init();
 8001a34:	f000 f928 	bl	8001c88 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  Init_All();
 8001a38:	f000 fa38 	bl	8001eac <Init_All>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  motor_forward();
 8001a3c:	f000 fb38 	bl	80020b0 <motor_forward>
	  pwm_out(0.6);
 8001a40:	4802      	ldr	r0, [pc, #8]	@ (8001a4c <main+0x38>)
 8001a42:	f000 fb71 	bl	8002128 <pwm_out>
	  motor_forward();
 8001a46:	bf00      	nop
 8001a48:	e7f8      	b.n	8001a3c <main+0x28>
 8001a4a:	bf00      	nop
 8001a4c:	3f19999a 	.word	0x3f19999a

08001a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b090      	sub	sp, #64	@ 0x40
 8001a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a56:	f107 0318 	add.w	r3, r7, #24
 8001a5a:	2228      	movs	r2, #40	@ 0x28
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f004 f948 	bl	8005cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	60da      	str	r2, [r3, #12]
 8001a70:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a72:	2302      	movs	r3, #2
 8001a74:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a76:	2301      	movs	r3, #1
 8001a78:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a7a:	2310      	movs	r3, #16
 8001a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001a82:	2300      	movs	r3, #0
 8001a84:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001a86:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8001a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a8c:	f107 0318 	add.w	r3, r7, #24
 8001a90:	4618      	mov	r0, r3
 8001a92:	f002 fce3 	bl	800445c <HAL_RCC_OscConfig>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001a9c:	f000 fbf8 	bl	8002290 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aa0:	230f      	movs	r3, #15
 8001aa2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001aac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ab0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	2102      	movs	r1, #2
 8001aba:	4618      	mov	r0, r3
 8001abc:	f002 ff50 	bl	8004960 <HAL_RCC_ClockConfig>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001ac6:	f000 fbe3 	bl	8002290 <Error_Handler>
  }
}
 8001aca:	bf00      	nop
 8001acc:	3740      	adds	r7, #64	@ 0x40
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ad8:	4b12      	ldr	r3, [pc, #72]	@ (8001b24 <MX_I2C1_Init+0x50>)
 8001ada:	4a13      	ldr	r2, [pc, #76]	@ (8001b28 <MX_I2C1_Init+0x54>)
 8001adc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ade:	4b11      	ldr	r3, [pc, #68]	@ (8001b24 <MX_I2C1_Init+0x50>)
 8001ae0:	4a12      	ldr	r2, [pc, #72]	@ (8001b2c <MX_I2C1_Init+0x58>)
 8001ae2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b24 <MX_I2C1_Init+0x50>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001aea:	4b0e      	ldr	r3, [pc, #56]	@ (8001b24 <MX_I2C1_Init+0x50>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001af0:	4b0c      	ldr	r3, [pc, #48]	@ (8001b24 <MX_I2C1_Init+0x50>)
 8001af2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001af6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001af8:	4b0a      	ldr	r3, [pc, #40]	@ (8001b24 <MX_I2C1_Init+0x50>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001afe:	4b09      	ldr	r3, [pc, #36]	@ (8001b24 <MX_I2C1_Init+0x50>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b04:	4b07      	ldr	r3, [pc, #28]	@ (8001b24 <MX_I2C1_Init+0x50>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b0a:	4b06      	ldr	r3, [pc, #24]	@ (8001b24 <MX_I2C1_Init+0x50>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b10:	4804      	ldr	r0, [pc, #16]	@ (8001b24 <MX_I2C1_Init+0x50>)
 8001b12:	f001 fc49 	bl	80033a8 <HAL_I2C_Init>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b1c:	f000 fbb8 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b20:	bf00      	nop
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20000134 	.word	0x20000134
 8001b28:	40005400 	.word	0x40005400
 8001b2c:	000186a0 	.word	0x000186a0

08001b30 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b36:	f107 0308 	add.w	r3, r7, #8
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b44:	463b      	mov	r3, r7
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bcc <MX_TIM1_Init+0x9c>)
 8001b4e:	4a20      	ldr	r2, [pc, #128]	@ (8001bd0 <MX_TIM1_Init+0xa0>)
 8001b50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 639;
 8001b52:	4b1e      	ldr	r3, [pc, #120]	@ (8001bcc <MX_TIM1_Init+0x9c>)
 8001b54:	f240 227f 	movw	r2, #639	@ 0x27f
 8001b58:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bcc <MX_TIM1_Init+0x9c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8001b60:	4b1a      	ldr	r3, [pc, #104]	@ (8001bcc <MX_TIM1_Init+0x9c>)
 8001b62:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001b66:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b68:	4b18      	ldr	r3, [pc, #96]	@ (8001bcc <MX_TIM1_Init+0x9c>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b6e:	4b17      	ldr	r3, [pc, #92]	@ (8001bcc <MX_TIM1_Init+0x9c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b74:	4b15      	ldr	r3, [pc, #84]	@ (8001bcc <MX_TIM1_Init+0x9c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b7a:	4814      	ldr	r0, [pc, #80]	@ (8001bcc <MX_TIM1_Init+0x9c>)
 8001b7c:	f003 f87e 	bl	8004c7c <HAL_TIM_Base_Init>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001b86:	f000 fb83 	bl	8002290 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b90:	f107 0308 	add.w	r3, r7, #8
 8001b94:	4619      	mov	r1, r3
 8001b96:	480d      	ldr	r0, [pc, #52]	@ (8001bcc <MX_TIM1_Init+0x9c>)
 8001b98:	f003 fbce 	bl	8005338 <HAL_TIM_ConfigClockSource>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001ba2:	f000 fb75 	bl	8002290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bae:	463b      	mov	r3, r7
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4806      	ldr	r0, [pc, #24]	@ (8001bcc <MX_TIM1_Init+0x9c>)
 8001bb4:	f003 ff50 	bl	8005a58 <HAL_TIMEx_MasterConfigSynchronization>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001bbe:	f000 fb67 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001bc2:	bf00      	nop
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000188 	.word	0x20000188
 8001bd0:	40012c00 	.word	0x40012c00

08001bd4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08a      	sub	sp, #40	@ 0x28
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bda:	f107 0320 	add.w	r3, r7, #32
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001be4:	1d3b      	adds	r3, r7, #4
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	605a      	str	r2, [r3, #4]
 8001bec:	609a      	str	r2, [r3, #8]
 8001bee:	60da      	str	r2, [r3, #12]
 8001bf0:	611a      	str	r2, [r3, #16]
 8001bf2:	615a      	str	r2, [r3, #20]
 8001bf4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bf6:	4b22      	ldr	r3, [pc, #136]	@ (8001c80 <MX_TIM3_Init+0xac>)
 8001bf8:	4a22      	ldr	r2, [pc, #136]	@ (8001c84 <MX_TIM3_Init+0xb0>)
 8001bfa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8001bfc:	4b20      	ldr	r3, [pc, #128]	@ (8001c80 <MX_TIM3_Init+0xac>)
 8001bfe:	2209      	movs	r2, #9
 8001c00:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c02:	4b1f      	ldr	r3, [pc, #124]	@ (8001c80 <MX_TIM3_Init+0xac>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3199;
 8001c08:	4b1d      	ldr	r3, [pc, #116]	@ (8001c80 <MX_TIM3_Init+0xac>)
 8001c0a:	f640 427f 	movw	r2, #3199	@ 0xc7f
 8001c0e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c10:	4b1b      	ldr	r3, [pc, #108]	@ (8001c80 <MX_TIM3_Init+0xac>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c16:	4b1a      	ldr	r3, [pc, #104]	@ (8001c80 <MX_TIM3_Init+0xac>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c1c:	4818      	ldr	r0, [pc, #96]	@ (8001c80 <MX_TIM3_Init+0xac>)
 8001c1e:	f003 f8cf 	bl	8004dc0 <HAL_TIM_PWM_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001c28:	f000 fb32 	bl	8002290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c30:	2300      	movs	r3, #0
 8001c32:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c34:	f107 0320 	add.w	r3, r7, #32
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4811      	ldr	r0, [pc, #68]	@ (8001c80 <MX_TIM3_Init+0xac>)
 8001c3c:	f003 ff0c 	bl	8005a58 <HAL_TIMEx_MasterConfigSynchronization>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001c46:	f000 fb23 	bl	8002290 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c4a:	2360      	movs	r3, #96	@ 0x60
 8001c4c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c5a:	1d3b      	adds	r3, r7, #4
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4807      	ldr	r0, [pc, #28]	@ (8001c80 <MX_TIM3_Init+0xac>)
 8001c62:	f003 faa7 	bl	80051b4 <HAL_TIM_PWM_ConfigChannel>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001c6c:	f000 fb10 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c70:	4803      	ldr	r0, [pc, #12]	@ (8001c80 <MX_TIM3_Init+0xac>)
 8001c72:	f000 ff79 	bl	8002b68 <HAL_TIM_MspPostInit>

}
 8001c76:	bf00      	nop
 8001c78:	3728      	adds	r7, #40	@ 0x28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	200001d0 	.word	0x200001d0
 8001c84:	40000400 	.word	0x40000400

08001c88 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08a      	sub	sp, #40	@ 0x28
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c8e:	f107 0320 	add.w	r3, r7, #32
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c98:	1d3b      	adds	r3, r7, #4
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	609a      	str	r2, [r3, #8]
 8001ca2:	60da      	str	r2, [r3, #12]
 8001ca4:	611a      	str	r2, [r3, #16]
 8001ca6:	615a      	str	r2, [r3, #20]
 8001ca8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001caa:	4b27      	ldr	r3, [pc, #156]	@ (8001d48 <MX_TIM4_Init+0xc0>)
 8001cac:	4a27      	ldr	r2, [pc, #156]	@ (8001d4c <MX_TIM4_Init+0xc4>)
 8001cae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9;
 8001cb0:	4b25      	ldr	r3, [pc, #148]	@ (8001d48 <MX_TIM4_Init+0xc0>)
 8001cb2:	2209      	movs	r2, #9
 8001cb4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb6:	4b24      	ldr	r3, [pc, #144]	@ (8001d48 <MX_TIM4_Init+0xc0>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3199;
 8001cbc:	4b22      	ldr	r3, [pc, #136]	@ (8001d48 <MX_TIM4_Init+0xc0>)
 8001cbe:	f640 427f 	movw	r2, #3199	@ 0xc7f
 8001cc2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc4:	4b20      	ldr	r3, [pc, #128]	@ (8001d48 <MX_TIM4_Init+0xc0>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cca:	4b1f      	ldr	r3, [pc, #124]	@ (8001d48 <MX_TIM4_Init+0xc0>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001cd0:	481d      	ldr	r0, [pc, #116]	@ (8001d48 <MX_TIM4_Init+0xc0>)
 8001cd2:	f003 f875 	bl	8004dc0 <HAL_TIM_PWM_Init>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001cdc:	f000 fad8 	bl	8002290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ce8:	f107 0320 	add.w	r3, r7, #32
 8001cec:	4619      	mov	r1, r3
 8001cee:	4816      	ldr	r0, [pc, #88]	@ (8001d48 <MX_TIM4_Init+0xc0>)
 8001cf0:	f003 feb2 	bl	8005a58 <HAL_TIMEx_MasterConfigSynchronization>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001cfa:	f000 fac9 	bl	8002290 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cfe:	2360      	movs	r3, #96	@ 0x60
 8001d00:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d0e:	1d3b      	adds	r3, r7, #4
 8001d10:	2200      	movs	r2, #0
 8001d12:	4619      	mov	r1, r3
 8001d14:	480c      	ldr	r0, [pc, #48]	@ (8001d48 <MX_TIM4_Init+0xc0>)
 8001d16:	f003 fa4d 	bl	80051b4 <HAL_TIM_PWM_ConfigChannel>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001d20:	f000 fab6 	bl	8002290 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d24:	1d3b      	adds	r3, r7, #4
 8001d26:	2204      	movs	r2, #4
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4807      	ldr	r0, [pc, #28]	@ (8001d48 <MX_TIM4_Init+0xc0>)
 8001d2c:	f003 fa42 	bl	80051b4 <HAL_TIM_PWM_ConfigChannel>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001d36:	f000 faab 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001d3a:	4803      	ldr	r0, [pc, #12]	@ (8001d48 <MX_TIM4_Init+0xc0>)
 8001d3c:	f000 ff14 	bl	8002b68 <HAL_TIM_MspPostInit>

}
 8001d40:	bf00      	nop
 8001d42:	3728      	adds	r7, #40	@ 0x28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20000218 	.word	0x20000218
 8001d4c:	40000800 	.word	0x40000800

08001d50 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d54:	4b11      	ldr	r3, [pc, #68]	@ (8001d9c <MX_USART1_UART_Init+0x4c>)
 8001d56:	4a12      	ldr	r2, [pc, #72]	@ (8001da0 <MX_USART1_UART_Init+0x50>)
 8001d58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d5a:	4b10      	ldr	r3, [pc, #64]	@ (8001d9c <MX_USART1_UART_Init+0x4c>)
 8001d5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d62:	4b0e      	ldr	r3, [pc, #56]	@ (8001d9c <MX_USART1_UART_Init+0x4c>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d68:	4b0c      	ldr	r3, [pc, #48]	@ (8001d9c <MX_USART1_UART_Init+0x4c>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d9c <MX_USART1_UART_Init+0x4c>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d74:	4b09      	ldr	r3, [pc, #36]	@ (8001d9c <MX_USART1_UART_Init+0x4c>)
 8001d76:	220c      	movs	r2, #12
 8001d78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d7a:	4b08      	ldr	r3, [pc, #32]	@ (8001d9c <MX_USART1_UART_Init+0x4c>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d80:	4b06      	ldr	r3, [pc, #24]	@ (8001d9c <MX_USART1_UART_Init+0x4c>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d86:	4805      	ldr	r0, [pc, #20]	@ (8001d9c <MX_USART1_UART_Init+0x4c>)
 8001d88:	f003 fed6 	bl	8005b38 <HAL_UART_Init>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d92:	f000 fa7d 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000260 	.word	0x20000260
 8001da0:	40013800 	.word	0x40013800

08001da4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b088      	sub	sp, #32
 8001da8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001daa:	f107 0310 	add.w	r3, r7, #16
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	605a      	str	r2, [r3, #4]
 8001db4:	609a      	str	r2, [r3, #8]
 8001db6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db8:	4b38      	ldr	r3, [pc, #224]	@ (8001e9c <MX_GPIO_Init+0xf8>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	4a37      	ldr	r2, [pc, #220]	@ (8001e9c <MX_GPIO_Init+0xf8>)
 8001dbe:	f043 0310 	orr.w	r3, r3, #16
 8001dc2:	6193      	str	r3, [r2, #24]
 8001dc4:	4b35      	ldr	r3, [pc, #212]	@ (8001e9c <MX_GPIO_Init+0xf8>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	f003 0310 	and.w	r3, r3, #16
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dd0:	4b32      	ldr	r3, [pc, #200]	@ (8001e9c <MX_GPIO_Init+0xf8>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	4a31      	ldr	r2, [pc, #196]	@ (8001e9c <MX_GPIO_Init+0xf8>)
 8001dd6:	f043 0320 	orr.w	r3, r3, #32
 8001dda:	6193      	str	r3, [r2, #24]
 8001ddc:	4b2f      	ldr	r3, [pc, #188]	@ (8001e9c <MX_GPIO_Init+0xf8>)
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	f003 0320 	and.w	r3, r3, #32
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de8:	4b2c      	ldr	r3, [pc, #176]	@ (8001e9c <MX_GPIO_Init+0xf8>)
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	4a2b      	ldr	r2, [pc, #172]	@ (8001e9c <MX_GPIO_Init+0xf8>)
 8001dee:	f043 0304 	orr.w	r3, r3, #4
 8001df2:	6193      	str	r3, [r2, #24]
 8001df4:	4b29      	ldr	r3, [pc, #164]	@ (8001e9c <MX_GPIO_Init+0xf8>)
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	607b      	str	r3, [r7, #4]
 8001dfe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e00:	4b26      	ldr	r3, [pc, #152]	@ (8001e9c <MX_GPIO_Init+0xf8>)
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	4a25      	ldr	r2, [pc, #148]	@ (8001e9c <MX_GPIO_Init+0xf8>)
 8001e06:	f043 0308 	orr.w	r3, r3, #8
 8001e0a:	6193      	str	r3, [r2, #24]
 8001e0c:	4b23      	ldr	r3, [pc, #140]	@ (8001e9c <MX_GPIO_Init+0xf8>)
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	f003 0308 	and.w	r3, r3, #8
 8001e14:	603b      	str	r3, [r7, #0]
 8001e16:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e1e:	4820      	ldr	r0, [pc, #128]	@ (8001ea0 <MX_GPIO_Init+0xfc>)
 8001e20:	f001 faaa 	bl	8003378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_OUT_LED_Pin|GPIO_PIN_5|IN1_Pin|IN2_Pin, GPIO_PIN_RESET);
 8001e24:	2200      	movs	r2, #0
 8001e26:	21e8      	movs	r1, #232	@ 0xe8
 8001e28:	481e      	ldr	r0, [pc, #120]	@ (8001ea4 <MX_GPIO_Init+0x100>)
 8001e2a:	f001 faa5 	bl	8003378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_5, GPIO_PIN_RESET);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f44f 6142 	mov.w	r1, #3104	@ 0xc20
 8001e34:	481c      	ldr	r0, [pc, #112]	@ (8001ea8 <MX_GPIO_Init+0x104>)
 8001e36:	f001 fa9f 	bl	8003378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001e3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e40:	2301      	movs	r3, #1
 8001e42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e4c:	f107 0310 	add.w	r3, r7, #16
 8001e50:	4619      	mov	r1, r3
 8001e52:	4813      	ldr	r0, [pc, #76]	@ (8001ea0 <MX_GPIO_Init+0xfc>)
 8001e54:	f001 f90c 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_OUT_LED_Pin PA5 IN1_Pin IN2_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_LED_Pin|GPIO_PIN_5|IN1_Pin|IN2_Pin;
 8001e58:	23e8      	movs	r3, #232	@ 0xe8
 8001e5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e64:	2302      	movs	r3, #2
 8001e66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e68:	f107 0310 	add.w	r3, r7, #16
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	480d      	ldr	r0, [pc, #52]	@ (8001ea4 <MX_GPIO_Init+0x100>)
 8001e70:	f001 f8fe 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_5;
 8001e74:	f44f 6342 	mov.w	r3, #3104	@ 0xc20
 8001e78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e82:	2302      	movs	r3, #2
 8001e84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e86:	f107 0310 	add.w	r3, r7, #16
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4806      	ldr	r0, [pc, #24]	@ (8001ea8 <MX_GPIO_Init+0x104>)
 8001e8e:	f001 f8ef 	bl	8003070 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e92:	bf00      	nop
 8001e94:	3720      	adds	r7, #32
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	40011000 	.word	0x40011000
 8001ea4:	40010800 	.word	0x40010800
 8001ea8:	40010c00 	.word	0x40010c00

08001eac <Init_All>:

/* USER CODE BEGIN 4 */
void Init_All()
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
	while (MPU6050_Init(&hi2c1) == 1);
 8001eb0:	bf00      	nop
 8001eb2:	4809      	ldr	r0, [pc, #36]	@ (8001ed8 <Init_All+0x2c>)
 8001eb4:	f000 f9f2 	bl	800229c <MPU6050_Init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d0f9      	beq.n	8001eb2 <Init_All+0x6>
	HAL_TIM_Base_Start_IT(&htim1);
 8001ebe:	4807      	ldr	r0, [pc, #28]	@ (8001edc <Init_All+0x30>)
 8001ec0:	f002 ff2c 	bl	8004d1c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	4806      	ldr	r0, [pc, #24]	@ (8001ee0 <Init_All+0x34>)
 8001ec8:	f002 ffca 	bl	8004e60 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001ecc:	2104      	movs	r1, #4
 8001ece:	4805      	ldr	r0, [pc, #20]	@ (8001ee4 <Init_All+0x38>)
 8001ed0:	f002 ffc6 	bl	8004e60 <HAL_TIM_PWM_Start>
}
 8001ed4:	bf00      	nop
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20000134 	.word	0x20000134
 8001edc:	20000188 	.word	0x20000188
 8001ee0:	200001d0 	.word	0x200001d0
 8001ee4:	20000218 	.word	0x20000218

08001ee8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
//	time = HAL_GetTick();
	if(htim->Instance == htim1.Instance)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	4b34      	ldr	r3, [pc, #208]	@ (8001fc8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d159      	bne.n	8001fb0 <HAL_TIM_PeriodElapsedCallback+0xc8>
	{
		MPU6050_Read_All(&hi2c1, &MPU6050);
 8001efc:	4933      	ldr	r1, [pc, #204]	@ (8001fcc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001efe:	4834      	ldr	r0, [pc, #208]	@ (8001fd0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001f00:	f000 fa26 	bl	8002350 <MPU6050_Read_All>
		Fuzzy_Process();
 8001f04:	f000 f870 	bl	8001fe8 <Fuzzy_Process>
		if ((Parameters.theta <= THETA_OFFSET + 4 && Parameters.theta >= THETA_OFFSET - 2)
 8001f08:	4b32      	ldr	r3, [pc, #200]	@ (8001fd4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff f8af 	bl	8001074 <__aeabi_fcmple>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d008      	beq.n	8001f2e <HAL_TIM_PeriodElapsedCallback+0x46>
 8001f1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001fd4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	492d      	ldr	r1, [pc, #180]	@ (8001fd8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff f8b0 	bl	8001088 <__aeabi_fcmpge>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d111      	bne.n	8001f52 <HAL_TIM_PeriodElapsedCallback+0x6a>
			|| Parameters.theta < -THETA_OVER || Parameters.theta > THETA_OVER)
 8001f2e:	4b29      	ldr	r3, [pc, #164]	@ (8001fd4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	492a      	ldr	r1, [pc, #168]	@ (8001fdc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff f893 	bl	8001060 <__aeabi_fcmplt>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d108      	bne.n	8001f52 <HAL_TIM_PeriodElapsedCallback+0x6a>
 8001f40:	4b24      	ldr	r3, [pc, #144]	@ (8001fd4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	4926      	ldr	r1, [pc, #152]	@ (8001fe0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff f8a8 	bl	800109c <__aeabi_fcmpgt>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d004      	beq.n	8001f5c <HAL_TIM_PeriodElapsedCallback+0x74>
		{
			pwm_out(0);
 8001f52:	f04f 0000 	mov.w	r0, #0
 8001f56:	f000 f8e7 	bl	8002128 <pwm_out>
		{
			motor_forward();
			pwm_out(Parameters.uk_fuzzy);
		}
	}
}
 8001f5a:	e029      	b.n	8001fb0 <HAL_TIM_PeriodElapsedCallback+0xc8>
		else if(Parameters.uk_fuzzy > 0.4)
 8001f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe fa59 	bl	8000418 <__aeabi_f2d>
 8001f66:	a314      	add	r3, pc, #80	@ (adr r3, 8001fb8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6c:	f7fe fd3c 	bl	80009e8 <__aeabi_dcmpgt>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d007      	beq.n	8001f86 <HAL_TIM_PeriodElapsedCallback+0x9e>
			motor_reverse();
 8001f76:	f000 f8b9 	bl	80020ec <motor_reverse>
			pwm_out(Parameters.uk_fuzzy);
 8001f7a:	4b16      	ldr	r3, [pc, #88]	@ (8001fd4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 f8d2 	bl	8002128 <pwm_out>
}
 8001f84:	e014      	b.n	8001fb0 <HAL_TIM_PeriodElapsedCallback+0xc8>
		else if(Parameters.uk_fuzzy < -0.4)
 8001f86:	4b13      	ldr	r3, [pc, #76]	@ (8001fd4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe fa44 	bl	8000418 <__aeabi_f2d>
 8001f90:	a30b      	add	r3, pc, #44	@ (adr r3, 8001fc0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f96:	f7fe fd09 	bl	80009ac <__aeabi_dcmplt>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d100      	bne.n	8001fa2 <HAL_TIM_PeriodElapsedCallback+0xba>
}
 8001fa0:	e006      	b.n	8001fb0 <HAL_TIM_PeriodElapsedCallback+0xc8>
			motor_forward();
 8001fa2:	f000 f885 	bl	80020b0 <motor_forward>
			pwm_out(Parameters.uk_fuzzy);
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 f8bc 	bl	8002128 <pwm_out>
}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	9999999a 	.word	0x9999999a
 8001fbc:	3fd99999 	.word	0x3fd99999
 8001fc0:	9999999a 	.word	0x9999999a
 8001fc4:	bfd99999 	.word	0xbfd99999
 8001fc8:	20000188 	.word	0x20000188
 8001fcc:	200002a8 	.word	0x200002a8
 8001fd0:	20000134 	.word	0x20000134
 8001fd4:	20000300 	.word	0x20000300
 8001fd8:	c0900000 	.word	0xc0900000
 8001fdc:	c2820000 	.word	0xc2820000
 8001fe0:	42820000 	.word	0x42820000
 8001fe4:	00000000 	.word	0x00000000

08001fe8 <Fuzzy_Process>:

void Fuzzy_Process()
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
	Parameters.theta = MPU6050.KalmanAngleY;
 8001fec:	4b2c      	ldr	r3, [pc, #176]	@ (80020a0 <Fuzzy_Process+0xb8>)
 8001fee:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f7fe fd37 	bl	8000a68 <__aeabi_d2f>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	4a29      	ldr	r2, [pc, #164]	@ (80020a4 <Fuzzy_Process+0xbc>)
 8001ffe:	60d3      	str	r3, [r2, #12]
	Parameters.theta_dot = (MPU6050.Gy) * RAD_TO_DEG;
 8002000:	4b27      	ldr	r3, [pc, #156]	@ (80020a0 <Fuzzy_Process+0xb8>)
 8002002:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002006:	a322      	add	r3, pc, #136	@ (adr r3, 8002090 <Fuzzy_Process+0xa8>)
 8002008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200c:	f7fe fa5c 	bl	80004c8 <__aeabi_dmul>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	4610      	mov	r0, r2
 8002016:	4619      	mov	r1, r3
 8002018:	f7fe fd26 	bl	8000a68 <__aeabi_d2f>
 800201c:	4603      	mov	r3, r0
 800201e:	4a21      	ldr	r2, [pc, #132]	@ (80020a4 <Fuzzy_Process+0xbc>)
 8002020:	6113      	str	r3, [r2, #16]
	Parameters.input[0] = Parameters.theta * (1/K_THETA);
 8002022:	4b20      	ldr	r3, [pc, #128]	@ (80020a4 <Fuzzy_Process+0xbc>)
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe f9f6 	bl	8000418 <__aeabi_f2d>
 800202c:	a31a      	add	r3, pc, #104	@ (adr r3, 8002098 <Fuzzy_Process+0xb0>)
 800202e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002032:	f7fe fa49 	bl	80004c8 <__aeabi_dmul>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	4610      	mov	r0, r2
 800203c:	4619      	mov	r1, r3
 800203e:	f7fe fd13 	bl	8000a68 <__aeabi_d2f>
 8002042:	4603      	mov	r3, r0
 8002044:	4a17      	ldr	r2, [pc, #92]	@ (80020a4 <Fuzzy_Process+0xbc>)
 8002046:	6013      	str	r3, [r2, #0]
	Parameters.input[1] = Parameters.theta_dot * (1/K_THETA_DOT);
 8002048:	4b16      	ldr	r3, [pc, #88]	@ (80020a4 <Fuzzy_Process+0xbc>)
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	f04f 0100 	mov.w	r1, #0
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fe67 	bl	8000d24 <__aeabi_fmul>
 8002056:	4603      	mov	r3, r0
 8002058:	461a      	mov	r2, r3
 800205a:	4b12      	ldr	r3, [pc, #72]	@ (80020a4 <Fuzzy_Process+0xbc>)
 800205c:	605a      	str	r2, [r3, #4]
	limit_range(&(Parameters.input[0]));
 800205e:	4811      	ldr	r0, [pc, #68]	@ (80020a4 <Fuzzy_Process+0xbc>)
 8002060:	f7ff fcb2 	bl	80019c8 <limit_range>
	limit_range(&(Parameters.input[1]));
 8002064:	4810      	ldr	r0, [pc, #64]	@ (80020a8 <Fuzzy_Process+0xc0>)
 8002066:	f7ff fcaf 	bl	80019c8 <limit_range>
	Parameters.uk_fuzzy = (run_fuzzy(Parameters.input[0], Parameters.input[1])) * K_UK_FUZZY;
 800206a:	4b0e      	ldr	r3, [pc, #56]	@ (80020a4 <Fuzzy_Process+0xbc>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a0d      	ldr	r2, [pc, #52]	@ (80020a4 <Fuzzy_Process+0xbc>)
 8002070:	6852      	ldr	r2, [r2, #4]
 8002072:	4611      	mov	r1, r2
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff f947 	bl	8001308 <run_fuzzy>
 800207a:	4603      	mov	r3, r0
 800207c:	490b      	ldr	r1, [pc, #44]	@ (80020ac <Fuzzy_Process+0xc4>)
 800207e:	4618      	mov	r0, r3
 8002080:	f7fe fe50 	bl	8000d24 <__aeabi_fmul>
 8002084:	4603      	mov	r3, r0
 8002086:	461a      	mov	r2, r3
 8002088:	4b06      	ldr	r3, [pc, #24]	@ (80020a4 <Fuzzy_Process+0xbc>)
 800208a:	609a      	str	r2, [r3, #8]
}
 800208c:	bf00      	nop
 800208e:	bd80      	pop	{r7, pc}
 8002090:	1a63c1f8 	.word	0x1a63c1f8
 8002094:	404ca5dc 	.word	0x404ca5dc
 8002098:	f3831f39 	.word	0xf3831f39
 800209c:	3fbf3831 	.word	0x3fbf3831
 80020a0:	200002a8 	.word	0x200002a8
 80020a4:	20000300 	.word	0x20000300
 80020a8:	20000304 	.word	0x20000304
 80020ac:	4547f000 	.word	0x4547f000

080020b0 <motor_forward>:

void motor_forward()
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1); //IN1
 80020b4:	2201      	movs	r2, #1
 80020b6:	2140      	movs	r1, #64	@ 0x40
 80020b8:	480a      	ldr	r0, [pc, #40]	@ (80020e4 <motor_forward+0x34>)
 80020ba:	f001 f95d 	bl	8003378 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0); //IN2
 80020be:	2200      	movs	r2, #0
 80020c0:	2180      	movs	r1, #128	@ 0x80
 80020c2:	4808      	ldr	r0, [pc, #32]	@ (80020e4 <motor_forward+0x34>)
 80020c4:	f001 f958 	bl	8003378 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1); //IN3
 80020c8:	2201      	movs	r2, #1
 80020ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80020ce:	4806      	ldr	r0, [pc, #24]	@ (80020e8 <motor_forward+0x38>)
 80020d0:	f001 f952 	bl	8003378 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0); //IN4
 80020d4:	2200      	movs	r2, #0
 80020d6:	2120      	movs	r1, #32
 80020d8:	4803      	ldr	r0, [pc, #12]	@ (80020e8 <motor_forward+0x38>)
 80020da:	f001 f94d 	bl	8003378 <HAL_GPIO_WritePin>
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40010800 	.word	0x40010800
 80020e8:	40010c00 	.word	0x40010c00

080020ec <motor_reverse>:

void motor_reverse()
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0); //IN1
 80020f0:	2200      	movs	r2, #0
 80020f2:	2140      	movs	r1, #64	@ 0x40
 80020f4:	480a      	ldr	r0, [pc, #40]	@ (8002120 <motor_reverse+0x34>)
 80020f6:	f001 f93f 	bl	8003378 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1); //IN2
 80020fa:	2201      	movs	r2, #1
 80020fc:	2180      	movs	r1, #128	@ 0x80
 80020fe:	4808      	ldr	r0, [pc, #32]	@ (8002120 <motor_reverse+0x34>)
 8002100:	f001 f93a 	bl	8003378 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0); //IN3
 8002104:	2200      	movs	r2, #0
 8002106:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800210a:	4806      	ldr	r0, [pc, #24]	@ (8002124 <motor_reverse+0x38>)
 800210c:	f001 f934 	bl	8003378 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1); //IN4
 8002110:	2201      	movs	r2, #1
 8002112:	2120      	movs	r1, #32
 8002114:	4803      	ldr	r0, [pc, #12]	@ (8002124 <motor_reverse+0x38>)
 8002116:	f001 f92f 	bl	8003378 <HAL_GPIO_WritePin>
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40010800 	.word	0x40010800
 8002124:	40010c00 	.word	0x40010c00

08002128 <pwm_out>:

void pwm_out(float duty) //duty 0->1 (not 0->100), uk -1->1
{
 8002128:	b5b0      	push	{r4, r5, r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
	if (duty > 0)
 8002130:	f04f 0100 	mov.w	r1, #0
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7fe ffb1 	bl	800109c <__aeabi_fcmpgt>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d040      	beq.n	80021c2 <pwm_out+0x9a>
	{
		htim3.Instance->CCR1 = (htim3.Instance->ARR) * (duty+0.02); //hardware
 8002140:	4b51      	ldr	r3, [pc, #324]	@ (8002288 <pwm_out+0x160>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002146:	4618      	mov	r0, r3
 8002148:	f7fe f944 	bl	80003d4 <__aeabi_ui2d>
 800214c:	4604      	mov	r4, r0
 800214e:	460d      	mov	r5, r1
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7fe f961 	bl	8000418 <__aeabi_f2d>
 8002156:	a348      	add	r3, pc, #288	@ (adr r3, 8002278 <pwm_out+0x150>)
 8002158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800215c:	f7fd fffe 	bl	800015c <__adddf3>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	4620      	mov	r0, r4
 8002166:	4629      	mov	r1, r5
 8002168:	f7fe f9ae 	bl	80004c8 <__aeabi_dmul>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	4945      	ldr	r1, [pc, #276]	@ (8002288 <pwm_out+0x160>)
 8002172:	680c      	ldr	r4, [r1, #0]
 8002174:	4610      	mov	r0, r2
 8002176:	4619      	mov	r1, r3
 8002178:	f7fe fc56 	bl	8000a28 <__aeabi_d2uiz>
 800217c:	4603      	mov	r3, r0
 800217e:	6363      	str	r3, [r4, #52]	@ 0x34
		htim4.Instance->CCR2 = (htim4.Instance->ARR) * (duty-0.05);
 8002180:	4b42      	ldr	r3, [pc, #264]	@ (800228c <pwm_out+0x164>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe f924 	bl	80003d4 <__aeabi_ui2d>
 800218c:	4604      	mov	r4, r0
 800218e:	460d      	mov	r5, r1
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7fe f941 	bl	8000418 <__aeabi_f2d>
 8002196:	a33a      	add	r3, pc, #232	@ (adr r3, 8002280 <pwm_out+0x158>)
 8002198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219c:	f7fd ffdc 	bl	8000158 <__aeabi_dsub>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	4620      	mov	r0, r4
 80021a6:	4629      	mov	r1, r5
 80021a8:	f7fe f98e 	bl	80004c8 <__aeabi_dmul>
 80021ac:	4602      	mov	r2, r0
 80021ae:	460b      	mov	r3, r1
 80021b0:	4936      	ldr	r1, [pc, #216]	@ (800228c <pwm_out+0x164>)
 80021b2:	680c      	ldr	r4, [r1, #0]
 80021b4:	4610      	mov	r0, r2
 80021b6:	4619      	mov	r1, r3
 80021b8:	f7fe fc36 	bl	8000a28 <__aeabi_d2uiz>
 80021bc:	4603      	mov	r3, r0
 80021be:	63a3      	str	r3, [r4, #56]	@ 0x38
	else
	{
		htim3.Instance->CCR1 = 0;
		htim4.Instance->CCR2 = 0;
	}
}
 80021c0:	e056      	b.n	8002270 <pwm_out+0x148>
	else if (duty < 0)
 80021c2:	f04f 0100 	mov.w	r1, #0
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7fe ff4a 	bl	8001060 <__aeabi_fcmplt>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d046      	beq.n	8002260 <pwm_out+0x138>
		htim3.Instance->CCR1 = (htim3.Instance->ARR) * ((-duty)+0.02); //hardware
 80021d2:	4b2d      	ldr	r3, [pc, #180]	@ (8002288 <pwm_out+0x160>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d8:	4618      	mov	r0, r3
 80021da:	f7fe f8fb 	bl	80003d4 <__aeabi_ui2d>
 80021de:	4604      	mov	r4, r0
 80021e0:	460d      	mov	r5, r1
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe f915 	bl	8000418 <__aeabi_f2d>
 80021ee:	a322      	add	r3, pc, #136	@ (adr r3, 8002278 <pwm_out+0x150>)
 80021f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f4:	f7fd ffb2 	bl	800015c <__adddf3>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	4620      	mov	r0, r4
 80021fe:	4629      	mov	r1, r5
 8002200:	f7fe f962 	bl	80004c8 <__aeabi_dmul>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	491f      	ldr	r1, [pc, #124]	@ (8002288 <pwm_out+0x160>)
 800220a:	680c      	ldr	r4, [r1, #0]
 800220c:	4610      	mov	r0, r2
 800220e:	4619      	mov	r1, r3
 8002210:	f7fe fc0a 	bl	8000a28 <__aeabi_d2uiz>
 8002214:	4603      	mov	r3, r0
 8002216:	6363      	str	r3, [r4, #52]	@ 0x34
		htim4.Instance->CCR2 = (htim4.Instance->ARR) * ((-duty)-0.05);
 8002218:	4b1c      	ldr	r3, [pc, #112]	@ (800228c <pwm_out+0x164>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe f8d8 	bl	80003d4 <__aeabi_ui2d>
 8002224:	4604      	mov	r4, r0
 8002226:	460d      	mov	r5, r1
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe f8f2 	bl	8000418 <__aeabi_f2d>
 8002234:	a312      	add	r3, pc, #72	@ (adr r3, 8002280 <pwm_out+0x158>)
 8002236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223a:	f7fd ff8d 	bl	8000158 <__aeabi_dsub>
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	4620      	mov	r0, r4
 8002244:	4629      	mov	r1, r5
 8002246:	f7fe f93f 	bl	80004c8 <__aeabi_dmul>
 800224a:	4602      	mov	r2, r0
 800224c:	460b      	mov	r3, r1
 800224e:	490f      	ldr	r1, [pc, #60]	@ (800228c <pwm_out+0x164>)
 8002250:	680c      	ldr	r4, [r1, #0]
 8002252:	4610      	mov	r0, r2
 8002254:	4619      	mov	r1, r3
 8002256:	f7fe fbe7 	bl	8000a28 <__aeabi_d2uiz>
 800225a:	4603      	mov	r3, r0
 800225c:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 800225e:	e007      	b.n	8002270 <pwm_out+0x148>
		htim3.Instance->CCR1 = 0;
 8002260:	4b09      	ldr	r3, [pc, #36]	@ (8002288 <pwm_out+0x160>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2200      	movs	r2, #0
 8002266:	635a      	str	r2, [r3, #52]	@ 0x34
		htim4.Instance->CCR2 = 0;
 8002268:	4b08      	ldr	r3, [pc, #32]	@ (800228c <pwm_out+0x164>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2200      	movs	r2, #0
 800226e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002270:	bf00      	nop
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bdb0      	pop	{r4, r5, r7, pc}
 8002278:	47ae147b 	.word	0x47ae147b
 800227c:	3f947ae1 	.word	0x3f947ae1
 8002280:	9999999a 	.word	0x9999999a
 8002284:	3fa99999 	.word	0x3fa99999
 8002288:	200001d0 	.word	0x200001d0
 800228c:	20000218 	.word	0x20000218

08002290 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002294:	b672      	cpsid	i
}
 8002296:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002298:	bf00      	nop
 800229a:	e7fd      	b.n	8002298 <Error_Handler+0x8>

0800229c <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b088      	sub	sp, #32
 80022a0:	af04      	add	r7, sp, #16
 80022a2:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80022a4:	2364      	movs	r3, #100	@ 0x64
 80022a6:	9302      	str	r3, [sp, #8]
 80022a8:	2301      	movs	r3, #1
 80022aa:	9301      	str	r3, [sp, #4]
 80022ac:	f107 030f 	add.w	r3, r7, #15
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	2301      	movs	r3, #1
 80022b4:	2275      	movs	r2, #117	@ 0x75
 80022b6:	21d0      	movs	r1, #208	@ 0xd0
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f001 fab3 	bl	8003824 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 80022be:	7bfb      	ldrb	r3, [r7, #15]
 80022c0:	2b68      	cmp	r3, #104	@ 0x68
 80022c2:	d13d      	bne.n	8002340 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80022c8:	2364      	movs	r3, #100	@ 0x64
 80022ca:	9302      	str	r3, [sp, #8]
 80022cc:	2301      	movs	r3, #1
 80022ce:	9301      	str	r3, [sp, #4]
 80022d0:	f107 030e 	add.w	r3, r7, #14
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	2301      	movs	r3, #1
 80022d8:	226b      	movs	r2, #107	@ 0x6b
 80022da:	21d0      	movs	r1, #208	@ 0xd0
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f001 f9a7 	bl	8003630 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80022e2:	2307      	movs	r3, #7
 80022e4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80022e6:	2364      	movs	r3, #100	@ 0x64
 80022e8:	9302      	str	r3, [sp, #8]
 80022ea:	2301      	movs	r3, #1
 80022ec:	9301      	str	r3, [sp, #4]
 80022ee:	f107 030e 	add.w	r3, r7, #14
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	2301      	movs	r3, #1
 80022f6:	2219      	movs	r2, #25
 80022f8:	21d0      	movs	r1, #208	@ 0xd0
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f001 f998 	bl	8003630 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ï¿½ 2g
        Data = 0x00;
 8002300:	2300      	movs	r3, #0
 8002302:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002304:	2364      	movs	r3, #100	@ 0x64
 8002306:	9302      	str	r3, [sp, #8]
 8002308:	2301      	movs	r3, #1
 800230a:	9301      	str	r3, [sp, #4]
 800230c:	f107 030e 	add.w	r3, r7, #14
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	2301      	movs	r3, #1
 8002314:	221c      	movs	r2, #28
 8002316:	21d0      	movs	r1, #208	@ 0xd0
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f001 f989 	bl	8003630 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ï¿½ 250 ï¿½/s
        Data = 0x00;
 800231e:	2300      	movs	r3, #0
 8002320:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002322:	2364      	movs	r3, #100	@ 0x64
 8002324:	9302      	str	r3, [sp, #8]
 8002326:	2301      	movs	r3, #1
 8002328:	9301      	str	r3, [sp, #4]
 800232a:	f107 030e 	add.w	r3, r7, #14
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	2301      	movs	r3, #1
 8002332:	221b      	movs	r2, #27
 8002334:	21d0      	movs	r1, #208	@ 0xd0
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f001 f97a 	bl	8003630 <HAL_I2C_Mem_Write>
        return 0;
 800233c:	2300      	movs	r3, #0
 800233e:	e000      	b.n	8002342 <MPU6050_Init+0xa6>
    }
    return 1;
 8002340:	2301      	movs	r3, #1
}
 8002342:	4618      	mov	r0, r3
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	0000      	movs	r0, r0
 800234c:	0000      	movs	r0, r0
	...

08002350 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8002350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002354:	b094      	sub	sp, #80	@ 0x50
 8002356:	af04      	add	r7, sp, #16
 8002358:	6078      	str	r0, [r7, #4]
 800235a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 800235c:	2364      	movs	r3, #100	@ 0x64
 800235e:	9302      	str	r3, [sp, #8]
 8002360:	230e      	movs	r3, #14
 8002362:	9301      	str	r3, [sp, #4]
 8002364:	f107 0308 	add.w	r3, r7, #8
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	2301      	movs	r3, #1
 800236c:	223b      	movs	r2, #59	@ 0x3b
 800236e:	21d0      	movs	r1, #208	@ 0xd0
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f001 fa57 	bl	8003824 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8002376:	7a3b      	ldrb	r3, [r7, #8]
 8002378:	021b      	lsls	r3, r3, #8
 800237a:	b21a      	sxth	r2, r3
 800237c:	7a7b      	ldrb	r3, [r7, #9]
 800237e:	b21b      	sxth	r3, r3
 8002380:	4313      	orrs	r3, r2
 8002382:	b21a      	sxth	r2, r3
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8002388:	7abb      	ldrb	r3, [r7, #10]
 800238a:	021b      	lsls	r3, r3, #8
 800238c:	b21a      	sxth	r2, r3
 800238e:	7afb      	ldrb	r3, [r7, #11]
 8002390:	b21b      	sxth	r3, r3
 8002392:	4313      	orrs	r3, r2
 8002394:	b21a      	sxth	r2, r3
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800239a:	7b3b      	ldrb	r3, [r7, #12]
 800239c:	021b      	lsls	r3, r3, #8
 800239e:	b21a      	sxth	r2, r3
 80023a0:	7b7b      	ldrb	r3, [r7, #13]
 80023a2:	b21b      	sxth	r3, r3
 80023a4:	4313      	orrs	r3, r2
 80023a6:	b21a      	sxth	r2, r3
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 80023ac:	7bbb      	ldrb	r3, [r7, #14]
 80023ae:	021b      	lsls	r3, r3, #8
 80023b0:	b21a      	sxth	r2, r3
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
 80023b4:	b21b      	sxth	r3, r3
 80023b6:	4313      	orrs	r3, r2
 80023b8:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 80023ba:	7c3b      	ldrb	r3, [r7, #16]
 80023bc:	021b      	lsls	r3, r3, #8
 80023be:	b21a      	sxth	r2, r3
 80023c0:	7c7b      	ldrb	r3, [r7, #17]
 80023c2:	b21b      	sxth	r3, r3
 80023c4:	4313      	orrs	r3, r2
 80023c6:	b21a      	sxth	r2, r3
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 80023cc:	7cbb      	ldrb	r3, [r7, #18]
 80023ce:	021b      	lsls	r3, r3, #8
 80023d0:	b21a      	sxth	r2, r3
 80023d2:	7cfb      	ldrb	r3, [r7, #19]
 80023d4:	b21b      	sxth	r3, r3
 80023d6:	4313      	orrs	r3, r2
 80023d8:	b21a      	sxth	r2, r3
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 80023de:	7d3b      	ldrb	r3, [r7, #20]
 80023e0:	021b      	lsls	r3, r3, #8
 80023e2:	b21a      	sxth	r2, r3
 80023e4:	7d7b      	ldrb	r3, [r7, #21]
 80023e6:	b21b      	sxth	r3, r3
 80023e8:	4313      	orrs	r3, r2
 80023ea:	b21a      	sxth	r2, r3
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fd fffc 	bl	80003f4 <__aeabi_i2d>
 80023fc:	f04f 0200 	mov.w	r2, #0
 8002400:	4b95      	ldr	r3, [pc, #596]	@ (8002658 <MPU6050_Read_All+0x308>)
 8002402:	f7fe f98b 	bl	800071c <__aeabi_ddiv>
 8002406:	4602      	mov	r2, r0
 8002408:	460b      	mov	r3, r1
 800240a:	6839      	ldr	r1, [r7, #0]
 800240c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002416:	4618      	mov	r0, r3
 8002418:	f7fd ffec 	bl	80003f4 <__aeabi_i2d>
 800241c:	f04f 0200 	mov.w	r2, #0
 8002420:	4b8d      	ldr	r3, [pc, #564]	@ (8002658 <MPU6050_Read_All+0x308>)
 8002422:	f7fe f97b 	bl	800071c <__aeabi_ddiv>
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	6839      	ldr	r1, [r7, #0]
 800242c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002436:	4618      	mov	r0, r3
 8002438:	f7fd ffdc 	bl	80003f4 <__aeabi_i2d>
 800243c:	a380      	add	r3, pc, #512	@ (adr r3, 8002640 <MPU6050_Read_All+0x2f0>)
 800243e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002442:	f7fe f96b 	bl	800071c <__aeabi_ddiv>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	6839      	ldr	r1, [r7, #0]
 800244c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8002450:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8002454:	4618      	mov	r0, r3
 8002456:	f7fe fc11 	bl	8000c7c <__aeabi_i2f>
 800245a:	4603      	mov	r3, r0
 800245c:	497f      	ldr	r1, [pc, #508]	@ (800265c <MPU6050_Read_All+0x30c>)
 800245e:	4618      	mov	r0, r3
 8002460:	f7fe fd14 	bl	8000e8c <__aeabi_fdiv>
 8002464:	4603      	mov	r3, r0
 8002466:	497e      	ldr	r1, [pc, #504]	@ (8002660 <MPU6050_Read_All+0x310>)
 8002468:	4618      	mov	r0, r3
 800246a:	f7fe fb53 	bl	8000b14 <__addsf3>
 800246e:	4603      	mov	r3, r0
 8002470:	461a      	mov	r2, r3
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	641a      	str	r2, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800247c:	4618      	mov	r0, r3
 800247e:	f7fd ffb9 	bl	80003f4 <__aeabi_i2d>
 8002482:	a371      	add	r3, pc, #452	@ (adr r3, 8002648 <MPU6050_Read_All+0x2f8>)
 8002484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002488:	f7fe f948 	bl	800071c <__aeabi_ddiv>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	6839      	ldr	r1, [r7, #0]
 8002492:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 800249c:	4618      	mov	r0, r3
 800249e:	f7fd ffa9 	bl	80003f4 <__aeabi_i2d>
 80024a2:	a369      	add	r3, pc, #420	@ (adr r3, 8002648 <MPU6050_Read_All+0x2f8>)
 80024a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a8:	f7fe f938 	bl	800071c <__aeabi_ddiv>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	6839      	ldr	r1, [r7, #0]
 80024b2:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fd ff99 	bl	80003f4 <__aeabi_i2d>
 80024c2:	a361      	add	r3, pc, #388	@ (adr r3, 8002648 <MPU6050_Read_All+0x2f8>)
 80024c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c8:	f7fe f928 	bl	800071c <__aeabi_ddiv>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	6839      	ldr	r1, [r7, #0]
 80024d2:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 80024d6:	f000 fcb3 	bl	8002e40 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	4b61      	ldr	r3, [pc, #388]	@ (8002664 <MPU6050_Read_All+0x314>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7fd ff76 	bl	80003d4 <__aeabi_ui2d>
 80024e8:	f04f 0200 	mov.w	r2, #0
 80024ec:	4b5e      	ldr	r3, [pc, #376]	@ (8002668 <MPU6050_Read_All+0x318>)
 80024ee:	f7fe f915 	bl	800071c <__aeabi_ddiv>
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 80024fa:	f000 fca1 	bl	8002e40 <HAL_GetTick>
 80024fe:	4603      	mov	r3, r0
 8002500:	4a58      	ldr	r2, [pc, #352]	@ (8002664 <MPU6050_Read_All+0x314>)
 8002502:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	f9b3 3000 	ldrsh.w	r3, [r3]
 800250a:	461a      	mov	r2, r3
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002512:	fb03 f202 	mul.w	r2, r3, r2
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800251c:	4619      	mov	r1, r3
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002524:	fb01 f303 	mul.w	r3, r1, r3
 8002528:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 800252a:	4618      	mov	r0, r3
 800252c:	f7fd ff62 	bl	80003f4 <__aeabi_i2d>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	4610      	mov	r0, r2
 8002536:	4619      	mov	r1, r3
 8002538:	f003 fc10 	bl	8005d5c <sqrt>
 800253c:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0)
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	f04f 0300 	mov.w	r3, #0
 8002548:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800254c:	f7fe fa24 	bl	8000998 <__aeabi_dcmpeq>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d119      	bne.n	800258a <MPU6050_Read_All+0x23a>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800255c:	4618      	mov	r0, r3
 800255e:	f7fd ff49 	bl	80003f4 <__aeabi_i2d>
 8002562:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002566:	f7fe f8d9 	bl	800071c <__aeabi_ddiv>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	4610      	mov	r0, r2
 8002570:	4619      	mov	r1, r3
 8002572:	f003 fc19 	bl	8005da8 <atan>
 8002576:	a336      	add	r3, pc, #216	@ (adr r3, 8002650 <MPU6050_Read_All+0x300>)
 8002578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257c:	f7fd ffa4 	bl	80004c8 <__aeabi_dmul>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8002588:	e005      	b.n	8002596 <MPU6050_Read_All+0x246>
    }
    else
    {
        roll = 0.0;
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	f04f 0300 	mov.w	r3, #0
 8002592:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	f9b3 3000 	ldrsh.w	r3, [r3]
 800259c:	425b      	negs	r3, r3
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fd ff28 	bl	80003f4 <__aeabi_i2d>
 80025a4:	4682      	mov	sl, r0
 80025a6:	468b      	mov	fp, r1
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fd ff20 	bl	80003f4 <__aeabi_i2d>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4650      	mov	r0, sl
 80025ba:	4659      	mov	r1, fp
 80025bc:	f003 fbcc 	bl	8005d58 <atan2>
 80025c0:	a323      	add	r3, pc, #140	@ (adr r3, 8002650 <MPU6050_Read_All+0x300>)
 80025c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c6:	f7fd ff7f 	bl	80004c8 <__aeabi_dmul>
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 80025d2:	f04f 0200 	mov.w	r2, #0
 80025d6:	4b25      	ldr	r3, [pc, #148]	@ (800266c <MPU6050_Read_All+0x31c>)
 80025d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025dc:	f7fe f9e6 	bl	80009ac <__aeabi_dcmplt>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00a      	beq.n	80025fc <MPU6050_Read_All+0x2ac>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80025ec:	f04f 0200 	mov.w	r2, #0
 80025f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002670 <MPU6050_Read_All+0x320>)
 80025f2:	f7fe f9f9 	bl	80009e8 <__aeabi_dcmpgt>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d114      	bne.n	8002626 <MPU6050_Read_All+0x2d6>
 80025fc:	f04f 0200 	mov.w	r2, #0
 8002600:	4b1b      	ldr	r3, [pc, #108]	@ (8002670 <MPU6050_Read_All+0x320>)
 8002602:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002606:	f7fe f9ef 	bl	80009e8 <__aeabi_dcmpgt>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d033      	beq.n	8002678 <MPU6050_Read_All+0x328>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8002616:	f04f 0200 	mov.w	r2, #0
 800261a:	4b14      	ldr	r3, [pc, #80]	@ (800266c <MPU6050_Read_All+0x31c>)
 800261c:	f7fe f9c6 	bl	80009ac <__aeabi_dcmplt>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d028      	beq.n	8002678 <MPU6050_Read_All+0x328>
    {
        KalmanY.angle = pitch;
 8002626:	4913      	ldr	r1, [pc, #76]	@ (8002674 <MPU6050_Read_All+0x324>)
 8002628:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800262c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8002630:	6839      	ldr	r1, [r7, #0]
 8002632:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002636:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 800263a:	e030      	b.n	800269e <MPU6050_Read_All+0x34e>
 800263c:	f3af 8000 	nop.w
 8002640:	00000000 	.word	0x00000000
 8002644:	40cc2900 	.word	0x40cc2900
 8002648:	00000000 	.word	0x00000000
 800264c:	40606000 	.word	0x40606000
 8002650:	1a63c1f8 	.word	0x1a63c1f8
 8002654:	404ca5dc 	.word	0x404ca5dc
 8002658:	40d00000 	.word	0x40d00000
 800265c:	43aa0000 	.word	0x43aa0000
 8002660:	42121eb8 	.word	0x42121eb8
 8002664:	20000314 	.word	0x20000314
 8002668:	408f4000 	.word	0x408f4000
 800266c:	c0568000 	.word	0xc0568000
 8002670:	40568000 	.word	0x40568000
 8002674:	20000048 	.word	0x20000048
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800267e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002682:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002686:	e9cd 2300 	strd	r2, r3, [sp]
 800268a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800268e:	481c      	ldr	r0, [pc, #112]	@ (8002700 <MPU6050_Read_All+0x3b0>)
 8002690:	f000 f83c 	bl	800270c <Kalman_getAngle>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	6839      	ldr	r1, [r7, #0]
 800269a:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80026a4:	4690      	mov	r8, r2
 80026a6:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	4b15      	ldr	r3, [pc, #84]	@ (8002704 <MPU6050_Read_All+0x3b4>)
 80026b0:	4640      	mov	r0, r8
 80026b2:	4649      	mov	r1, r9
 80026b4:	f7fe f998 	bl	80009e8 <__aeabi_dcmpgt>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d008      	beq.n	80026d0 <MPU6050_Read_All+0x380>
        DataStruct->Gx = -DataStruct->Gx;
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80026c4:	4614      	mov	r4, r2
 80026c6:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80026d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80026da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80026de:	e9cd 2300 	strd	r2, r3, [sp]
 80026e2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80026e6:	4808      	ldr	r0, [pc, #32]	@ (8002708 <MPU6050_Read_All+0x3b8>)
 80026e8:	f000 f810 	bl	800270c <Kalman_getAngle>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	6839      	ldr	r1, [r7, #0]
 80026f2:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
}
 80026f6:	bf00      	nop
 80026f8:	3740      	adds	r7, #64	@ 0x40
 80026fa:	46bd      	mov	sp, r7
 80026fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002700:	20000048 	.word	0x20000048
 8002704:	40568000 	.word	0x40568000
 8002708:	20000000 	.word	0x20000000

0800270c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 800270c:	b5b0      	push	{r4, r5, r7, lr}
 800270e:	b092      	sub	sp, #72	@ 0x48
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800271e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8002722:	f7fd fd19 	bl	8000158 <__aeabi_dsub>
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += dt * rate;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002734:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002738:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800273c:	f7fd fec4 	bl	80004c8 <__aeabi_dmul>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	4620      	mov	r0, r4
 8002746:	4629      	mov	r1, r5
 8002748:	f7fd fd08 	bl	800015c <__adddf3>
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	68f9      	ldr	r1, [r7, #12]
 8002752:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8002762:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002766:	f7fd feaf 	bl	80004c8 <__aeabi_dmul>
 800276a:	4602      	mov	r2, r0
 800276c:	460b      	mov	r3, r1
 800276e:	4610      	mov	r0, r2
 8002770:	4619      	mov	r1, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002778:	f7fd fcee 	bl	8000158 <__aeabi_dsub>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	4610      	mov	r0, r2
 8002782:	4619      	mov	r1, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800278a:	f7fd fce5 	bl	8000158 <__aeabi_dsub>
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	4610      	mov	r0, r2
 8002794:	4619      	mov	r1, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279c:	f7fd fcde 	bl	800015c <__adddf3>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4610      	mov	r0, r2
 80027a6:	4619      	mov	r1, r3
 80027a8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80027ac:	f7fd fe8c 	bl	80004c8 <__aeabi_dmul>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	4620      	mov	r0, r4
 80027b6:	4629      	mov	r1, r5
 80027b8:	f7fd fcd0 	bl	800015c <__adddf3>
 80027bc:	4602      	mov	r2, r0
 80027be:	460b      	mov	r3, r1
 80027c0:	68f9      	ldr	r1, [r7, #12]
 80027c2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80027d2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80027d6:	f7fd fe77 	bl	80004c8 <__aeabi_dmul>
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	4620      	mov	r0, r4
 80027e0:	4629      	mov	r1, r5
 80027e2:	f7fd fcb9 	bl	8000158 <__aeabi_dsub>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	68f9      	ldr	r1, [r7, #12]
 80027ec:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80027fc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002800:	f7fd fe62 	bl	80004c8 <__aeabi_dmul>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4620      	mov	r0, r4
 800280a:	4629      	mov	r1, r5
 800280c:	f7fd fca4 	bl	8000158 <__aeabi_dsub>
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	68f9      	ldr	r1, [r7, #12]
 8002816:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002826:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800282a:	f7fd fe4d 	bl	80004c8 <__aeabi_dmul>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	4620      	mov	r0, r4
 8002834:	4629      	mov	r1, r5
 8002836:	f7fd fc91 	bl	800015c <__adddf3>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	68f9      	ldr	r1, [r7, #12]
 8002840:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002850:	f7fd fc84 	bl	800015c <__adddf3>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8002862:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002866:	f7fd ff59 	bl	800071c <__aeabi_ddiv>
 800286a:	4602      	mov	r2, r0
 800286c:	460b      	mov	r3, r1
 800286e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8002878:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800287c:	f7fd ff4e 	bl	800071c <__aeabi_ddiv>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800288e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002892:	f7fd fc61 	bl	8000158 <__aeabi_dsub>
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    Kalman->angle += K[0] * y;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80028a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80028a8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80028ac:	f7fd fe0c 	bl	80004c8 <__aeabi_dmul>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	4620      	mov	r0, r4
 80028b6:	4629      	mov	r1, r5
 80028b8:	f7fd fc50 	bl	800015c <__adddf3>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	68f9      	ldr	r1, [r7, #12]
 80028c2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80028cc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80028d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80028d4:	f7fd fdf8 	bl	80004c8 <__aeabi_dmul>
 80028d8:	4602      	mov	r2, r0
 80028da:	460b      	mov	r3, r1
 80028dc:	4620      	mov	r0, r4
 80028de:	4629      	mov	r1, r5
 80028e0:	f7fd fc3c 	bl	800015c <__adddf3>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	68f9      	ldr	r1, [r7, #12]
 80028ea:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80028f4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    double P01_temp = Kalman->P[0][1];
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80028fe:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8002908:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800290c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002910:	f7fd fdda 	bl	80004c8 <__aeabi_dmul>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4620      	mov	r0, r4
 800291a:	4629      	mov	r1, r5
 800291c:	f7fd fc1c 	bl	8000158 <__aeabi_dsub>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	68f9      	ldr	r1, [r7, #12]
 8002926:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8002930:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002934:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002938:	f7fd fdc6 	bl	80004c8 <__aeabi_dmul>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4620      	mov	r0, r4
 8002942:	4629      	mov	r1, r5
 8002944:	f7fd fc08 	bl	8000158 <__aeabi_dsub>
 8002948:	4602      	mov	r2, r0
 800294a:	460b      	mov	r3, r1
 800294c:	68f9      	ldr	r1, [r7, #12]
 800294e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8002958:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800295c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002960:	f7fd fdb2 	bl	80004c8 <__aeabi_dmul>
 8002964:	4602      	mov	r2, r0
 8002966:	460b      	mov	r3, r1
 8002968:	4620      	mov	r0, r4
 800296a:	4629      	mov	r1, r5
 800296c:	f7fd fbf4 	bl	8000158 <__aeabi_dsub>
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	68f9      	ldr	r1, [r7, #12]
 8002976:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8002980:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002984:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002988:	f7fd fd9e 	bl	80004c8 <__aeabi_dmul>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4620      	mov	r0, r4
 8002992:	4629      	mov	r1, r5
 8002994:	f7fd fbe0 	bl	8000158 <__aeabi_dsub>
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	68f9      	ldr	r1, [r7, #12]
 800299e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 80029a8:	4610      	mov	r0, r2
 80029aa:	4619      	mov	r1, r3
 80029ac:	3748      	adds	r7, #72	@ 0x48
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080029b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80029ba:	4b15      	ldr	r3, [pc, #84]	@ (8002a10 <HAL_MspInit+0x5c>)
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	4a14      	ldr	r2, [pc, #80]	@ (8002a10 <HAL_MspInit+0x5c>)
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	6193      	str	r3, [r2, #24]
 80029c6:	4b12      	ldr	r3, [pc, #72]	@ (8002a10 <HAL_MspInit+0x5c>)
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	60bb      	str	r3, [r7, #8]
 80029d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002a10 <HAL_MspInit+0x5c>)
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	4a0e      	ldr	r2, [pc, #56]	@ (8002a10 <HAL_MspInit+0x5c>)
 80029d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029dc:	61d3      	str	r3, [r2, #28]
 80029de:	4b0c      	ldr	r3, [pc, #48]	@ (8002a10 <HAL_MspInit+0x5c>)
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029e6:	607b      	str	r3, [r7, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80029ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002a14 <HAL_MspInit+0x60>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	4a04      	ldr	r2, [pc, #16]	@ (8002a14 <HAL_MspInit+0x60>)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a06:	bf00      	nop
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr
 8002a10:	40021000 	.word	0x40021000
 8002a14:	40010000 	.word	0x40010000

08002a18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08a      	sub	sp, #40	@ 0x28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a20:	f107 0314 	add.w	r3, r7, #20
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	605a      	str	r2, [r3, #4]
 8002a2a:	609a      	str	r2, [r3, #8]
 8002a2c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a1d      	ldr	r2, [pc, #116]	@ (8002aa8 <HAL_I2C_MspInit+0x90>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d132      	bne.n	8002a9e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a38:	4b1c      	ldr	r3, [pc, #112]	@ (8002aac <HAL_I2C_MspInit+0x94>)
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	4a1b      	ldr	r2, [pc, #108]	@ (8002aac <HAL_I2C_MspInit+0x94>)
 8002a3e:	f043 0308 	orr.w	r3, r3, #8
 8002a42:	6193      	str	r3, [r2, #24]
 8002a44:	4b19      	ldr	r3, [pc, #100]	@ (8002aac <HAL_I2C_MspInit+0x94>)
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	f003 0308 	and.w	r3, r3, #8
 8002a4c:	613b      	str	r3, [r7, #16]
 8002a4e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a50:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a56:	2312      	movs	r3, #18
 8002a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a5e:	f107 0314 	add.w	r3, r7, #20
 8002a62:	4619      	mov	r1, r3
 8002a64:	4812      	ldr	r0, [pc, #72]	@ (8002ab0 <HAL_I2C_MspInit+0x98>)
 8002a66:	f000 fb03 	bl	8003070 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002a6a:	4b12      	ldr	r3, [pc, #72]	@ (8002ab4 <HAL_I2C_MspInit+0x9c>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a72:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002a76:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7a:	f043 0302 	orr.w	r3, r3, #2
 8002a7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a80:	4a0c      	ldr	r2, [pc, #48]	@ (8002ab4 <HAL_I2C_MspInit+0x9c>)
 8002a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a84:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a86:	4b09      	ldr	r3, [pc, #36]	@ (8002aac <HAL_I2C_MspInit+0x94>)
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	4a08      	ldr	r2, [pc, #32]	@ (8002aac <HAL_I2C_MspInit+0x94>)
 8002a8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a90:	61d3      	str	r3, [r2, #28]
 8002a92:	4b06      	ldr	r3, [pc, #24]	@ (8002aac <HAL_I2C_MspInit+0x94>)
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a9e:	bf00      	nop
 8002aa0:	3728      	adds	r7, #40	@ 0x28
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40005400 	.word	0x40005400
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	40010c00 	.word	0x40010c00
 8002ab4:	40010000 	.word	0x40010000

08002ab8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a0d      	ldr	r2, [pc, #52]	@ (8002afc <HAL_TIM_Base_MspInit+0x44>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d113      	bne.n	8002af2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002aca:	4b0d      	ldr	r3, [pc, #52]	@ (8002b00 <HAL_TIM_Base_MspInit+0x48>)
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	4a0c      	ldr	r2, [pc, #48]	@ (8002b00 <HAL_TIM_Base_MspInit+0x48>)
 8002ad0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002ad4:	6193      	str	r3, [r2, #24]
 8002ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8002b00 <HAL_TIM_Base_MspInit+0x48>)
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	2019      	movs	r0, #25
 8002ae8:	f000 fa8b 	bl	8003002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002aec:	2019      	movs	r0, #25
 8002aee:	f000 faa4 	bl	800303a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002af2:	bf00      	nop
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40012c00 	.word	0x40012c00
 8002b00:	40021000 	.word	0x40021000

08002b04 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a12      	ldr	r2, [pc, #72]	@ (8002b5c <HAL_TIM_PWM_MspInit+0x58>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d10c      	bne.n	8002b30 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b16:	4b12      	ldr	r3, [pc, #72]	@ (8002b60 <HAL_TIM_PWM_MspInit+0x5c>)
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	4a11      	ldr	r2, [pc, #68]	@ (8002b60 <HAL_TIM_PWM_MspInit+0x5c>)
 8002b1c:	f043 0302 	orr.w	r3, r3, #2
 8002b20:	61d3      	str	r3, [r2, #28]
 8002b22:	4b0f      	ldr	r3, [pc, #60]	@ (8002b60 <HAL_TIM_PWM_MspInit+0x5c>)
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002b2e:	e010      	b.n	8002b52 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a0b      	ldr	r2, [pc, #44]	@ (8002b64 <HAL_TIM_PWM_MspInit+0x60>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d10b      	bne.n	8002b52 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b3a:	4b09      	ldr	r3, [pc, #36]	@ (8002b60 <HAL_TIM_PWM_MspInit+0x5c>)
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	4a08      	ldr	r2, [pc, #32]	@ (8002b60 <HAL_TIM_PWM_MspInit+0x5c>)
 8002b40:	f043 0304 	orr.w	r3, r3, #4
 8002b44:	61d3      	str	r3, [r2, #28]
 8002b46:	4b06      	ldr	r3, [pc, #24]	@ (8002b60 <HAL_TIM_PWM_MspInit+0x5c>)
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	f003 0304 	and.w	r3, r3, #4
 8002b4e:	60bb      	str	r3, [r7, #8]
 8002b50:	68bb      	ldr	r3, [r7, #8]
}
 8002b52:	bf00      	nop
 8002b54:	3714      	adds	r7, #20
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr
 8002b5c:	40000400 	.word	0x40000400
 8002b60:	40021000 	.word	0x40021000
 8002b64:	40000800 	.word	0x40000800

08002b68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08a      	sub	sp, #40	@ 0x28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b70:	f107 0314 	add.w	r3, r7, #20
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a27      	ldr	r2, [pc, #156]	@ (8002c20 <HAL_TIM_MspPostInit+0xb8>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d12a      	bne.n	8002bde <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b88:	4b26      	ldr	r3, [pc, #152]	@ (8002c24 <HAL_TIM_MspPostInit+0xbc>)
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	4a25      	ldr	r2, [pc, #148]	@ (8002c24 <HAL_TIM_MspPostInit+0xbc>)
 8002b8e:	f043 0308 	orr.w	r3, r3, #8
 8002b92:	6193      	str	r3, [r2, #24]
 8002b94:	4b23      	ldr	r3, [pc, #140]	@ (8002c24 <HAL_TIM_MspPostInit+0xbc>)
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002ba0:	2310      	movs	r3, #16
 8002ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba8:	2302      	movs	r3, #2
 8002baa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bac:	f107 0314 	add.w	r3, r7, #20
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	481d      	ldr	r0, [pc, #116]	@ (8002c28 <HAL_TIM_MspPostInit+0xc0>)
 8002bb4:	f000 fa5c 	bl	8003070 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002bb8:	4b1c      	ldr	r3, [pc, #112]	@ (8002c2c <HAL_TIM_MspPostInit+0xc4>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002bc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002bcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002bd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bd6:	4a15      	ldr	r2, [pc, #84]	@ (8002c2c <HAL_TIM_MspPostInit+0xc4>)
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bda:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002bdc:	e01c      	b.n	8002c18 <HAL_TIM_MspPostInit+0xb0>
  else if(htim->Instance==TIM4)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a13      	ldr	r2, [pc, #76]	@ (8002c30 <HAL_TIM_MspPostInit+0xc8>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d117      	bne.n	8002c18 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002be8:	4b0e      	ldr	r3, [pc, #56]	@ (8002c24 <HAL_TIM_MspPostInit+0xbc>)
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	4a0d      	ldr	r2, [pc, #52]	@ (8002c24 <HAL_TIM_MspPostInit+0xbc>)
 8002bee:	f043 0308 	orr.w	r3, r3, #8
 8002bf2:	6193      	str	r3, [r2, #24]
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8002c24 <HAL_TIM_MspPostInit+0xbc>)
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	f003 0308 	and.w	r3, r3, #8
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c00:	23c0      	movs	r3, #192	@ 0xc0
 8002c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c04:	2302      	movs	r3, #2
 8002c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c08:	2302      	movs	r3, #2
 8002c0a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c0c:	f107 0314 	add.w	r3, r7, #20
 8002c10:	4619      	mov	r1, r3
 8002c12:	4805      	ldr	r0, [pc, #20]	@ (8002c28 <HAL_TIM_MspPostInit+0xc0>)
 8002c14:	f000 fa2c 	bl	8003070 <HAL_GPIO_Init>
}
 8002c18:	bf00      	nop
 8002c1a:	3728      	adds	r7, #40	@ 0x28
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40000400 	.word	0x40000400
 8002c24:	40021000 	.word	0x40021000
 8002c28:	40010c00 	.word	0x40010c00
 8002c2c:	40010000 	.word	0x40010000
 8002c30:	40000800 	.word	0x40000800

08002c34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b088      	sub	sp, #32
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c3c:	f107 0310 	add.w	r3, r7, #16
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a1c      	ldr	r2, [pc, #112]	@ (8002cc0 <HAL_UART_MspInit+0x8c>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d131      	bne.n	8002cb8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c54:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc4 <HAL_UART_MspInit+0x90>)
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	4a1a      	ldr	r2, [pc, #104]	@ (8002cc4 <HAL_UART_MspInit+0x90>)
 8002c5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c5e:	6193      	str	r3, [r2, #24]
 8002c60:	4b18      	ldr	r3, [pc, #96]	@ (8002cc4 <HAL_UART_MspInit+0x90>)
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c6c:	4b15      	ldr	r3, [pc, #84]	@ (8002cc4 <HAL_UART_MspInit+0x90>)
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	4a14      	ldr	r2, [pc, #80]	@ (8002cc4 <HAL_UART_MspInit+0x90>)
 8002c72:	f043 0304 	orr.w	r3, r3, #4
 8002c76:	6193      	str	r3, [r2, #24]
 8002c78:	4b12      	ldr	r3, [pc, #72]	@ (8002cc4 <HAL_UART_MspInit+0x90>)
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	60bb      	str	r3, [r7, #8]
 8002c82:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c92:	f107 0310 	add.w	r3, r7, #16
 8002c96:	4619      	mov	r1, r3
 8002c98:	480b      	ldr	r0, [pc, #44]	@ (8002cc8 <HAL_UART_MspInit+0x94>)
 8002c9a:	f000 f9e9 	bl	8003070 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ca2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cac:	f107 0310 	add.w	r3, r7, #16
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4805      	ldr	r0, [pc, #20]	@ (8002cc8 <HAL_UART_MspInit+0x94>)
 8002cb4:	f000 f9dc 	bl	8003070 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002cb8:	bf00      	nop
 8002cba:	3720      	adds	r7, #32
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40013800 	.word	0x40013800
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40010800 	.word	0x40010800

08002ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002cd0:	bf00      	nop
 8002cd2:	e7fd      	b.n	8002cd0 <NMI_Handler+0x4>

08002cd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cd8:	bf00      	nop
 8002cda:	e7fd      	b.n	8002cd8 <HardFault_Handler+0x4>

08002cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ce0:	bf00      	nop
 8002ce2:	e7fd      	b.n	8002ce0 <MemManage_Handler+0x4>

08002ce4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ce8:	bf00      	nop
 8002cea:	e7fd      	b.n	8002ce8 <BusFault_Handler+0x4>

08002cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cf0:	bf00      	nop
 8002cf2:	e7fd      	b.n	8002cf0 <UsageFault_Handler+0x4>

08002cf4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cf8:	bf00      	nop
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr

08002d00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d04:	bf00      	nop
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr

08002d0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d10:	bf00      	nop
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr

08002d18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d1c:	f000 f87e 	bl	8002e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d20:	bf00      	nop
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d28:	4802      	ldr	r0, [pc, #8]	@ (8002d34 <TIM1_UP_IRQHandler+0x10>)
 8002d2a:	f002 f93b 	bl	8004fa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002d2e:	bf00      	nop
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20000188 	.word	0x20000188

08002d38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d3c:	bf00      	nop
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr

08002d44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d44:	f7ff fff8 	bl	8002d38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d48:	480b      	ldr	r0, [pc, #44]	@ (8002d78 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002d4a:	490c      	ldr	r1, [pc, #48]	@ (8002d7c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002d4c:	4a0c      	ldr	r2, [pc, #48]	@ (8002d80 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d50:	e002      	b.n	8002d58 <LoopCopyDataInit>

08002d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d56:	3304      	adds	r3, #4

08002d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d5c:	d3f9      	bcc.n	8002d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d5e:	4a09      	ldr	r2, [pc, #36]	@ (8002d84 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002d60:	4c09      	ldr	r4, [pc, #36]	@ (8002d88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d64:	e001      	b.n	8002d6a <LoopFillZerobss>

08002d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d68:	3204      	adds	r2, #4

08002d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d6c:	d3fb      	bcc.n	8002d66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d6e:	f002 ffcf 	bl	8005d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d72:	f7fe fe4f 	bl	8001a14 <main>
  bx lr
 8002d76:	4770      	bx	lr
  ldr r0, =_sdata
 8002d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d7c:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8002d80:	080064e8 	.word	0x080064e8
  ldr r2, =_sbss
 8002d84:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8002d88:	20000454 	.word	0x20000454

08002d8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d8c:	e7fe      	b.n	8002d8c <ADC1_2_IRQHandler>
	...

08002d90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d94:	4b08      	ldr	r3, [pc, #32]	@ (8002db8 <HAL_Init+0x28>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a07      	ldr	r2, [pc, #28]	@ (8002db8 <HAL_Init+0x28>)
 8002d9a:	f043 0310 	orr.w	r3, r3, #16
 8002d9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002da0:	2003      	movs	r0, #3
 8002da2:	f000 f923 	bl	8002fec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002da6:	200f      	movs	r0, #15
 8002da8:	f000 f808 	bl	8002dbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dac:	f7ff fe02 	bl	80029b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	40022000 	.word	0x40022000

08002dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dc4:	4b12      	ldr	r3, [pc, #72]	@ (8002e10 <HAL_InitTick+0x54>)
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	4b12      	ldr	r3, [pc, #72]	@ (8002e14 <HAL_InitTick+0x58>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	4619      	mov	r1, r3
 8002dce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 f93b 	bl	8003056 <HAL_SYSTICK_Config>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e00e      	b.n	8002e08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b0f      	cmp	r3, #15
 8002dee:	d80a      	bhi.n	8002e06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002df0:	2200      	movs	r2, #0
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	f04f 30ff 	mov.w	r0, #4294967295
 8002df8:	f000 f903 	bl	8003002 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dfc:	4a06      	ldr	r2, [pc, #24]	@ (8002e18 <HAL_InitTick+0x5c>)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
 8002e04:	e000      	b.n	8002e08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	20000090 	.word	0x20000090
 8002e14:	20000098 	.word	0x20000098
 8002e18:	20000094 	.word	0x20000094

08002e1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e20:	4b05      	ldr	r3, [pc, #20]	@ (8002e38 <HAL_IncTick+0x1c>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	461a      	mov	r2, r3
 8002e26:	4b05      	ldr	r3, [pc, #20]	@ (8002e3c <HAL_IncTick+0x20>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	4a03      	ldr	r2, [pc, #12]	@ (8002e3c <HAL_IncTick+0x20>)
 8002e2e:	6013      	str	r3, [r2, #0]
}
 8002e30:	bf00      	nop
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr
 8002e38:	20000098 	.word	0x20000098
 8002e3c:	20000318 	.word	0x20000318

08002e40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  return uwTick;
 8002e44:	4b02      	ldr	r3, [pc, #8]	@ (8002e50 <HAL_GetTick+0x10>)
 8002e46:	681b      	ldr	r3, [r3, #0]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr
 8002e50:	20000318 	.word	0x20000318

08002e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e64:	4b0c      	ldr	r3, [pc, #48]	@ (8002e98 <__NVIC_SetPriorityGrouping+0x44>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e70:	4013      	ands	r3, r2
 8002e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e86:	4a04      	ldr	r2, [pc, #16]	@ (8002e98 <__NVIC_SetPriorityGrouping+0x44>)
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	60d3      	str	r3, [r2, #12]
}
 8002e8c:	bf00      	nop
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bc80      	pop	{r7}
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	e000ed00 	.word	0xe000ed00

08002e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ea0:	4b04      	ldr	r3, [pc, #16]	@ (8002eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	0a1b      	lsrs	r3, r3, #8
 8002ea6:	f003 0307 	and.w	r3, r3, #7
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bc80      	pop	{r7}
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	e000ed00 	.word	0xe000ed00

08002eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	db0b      	blt.n	8002ee2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eca:	79fb      	ldrb	r3, [r7, #7]
 8002ecc:	f003 021f 	and.w	r2, r3, #31
 8002ed0:	4906      	ldr	r1, [pc, #24]	@ (8002eec <__NVIC_EnableIRQ+0x34>)
 8002ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed6:	095b      	lsrs	r3, r3, #5
 8002ed8:	2001      	movs	r0, #1
 8002eda:	fa00 f202 	lsl.w	r2, r0, r2
 8002ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr
 8002eec:	e000e100 	.word	0xe000e100

08002ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	6039      	str	r1, [r7, #0]
 8002efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	db0a      	blt.n	8002f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	490c      	ldr	r1, [pc, #48]	@ (8002f3c <__NVIC_SetPriority+0x4c>)
 8002f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0e:	0112      	lsls	r2, r2, #4
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	440b      	add	r3, r1
 8002f14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f18:	e00a      	b.n	8002f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	4908      	ldr	r1, [pc, #32]	@ (8002f40 <__NVIC_SetPriority+0x50>)
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	3b04      	subs	r3, #4
 8002f28:	0112      	lsls	r2, r2, #4
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	761a      	strb	r2, [r3, #24]
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bc80      	pop	{r7}
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	e000e100 	.word	0xe000e100
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b089      	sub	sp, #36	@ 0x24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f1c3 0307 	rsb	r3, r3, #7
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	bf28      	it	cs
 8002f62:	2304      	movcs	r3, #4
 8002f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	3304      	adds	r3, #4
 8002f6a:	2b06      	cmp	r3, #6
 8002f6c:	d902      	bls.n	8002f74 <NVIC_EncodePriority+0x30>
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	3b03      	subs	r3, #3
 8002f72:	e000      	b.n	8002f76 <NVIC_EncodePriority+0x32>
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f78:	f04f 32ff 	mov.w	r2, #4294967295
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43da      	mvns	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	401a      	ands	r2, r3
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	fa01 f303 	lsl.w	r3, r1, r3
 8002f96:	43d9      	mvns	r1, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f9c:	4313      	orrs	r3, r2
         );
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3724      	adds	r7, #36	@ 0x24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr

08002fa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fb8:	d301      	bcc.n	8002fbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e00f      	b.n	8002fde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe8 <SysTick_Config+0x40>)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fc6:	210f      	movs	r1, #15
 8002fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fcc:	f7ff ff90 	bl	8002ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fd0:	4b05      	ldr	r3, [pc, #20]	@ (8002fe8 <SysTick_Config+0x40>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fd6:	4b04      	ldr	r3, [pc, #16]	@ (8002fe8 <SysTick_Config+0x40>)
 8002fd8:	2207      	movs	r2, #7
 8002fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	e000e010 	.word	0xe000e010

08002fec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7ff ff2d 	bl	8002e54 <__NVIC_SetPriorityGrouping>
}
 8002ffa:	bf00      	nop
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003002:	b580      	push	{r7, lr}
 8003004:	b086      	sub	sp, #24
 8003006:	af00      	add	r7, sp, #0
 8003008:	4603      	mov	r3, r0
 800300a:	60b9      	str	r1, [r7, #8]
 800300c:	607a      	str	r2, [r7, #4]
 800300e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003014:	f7ff ff42 	bl	8002e9c <__NVIC_GetPriorityGrouping>
 8003018:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	68b9      	ldr	r1, [r7, #8]
 800301e:	6978      	ldr	r0, [r7, #20]
 8003020:	f7ff ff90 	bl	8002f44 <NVIC_EncodePriority>
 8003024:	4602      	mov	r2, r0
 8003026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800302a:	4611      	mov	r1, r2
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff ff5f 	bl	8002ef0 <__NVIC_SetPriority>
}
 8003032:	bf00      	nop
 8003034:	3718      	adds	r7, #24
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	4603      	mov	r3, r0
 8003042:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff ff35 	bl	8002eb8 <__NVIC_EnableIRQ>
}
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7ff ffa2 	bl	8002fa8 <SysTick_Config>
 8003064:	4603      	mov	r3, r0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
	...

08003070 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003070:	b480      	push	{r7}
 8003072:	b08b      	sub	sp, #44	@ 0x2c
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800307a:	2300      	movs	r3, #0
 800307c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800307e:	2300      	movs	r3, #0
 8003080:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003082:	e169      	b.n	8003358 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003084:	2201      	movs	r2, #1
 8003086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	69fa      	ldr	r2, [r7, #28]
 8003094:	4013      	ands	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	429a      	cmp	r2, r3
 800309e:	f040 8158 	bne.w	8003352 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	4a9a      	ldr	r2, [pc, #616]	@ (8003310 <HAL_GPIO_Init+0x2a0>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d05e      	beq.n	800316a <HAL_GPIO_Init+0xfa>
 80030ac:	4a98      	ldr	r2, [pc, #608]	@ (8003310 <HAL_GPIO_Init+0x2a0>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d875      	bhi.n	800319e <HAL_GPIO_Init+0x12e>
 80030b2:	4a98      	ldr	r2, [pc, #608]	@ (8003314 <HAL_GPIO_Init+0x2a4>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d058      	beq.n	800316a <HAL_GPIO_Init+0xfa>
 80030b8:	4a96      	ldr	r2, [pc, #600]	@ (8003314 <HAL_GPIO_Init+0x2a4>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d86f      	bhi.n	800319e <HAL_GPIO_Init+0x12e>
 80030be:	4a96      	ldr	r2, [pc, #600]	@ (8003318 <HAL_GPIO_Init+0x2a8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d052      	beq.n	800316a <HAL_GPIO_Init+0xfa>
 80030c4:	4a94      	ldr	r2, [pc, #592]	@ (8003318 <HAL_GPIO_Init+0x2a8>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d869      	bhi.n	800319e <HAL_GPIO_Init+0x12e>
 80030ca:	4a94      	ldr	r2, [pc, #592]	@ (800331c <HAL_GPIO_Init+0x2ac>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d04c      	beq.n	800316a <HAL_GPIO_Init+0xfa>
 80030d0:	4a92      	ldr	r2, [pc, #584]	@ (800331c <HAL_GPIO_Init+0x2ac>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d863      	bhi.n	800319e <HAL_GPIO_Init+0x12e>
 80030d6:	4a92      	ldr	r2, [pc, #584]	@ (8003320 <HAL_GPIO_Init+0x2b0>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d046      	beq.n	800316a <HAL_GPIO_Init+0xfa>
 80030dc:	4a90      	ldr	r2, [pc, #576]	@ (8003320 <HAL_GPIO_Init+0x2b0>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d85d      	bhi.n	800319e <HAL_GPIO_Init+0x12e>
 80030e2:	2b12      	cmp	r3, #18
 80030e4:	d82a      	bhi.n	800313c <HAL_GPIO_Init+0xcc>
 80030e6:	2b12      	cmp	r3, #18
 80030e8:	d859      	bhi.n	800319e <HAL_GPIO_Init+0x12e>
 80030ea:	a201      	add	r2, pc, #4	@ (adr r2, 80030f0 <HAL_GPIO_Init+0x80>)
 80030ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f0:	0800316b 	.word	0x0800316b
 80030f4:	08003145 	.word	0x08003145
 80030f8:	08003157 	.word	0x08003157
 80030fc:	08003199 	.word	0x08003199
 8003100:	0800319f 	.word	0x0800319f
 8003104:	0800319f 	.word	0x0800319f
 8003108:	0800319f 	.word	0x0800319f
 800310c:	0800319f 	.word	0x0800319f
 8003110:	0800319f 	.word	0x0800319f
 8003114:	0800319f 	.word	0x0800319f
 8003118:	0800319f 	.word	0x0800319f
 800311c:	0800319f 	.word	0x0800319f
 8003120:	0800319f 	.word	0x0800319f
 8003124:	0800319f 	.word	0x0800319f
 8003128:	0800319f 	.word	0x0800319f
 800312c:	0800319f 	.word	0x0800319f
 8003130:	0800319f 	.word	0x0800319f
 8003134:	0800314d 	.word	0x0800314d
 8003138:	08003161 	.word	0x08003161
 800313c:	4a79      	ldr	r2, [pc, #484]	@ (8003324 <HAL_GPIO_Init+0x2b4>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d013      	beq.n	800316a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003142:	e02c      	b.n	800319e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	623b      	str	r3, [r7, #32]
          break;
 800314a:	e029      	b.n	80031a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	3304      	adds	r3, #4
 8003152:	623b      	str	r3, [r7, #32]
          break;
 8003154:	e024      	b.n	80031a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	3308      	adds	r3, #8
 800315c:	623b      	str	r3, [r7, #32]
          break;
 800315e:	e01f      	b.n	80031a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	330c      	adds	r3, #12
 8003166:	623b      	str	r3, [r7, #32]
          break;
 8003168:	e01a      	b.n	80031a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d102      	bne.n	8003178 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003172:	2304      	movs	r3, #4
 8003174:	623b      	str	r3, [r7, #32]
          break;
 8003176:	e013      	b.n	80031a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d105      	bne.n	800318c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003180:	2308      	movs	r3, #8
 8003182:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	69fa      	ldr	r2, [r7, #28]
 8003188:	611a      	str	r2, [r3, #16]
          break;
 800318a:	e009      	b.n	80031a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800318c:	2308      	movs	r3, #8
 800318e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	69fa      	ldr	r2, [r7, #28]
 8003194:	615a      	str	r2, [r3, #20]
          break;
 8003196:	e003      	b.n	80031a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003198:	2300      	movs	r3, #0
 800319a:	623b      	str	r3, [r7, #32]
          break;
 800319c:	e000      	b.n	80031a0 <HAL_GPIO_Init+0x130>
          break;
 800319e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	2bff      	cmp	r3, #255	@ 0xff
 80031a4:	d801      	bhi.n	80031aa <HAL_GPIO_Init+0x13a>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	e001      	b.n	80031ae <HAL_GPIO_Init+0x13e>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	3304      	adds	r3, #4
 80031ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	2bff      	cmp	r3, #255	@ 0xff
 80031b4:	d802      	bhi.n	80031bc <HAL_GPIO_Init+0x14c>
 80031b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	e002      	b.n	80031c2 <HAL_GPIO_Init+0x152>
 80031bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031be:	3b08      	subs	r3, #8
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	210f      	movs	r1, #15
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	fa01 f303 	lsl.w	r3, r1, r3
 80031d0:	43db      	mvns	r3, r3
 80031d2:	401a      	ands	r2, r3
 80031d4:	6a39      	ldr	r1, [r7, #32]
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	fa01 f303 	lsl.w	r3, r1, r3
 80031dc:	431a      	orrs	r2, r3
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 80b1 	beq.w	8003352 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80031f0:	4b4d      	ldr	r3, [pc, #308]	@ (8003328 <HAL_GPIO_Init+0x2b8>)
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	4a4c      	ldr	r2, [pc, #304]	@ (8003328 <HAL_GPIO_Init+0x2b8>)
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	6193      	str	r3, [r2, #24]
 80031fc:	4b4a      	ldr	r3, [pc, #296]	@ (8003328 <HAL_GPIO_Init+0x2b8>)
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	60bb      	str	r3, [r7, #8]
 8003206:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003208:	4a48      	ldr	r2, [pc, #288]	@ (800332c <HAL_GPIO_Init+0x2bc>)
 800320a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320c:	089b      	lsrs	r3, r3, #2
 800320e:	3302      	adds	r3, #2
 8003210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003214:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003218:	f003 0303 	and.w	r3, r3, #3
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	220f      	movs	r2, #15
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	43db      	mvns	r3, r3
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	4013      	ands	r3, r2
 800322a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a40      	ldr	r2, [pc, #256]	@ (8003330 <HAL_GPIO_Init+0x2c0>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d013      	beq.n	800325c <HAL_GPIO_Init+0x1ec>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a3f      	ldr	r2, [pc, #252]	@ (8003334 <HAL_GPIO_Init+0x2c4>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d00d      	beq.n	8003258 <HAL_GPIO_Init+0x1e8>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a3e      	ldr	r2, [pc, #248]	@ (8003338 <HAL_GPIO_Init+0x2c8>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d007      	beq.n	8003254 <HAL_GPIO_Init+0x1e4>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a3d      	ldr	r2, [pc, #244]	@ (800333c <HAL_GPIO_Init+0x2cc>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d101      	bne.n	8003250 <HAL_GPIO_Init+0x1e0>
 800324c:	2303      	movs	r3, #3
 800324e:	e006      	b.n	800325e <HAL_GPIO_Init+0x1ee>
 8003250:	2304      	movs	r3, #4
 8003252:	e004      	b.n	800325e <HAL_GPIO_Init+0x1ee>
 8003254:	2302      	movs	r3, #2
 8003256:	e002      	b.n	800325e <HAL_GPIO_Init+0x1ee>
 8003258:	2301      	movs	r3, #1
 800325a:	e000      	b.n	800325e <HAL_GPIO_Init+0x1ee>
 800325c:	2300      	movs	r3, #0
 800325e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003260:	f002 0203 	and.w	r2, r2, #3
 8003264:	0092      	lsls	r2, r2, #2
 8003266:	4093      	lsls	r3, r2
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4313      	orrs	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800326e:	492f      	ldr	r1, [pc, #188]	@ (800332c <HAL_GPIO_Init+0x2bc>)
 8003270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003272:	089b      	lsrs	r3, r3, #2
 8003274:	3302      	adds	r3, #2
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d006      	beq.n	8003296 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003288:	4b2d      	ldr	r3, [pc, #180]	@ (8003340 <HAL_GPIO_Init+0x2d0>)
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	492c      	ldr	r1, [pc, #176]	@ (8003340 <HAL_GPIO_Init+0x2d0>)
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	4313      	orrs	r3, r2
 8003292:	608b      	str	r3, [r1, #8]
 8003294:	e006      	b.n	80032a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003296:	4b2a      	ldr	r3, [pc, #168]	@ (8003340 <HAL_GPIO_Init+0x2d0>)
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	43db      	mvns	r3, r3
 800329e:	4928      	ldr	r1, [pc, #160]	@ (8003340 <HAL_GPIO_Init+0x2d0>)
 80032a0:	4013      	ands	r3, r2
 80032a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d006      	beq.n	80032be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80032b0:	4b23      	ldr	r3, [pc, #140]	@ (8003340 <HAL_GPIO_Init+0x2d0>)
 80032b2:	68da      	ldr	r2, [r3, #12]
 80032b4:	4922      	ldr	r1, [pc, #136]	@ (8003340 <HAL_GPIO_Init+0x2d0>)
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	60cb      	str	r3, [r1, #12]
 80032bc:	e006      	b.n	80032cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032be:	4b20      	ldr	r3, [pc, #128]	@ (8003340 <HAL_GPIO_Init+0x2d0>)
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	43db      	mvns	r3, r3
 80032c6:	491e      	ldr	r1, [pc, #120]	@ (8003340 <HAL_GPIO_Init+0x2d0>)
 80032c8:	4013      	ands	r3, r2
 80032ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d006      	beq.n	80032e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80032d8:	4b19      	ldr	r3, [pc, #100]	@ (8003340 <HAL_GPIO_Init+0x2d0>)
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	4918      	ldr	r1, [pc, #96]	@ (8003340 <HAL_GPIO_Init+0x2d0>)
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	604b      	str	r3, [r1, #4]
 80032e4:	e006      	b.n	80032f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80032e6:	4b16      	ldr	r3, [pc, #88]	@ (8003340 <HAL_GPIO_Init+0x2d0>)
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	43db      	mvns	r3, r3
 80032ee:	4914      	ldr	r1, [pc, #80]	@ (8003340 <HAL_GPIO_Init+0x2d0>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d021      	beq.n	8003344 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003300:	4b0f      	ldr	r3, [pc, #60]	@ (8003340 <HAL_GPIO_Init+0x2d0>)
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	490e      	ldr	r1, [pc, #56]	@ (8003340 <HAL_GPIO_Init+0x2d0>)
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	4313      	orrs	r3, r2
 800330a:	600b      	str	r3, [r1, #0]
 800330c:	e021      	b.n	8003352 <HAL_GPIO_Init+0x2e2>
 800330e:	bf00      	nop
 8003310:	10320000 	.word	0x10320000
 8003314:	10310000 	.word	0x10310000
 8003318:	10220000 	.word	0x10220000
 800331c:	10210000 	.word	0x10210000
 8003320:	10120000 	.word	0x10120000
 8003324:	10110000 	.word	0x10110000
 8003328:	40021000 	.word	0x40021000
 800332c:	40010000 	.word	0x40010000
 8003330:	40010800 	.word	0x40010800
 8003334:	40010c00 	.word	0x40010c00
 8003338:	40011000 	.word	0x40011000
 800333c:	40011400 	.word	0x40011400
 8003340:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003344:	4b0b      	ldr	r3, [pc, #44]	@ (8003374 <HAL_GPIO_Init+0x304>)
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	43db      	mvns	r3, r3
 800334c:	4909      	ldr	r1, [pc, #36]	@ (8003374 <HAL_GPIO_Init+0x304>)
 800334e:	4013      	ands	r3, r2
 8003350:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003354:	3301      	adds	r3, #1
 8003356:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335e:	fa22 f303 	lsr.w	r3, r2, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	f47f ae8e 	bne.w	8003084 <HAL_GPIO_Init+0x14>
  }
}
 8003368:	bf00      	nop
 800336a:	bf00      	nop
 800336c:	372c      	adds	r7, #44	@ 0x2c
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr
 8003374:	40010400 	.word	0x40010400

08003378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	460b      	mov	r3, r1
 8003382:	807b      	strh	r3, [r7, #2]
 8003384:	4613      	mov	r3, r2
 8003386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003388:	787b      	ldrb	r3, [r7, #1]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800338e:	887a      	ldrh	r2, [r7, #2]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003394:	e003      	b.n	800339e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003396:	887b      	ldrh	r3, [r7, #2]
 8003398:	041a      	lsls	r2, r3, #16
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	611a      	str	r2, [r3, #16]
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bc80      	pop	{r7}
 80033a6:	4770      	bx	lr

080033a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e12b      	b.n	8003612 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d106      	bne.n	80033d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7ff fb22 	bl	8002a18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2224      	movs	r2, #36	@ 0x24
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0201 	bic.w	r2, r2, #1
 80033ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800340a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800340c:	f001 fbf0 	bl	8004bf0 <HAL_RCC_GetPCLK1Freq>
 8003410:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	4a81      	ldr	r2, [pc, #516]	@ (800361c <HAL_I2C_Init+0x274>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d807      	bhi.n	800342c <HAL_I2C_Init+0x84>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4a80      	ldr	r2, [pc, #512]	@ (8003620 <HAL_I2C_Init+0x278>)
 8003420:	4293      	cmp	r3, r2
 8003422:	bf94      	ite	ls
 8003424:	2301      	movls	r3, #1
 8003426:	2300      	movhi	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	e006      	b.n	800343a <HAL_I2C_Init+0x92>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	4a7d      	ldr	r2, [pc, #500]	@ (8003624 <HAL_I2C_Init+0x27c>)
 8003430:	4293      	cmp	r3, r2
 8003432:	bf94      	ite	ls
 8003434:	2301      	movls	r3, #1
 8003436:	2300      	movhi	r3, #0
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e0e7      	b.n	8003612 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	4a78      	ldr	r2, [pc, #480]	@ (8003628 <HAL_I2C_Init+0x280>)
 8003446:	fba2 2303 	umull	r2, r3, r2, r3
 800344a:	0c9b      	lsrs	r3, r3, #18
 800344c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	430a      	orrs	r2, r1
 8003460:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	4a6a      	ldr	r2, [pc, #424]	@ (800361c <HAL_I2C_Init+0x274>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d802      	bhi.n	800347c <HAL_I2C_Init+0xd4>
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	3301      	adds	r3, #1
 800347a:	e009      	b.n	8003490 <HAL_I2C_Init+0xe8>
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003482:	fb02 f303 	mul.w	r3, r2, r3
 8003486:	4a69      	ldr	r2, [pc, #420]	@ (800362c <HAL_I2C_Init+0x284>)
 8003488:	fba2 2303 	umull	r2, r3, r2, r3
 800348c:	099b      	lsrs	r3, r3, #6
 800348e:	3301      	adds	r3, #1
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6812      	ldr	r2, [r2, #0]
 8003494:	430b      	orrs	r3, r1
 8003496:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80034a2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	495c      	ldr	r1, [pc, #368]	@ (800361c <HAL_I2C_Init+0x274>)
 80034ac:	428b      	cmp	r3, r1
 80034ae:	d819      	bhi.n	80034e4 <HAL_I2C_Init+0x13c>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	1e59      	subs	r1, r3, #1
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80034be:	1c59      	adds	r1, r3, #1
 80034c0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80034c4:	400b      	ands	r3, r1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00a      	beq.n	80034e0 <HAL_I2C_Init+0x138>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	1e59      	subs	r1, r3, #1
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80034d8:	3301      	adds	r3, #1
 80034da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034de:	e051      	b.n	8003584 <HAL_I2C_Init+0x1dc>
 80034e0:	2304      	movs	r3, #4
 80034e2:	e04f      	b.n	8003584 <HAL_I2C_Init+0x1dc>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d111      	bne.n	8003510 <HAL_I2C_Init+0x168>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	1e58      	subs	r0, r3, #1
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6859      	ldr	r1, [r3, #4]
 80034f4:	460b      	mov	r3, r1
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	440b      	add	r3, r1
 80034fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80034fe:	3301      	adds	r3, #1
 8003500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003504:	2b00      	cmp	r3, #0
 8003506:	bf0c      	ite	eq
 8003508:	2301      	moveq	r3, #1
 800350a:	2300      	movne	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	e012      	b.n	8003536 <HAL_I2C_Init+0x18e>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	1e58      	subs	r0, r3, #1
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6859      	ldr	r1, [r3, #4]
 8003518:	460b      	mov	r3, r1
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	0099      	lsls	r1, r3, #2
 8003520:	440b      	add	r3, r1
 8003522:	fbb0 f3f3 	udiv	r3, r0, r3
 8003526:	3301      	adds	r3, #1
 8003528:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800352c:	2b00      	cmp	r3, #0
 800352e:	bf0c      	ite	eq
 8003530:	2301      	moveq	r3, #1
 8003532:	2300      	movne	r3, #0
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <HAL_I2C_Init+0x196>
 800353a:	2301      	movs	r3, #1
 800353c:	e022      	b.n	8003584 <HAL_I2C_Init+0x1dc>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10e      	bne.n	8003564 <HAL_I2C_Init+0x1bc>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	1e58      	subs	r0, r3, #1
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6859      	ldr	r1, [r3, #4]
 800354e:	460b      	mov	r3, r1
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	440b      	add	r3, r1
 8003554:	fbb0 f3f3 	udiv	r3, r0, r3
 8003558:	3301      	adds	r3, #1
 800355a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800355e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003562:	e00f      	b.n	8003584 <HAL_I2C_Init+0x1dc>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	1e58      	subs	r0, r3, #1
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6859      	ldr	r1, [r3, #4]
 800356c:	460b      	mov	r3, r1
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	0099      	lsls	r1, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	fbb0 f3f3 	udiv	r3, r0, r3
 800357a:	3301      	adds	r3, #1
 800357c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003580:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003584:	6879      	ldr	r1, [r7, #4]
 8003586:	6809      	ldr	r1, [r1, #0]
 8003588:	4313      	orrs	r3, r2
 800358a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	69da      	ldr	r2, [r3, #28]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	431a      	orrs	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80035b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	6911      	ldr	r1, [r2, #16]
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	68d2      	ldr	r2, [r2, #12]
 80035be:	4311      	orrs	r1, r2
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6812      	ldr	r2, [r2, #0]
 80035c4:	430b      	orrs	r3, r1
 80035c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	695a      	ldr	r2, [r3, #20]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 0201 	orr.w	r2, r2, #1
 80035f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2220      	movs	r2, #32
 80035fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	000186a0 	.word	0x000186a0
 8003620:	001e847f 	.word	0x001e847f
 8003624:	003d08ff 	.word	0x003d08ff
 8003628:	431bde83 	.word	0x431bde83
 800362c:	10624dd3 	.word	0x10624dd3

08003630 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b088      	sub	sp, #32
 8003634:	af02      	add	r7, sp, #8
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	4608      	mov	r0, r1
 800363a:	4611      	mov	r1, r2
 800363c:	461a      	mov	r2, r3
 800363e:	4603      	mov	r3, r0
 8003640:	817b      	strh	r3, [r7, #10]
 8003642:	460b      	mov	r3, r1
 8003644:	813b      	strh	r3, [r7, #8]
 8003646:	4613      	mov	r3, r2
 8003648:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800364a:	f7ff fbf9 	bl	8002e40 <HAL_GetTick>
 800364e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b20      	cmp	r3, #32
 800365a:	f040 80d9 	bne.w	8003810 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	2319      	movs	r3, #25
 8003664:	2201      	movs	r2, #1
 8003666:	496d      	ldr	r1, [pc, #436]	@ (800381c <HAL_I2C_Mem_Write+0x1ec>)
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f000 fcc1 	bl	8003ff0 <I2C_WaitOnFlagUntilTimeout>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003674:	2302      	movs	r3, #2
 8003676:	e0cc      	b.n	8003812 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800367e:	2b01      	cmp	r3, #1
 8003680:	d101      	bne.n	8003686 <HAL_I2C_Mem_Write+0x56>
 8003682:	2302      	movs	r3, #2
 8003684:	e0c5      	b.n	8003812 <HAL_I2C_Mem_Write+0x1e2>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b01      	cmp	r3, #1
 800369a:	d007      	beq.n	80036ac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f042 0201 	orr.w	r2, r2, #1
 80036aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2221      	movs	r2, #33	@ 0x21
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2240      	movs	r2, #64	@ 0x40
 80036c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a3a      	ldr	r2, [r7, #32]
 80036d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80036dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4a4d      	ldr	r2, [pc, #308]	@ (8003820 <HAL_I2C_Mem_Write+0x1f0>)
 80036ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036ee:	88f8      	ldrh	r0, [r7, #6]
 80036f0:	893a      	ldrh	r2, [r7, #8]
 80036f2:	8979      	ldrh	r1, [r7, #10]
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	9301      	str	r3, [sp, #4]
 80036f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	4603      	mov	r3, r0
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 faf8 	bl	8003cf4 <I2C_RequestMemoryWrite>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d052      	beq.n	80037b0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e081      	b.n	8003812 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 fd86 	bl	8004224 <I2C_WaitOnTXEFlagUntilTimeout>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00d      	beq.n	800373a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003722:	2b04      	cmp	r3, #4
 8003724:	d107      	bne.n	8003736 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003734:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e06b      	b.n	8003812 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373e:	781a      	ldrb	r2, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374a:	1c5a      	adds	r2, r3, #1
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003760:	b29b      	uxth	r3, r3
 8003762:	3b01      	subs	r3, #1
 8003764:	b29a      	uxth	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b04      	cmp	r3, #4
 8003776:	d11b      	bne.n	80037b0 <HAL_I2C_Mem_Write+0x180>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800377c:	2b00      	cmp	r3, #0
 800377e:	d017      	beq.n	80037b0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003784:	781a      	ldrb	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003790:	1c5a      	adds	r2, r3, #1
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800379a:	3b01      	subs	r3, #1
 800379c:	b29a      	uxth	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	3b01      	subs	r3, #1
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1aa      	bne.n	800370e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 fd79 	bl	80042b4 <I2C_WaitOnBTFFlagUntilTimeout>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00d      	beq.n	80037e4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037cc:	2b04      	cmp	r3, #4
 80037ce:	d107      	bne.n	80037e0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e016      	b.n	8003812 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2220      	movs	r2, #32
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800380c:	2300      	movs	r3, #0
 800380e:	e000      	b.n	8003812 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003810:	2302      	movs	r3, #2
  }
}
 8003812:	4618      	mov	r0, r3
 8003814:	3718      	adds	r7, #24
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	00100002 	.word	0x00100002
 8003820:	ffff0000 	.word	0xffff0000

08003824 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b08c      	sub	sp, #48	@ 0x30
 8003828:	af02      	add	r7, sp, #8
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	4608      	mov	r0, r1
 800382e:	4611      	mov	r1, r2
 8003830:	461a      	mov	r2, r3
 8003832:	4603      	mov	r3, r0
 8003834:	817b      	strh	r3, [r7, #10]
 8003836:	460b      	mov	r3, r1
 8003838:	813b      	strh	r3, [r7, #8]
 800383a:	4613      	mov	r3, r2
 800383c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800383e:	2300      	movs	r3, #0
 8003840:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003842:	f7ff fafd 	bl	8002e40 <HAL_GetTick>
 8003846:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b20      	cmp	r3, #32
 8003852:	f040 8244 	bne.w	8003cde <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	2319      	movs	r3, #25
 800385c:	2201      	movs	r2, #1
 800385e:	4982      	ldr	r1, [pc, #520]	@ (8003a68 <HAL_I2C_Mem_Read+0x244>)
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f000 fbc5 	bl	8003ff0 <I2C_WaitOnFlagUntilTimeout>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800386c:	2302      	movs	r3, #2
 800386e:	e237      	b.n	8003ce0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003876:	2b01      	cmp	r3, #1
 8003878:	d101      	bne.n	800387e <HAL_I2C_Mem_Read+0x5a>
 800387a:	2302      	movs	r3, #2
 800387c:	e230      	b.n	8003ce0 <HAL_I2C_Mem_Read+0x4bc>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b01      	cmp	r3, #1
 8003892:	d007      	beq.n	80038a4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0201 	orr.w	r2, r2, #1
 80038a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2222      	movs	r2, #34	@ 0x22
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2240      	movs	r2, #64	@ 0x40
 80038c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80038d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038da:	b29a      	uxth	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4a62      	ldr	r2, [pc, #392]	@ (8003a6c <HAL_I2C_Mem_Read+0x248>)
 80038e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038e6:	88f8      	ldrh	r0, [r7, #6]
 80038e8:	893a      	ldrh	r2, [r7, #8]
 80038ea:	8979      	ldrh	r1, [r7, #10]
 80038ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ee:	9301      	str	r3, [sp, #4]
 80038f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	4603      	mov	r3, r0
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 fa92 	bl	8003e20 <I2C_RequestMemoryRead>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e1ec      	b.n	8003ce0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800390a:	2b00      	cmp	r3, #0
 800390c:	d113      	bne.n	8003936 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800390e:	2300      	movs	r3, #0
 8003910:	61fb      	str	r3, [r7, #28]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	61fb      	str	r3, [r7, #28]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	61fb      	str	r3, [r7, #28]
 8003922:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	e1c0      	b.n	8003cb8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800393a:	2b01      	cmp	r3, #1
 800393c:	d11e      	bne.n	800397c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800394c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800394e:	b672      	cpsid	i
}
 8003950:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003952:	2300      	movs	r3, #0
 8003954:	61bb      	str	r3, [r7, #24]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	61bb      	str	r3, [r7, #24]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	61bb      	str	r3, [r7, #24]
 8003966:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003976:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003978:	b662      	cpsie	i
}
 800397a:	e035      	b.n	80039e8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003980:	2b02      	cmp	r3, #2
 8003982:	d11e      	bne.n	80039c2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003992:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003994:	b672      	cpsid	i
}
 8003996:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003998:	2300      	movs	r3, #0
 800399a:	617b      	str	r3, [r7, #20]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	617b      	str	r3, [r7, #20]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	617b      	str	r3, [r7, #20]
 80039ac:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80039be:	b662      	cpsie	i
}
 80039c0:	e012      	b.n	80039e8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80039d0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039d2:	2300      	movs	r3, #0
 80039d4:	613b      	str	r3, [r7, #16]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	613b      	str	r3, [r7, #16]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	613b      	str	r3, [r7, #16]
 80039e6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80039e8:	e166      	b.n	8003cb8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ee:	2b03      	cmp	r3, #3
 80039f0:	f200 811f 	bhi.w	8003c32 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d123      	bne.n	8003a44 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039fe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 fc9f 	bl	8004344 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e167      	b.n	8003ce0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	691a      	ldr	r2, [r3, #16]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1a:	b2d2      	uxtb	r2, r2
 8003a1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a22:	1c5a      	adds	r2, r3, #1
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a42:	e139      	b.n	8003cb8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d152      	bne.n	8003af2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a52:	2200      	movs	r2, #0
 8003a54:	4906      	ldr	r1, [pc, #24]	@ (8003a70 <HAL_I2C_Mem_Read+0x24c>)
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f000 faca 	bl	8003ff0 <I2C_WaitOnFlagUntilTimeout>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d008      	beq.n	8003a74 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e13c      	b.n	8003ce0 <HAL_I2C_Mem_Read+0x4bc>
 8003a66:	bf00      	nop
 8003a68:	00100002 	.word	0x00100002
 8003a6c:	ffff0000 	.word	0xffff0000
 8003a70:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003a74:	b672      	cpsid	i
}
 8003a76:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	691a      	ldr	r2, [r3, #16]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a92:	b2d2      	uxtb	r2, r2
 8003a94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9a:	1c5a      	adds	r2, r3, #1
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003aba:	b662      	cpsie	i
}
 8003abc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	691a      	ldr	r2, [r3, #16]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac8:	b2d2      	uxtb	r2, r2
 8003aca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad0:	1c5a      	adds	r2, r3, #1
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ada:	3b01      	subs	r3, #1
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003af0:	e0e2      	b.n	8003cb8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003af8:	2200      	movs	r2, #0
 8003afa:	497b      	ldr	r1, [pc, #492]	@ (8003ce8 <HAL_I2C_Mem_Read+0x4c4>)
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 fa77 	bl	8003ff0 <I2C_WaitOnFlagUntilTimeout>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e0e9      	b.n	8003ce0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b1a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b1c:	b672      	cpsid	i
}
 8003b1e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	691a      	ldr	r2, [r3, #16]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2a:	b2d2      	uxtb	r2, r2
 8003b2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b32:	1c5a      	adds	r2, r3, #1
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b52:	4b66      	ldr	r3, [pc, #408]	@ (8003cec <HAL_I2C_Mem_Read+0x4c8>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	08db      	lsrs	r3, r3, #3
 8003b58:	4a65      	ldr	r2, [pc, #404]	@ (8003cf0 <HAL_I2C_Mem_Read+0x4cc>)
 8003b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5e:	0a1a      	lsrs	r2, r3, #8
 8003b60:	4613      	mov	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	00da      	lsls	r2, r3, #3
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d118      	bne.n	8003baa <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2220      	movs	r2, #32
 8003b82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b92:	f043 0220 	orr.w	r2, r3, #32
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003b9a:	b662      	cpsie	i
}
 8003b9c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e09a      	b.n	8003ce0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	2b04      	cmp	r3, #4
 8003bb6:	d1d9      	bne.n	8003b6c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	691a      	ldr	r2, [r3, #16]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd2:	b2d2      	uxtb	r2, r2
 8003bd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bda:	1c5a      	adds	r2, r3, #1
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003be4:	3b01      	subs	r3, #1
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003bfa:	b662      	cpsie	i
}
 8003bfc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	691a      	ldr	r2, [r3, #16]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c08:	b2d2      	uxtb	r2, r2
 8003c0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c10:	1c5a      	adds	r2, r3, #1
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c30:	e042      	b.n	8003cb8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c34:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 fb84 	bl	8004344 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e04c      	b.n	8003ce0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	691a      	ldr	r2, [r3, #16]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c50:	b2d2      	uxtb	r2, r2
 8003c52:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c58:	1c5a      	adds	r2, r3, #1
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c62:	3b01      	subs	r3, #1
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	3b01      	subs	r3, #1
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	f003 0304 	and.w	r3, r3, #4
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	d118      	bne.n	8003cb8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	691a      	ldr	r2, [r3, #16]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c90:	b2d2      	uxtb	r2, r2
 8003c92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c98:	1c5a      	adds	r2, r3, #1
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f47f ae94 	bne.w	80039ea <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	e000      	b.n	8003ce0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003cde:	2302      	movs	r3, #2
  }
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3728      	adds	r7, #40	@ 0x28
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	00010004 	.word	0x00010004
 8003cec:	20000090 	.word	0x20000090
 8003cf0:	14f8b589 	.word	0x14f8b589

08003cf4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b088      	sub	sp, #32
 8003cf8:	af02      	add	r7, sp, #8
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	4608      	mov	r0, r1
 8003cfe:	4611      	mov	r1, r2
 8003d00:	461a      	mov	r2, r3
 8003d02:	4603      	mov	r3, r0
 8003d04:	817b      	strh	r3, [r7, #10]
 8003d06:	460b      	mov	r3, r1
 8003d08:	813b      	strh	r3, [r7, #8]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 f960 	bl	8003ff0 <I2C_WaitOnFlagUntilTimeout>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00d      	beq.n	8003d52 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d44:	d103      	bne.n	8003d4e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d4c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e05f      	b.n	8003e12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d52:	897b      	ldrh	r3, [r7, #10]
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	461a      	mov	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d64:	6a3a      	ldr	r2, [r7, #32]
 8003d66:	492d      	ldr	r1, [pc, #180]	@ (8003e1c <I2C_RequestMemoryWrite+0x128>)
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 f9bb 	bl	80040e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e04c      	b.n	8003e12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d78:	2300      	movs	r3, #0
 8003d7a:	617b      	str	r3, [r7, #20]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	617b      	str	r3, [r7, #20]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	617b      	str	r3, [r7, #20]
 8003d8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d90:	6a39      	ldr	r1, [r7, #32]
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f000 fa46 	bl	8004224 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00d      	beq.n	8003dba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d107      	bne.n	8003db6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003db4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e02b      	b.n	8003e12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dba:	88fb      	ldrh	r3, [r7, #6]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d105      	bne.n	8003dcc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dc0:	893b      	ldrh	r3, [r7, #8]
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	611a      	str	r2, [r3, #16]
 8003dca:	e021      	b.n	8003e10 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003dcc:	893b      	ldrh	r3, [r7, #8]
 8003dce:	0a1b      	lsrs	r3, r3, #8
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	b2da      	uxtb	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ddc:	6a39      	ldr	r1, [r7, #32]
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f000 fa20 	bl	8004224 <I2C_WaitOnTXEFlagUntilTimeout>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00d      	beq.n	8003e06 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dee:	2b04      	cmp	r3, #4
 8003df0:	d107      	bne.n	8003e02 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e00:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e005      	b.n	8003e12 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e06:	893b      	ldrh	r3, [r7, #8]
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	00010002 	.word	0x00010002

08003e20 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b088      	sub	sp, #32
 8003e24:	af02      	add	r7, sp, #8
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	4608      	mov	r0, r1
 8003e2a:	4611      	mov	r1, r2
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	4603      	mov	r3, r0
 8003e30:	817b      	strh	r3, [r7, #10]
 8003e32:	460b      	mov	r3, r1
 8003e34:	813b      	strh	r3, [r7, #8]
 8003e36:	4613      	mov	r3, r2
 8003e38:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e48:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f000 f8c2 	bl	8003ff0 <I2C_WaitOnFlagUntilTimeout>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00d      	beq.n	8003e8e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e80:	d103      	bne.n	8003e8a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e88:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e0aa      	b.n	8003fe4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e8e:	897b      	ldrh	r3, [r7, #10]
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	461a      	mov	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea0:	6a3a      	ldr	r2, [r7, #32]
 8003ea2:	4952      	ldr	r1, [pc, #328]	@ (8003fec <I2C_RequestMemoryRead+0x1cc>)
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f000 f91d 	bl	80040e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e097      	b.n	8003fe4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	617b      	str	r3, [r7, #20]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	617b      	str	r3, [r7, #20]
 8003ec8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ecc:	6a39      	ldr	r1, [r7, #32]
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 f9a8 	bl	8004224 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00d      	beq.n	8003ef6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d107      	bne.n	8003ef2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ef0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e076      	b.n	8003fe4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ef6:	88fb      	ldrh	r3, [r7, #6]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d105      	bne.n	8003f08 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003efc:	893b      	ldrh	r3, [r7, #8]
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	611a      	str	r2, [r3, #16]
 8003f06:	e021      	b.n	8003f4c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f08:	893b      	ldrh	r3, [r7, #8]
 8003f0a:	0a1b      	lsrs	r3, r3, #8
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	b2da      	uxtb	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f18:	6a39      	ldr	r1, [r7, #32]
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 f982 	bl	8004224 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00d      	beq.n	8003f42 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d107      	bne.n	8003f3e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e050      	b.n	8003fe4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f42:	893b      	ldrh	r3, [r7, #8]
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f4e:	6a39      	ldr	r1, [r7, #32]
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 f967 	bl	8004224 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00d      	beq.n	8003f78 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f60:	2b04      	cmp	r3, #4
 8003f62:	d107      	bne.n	8003f74 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f72:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e035      	b.n	8003fe4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f86:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	6a3b      	ldr	r3, [r7, #32]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 f82b 	bl	8003ff0 <I2C_WaitOnFlagUntilTimeout>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00d      	beq.n	8003fbc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003faa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fae:	d103      	bne.n	8003fb8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fb6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e013      	b.n	8003fe4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003fbc:	897b      	ldrh	r3, [r7, #10]
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	f043 0301 	orr.w	r3, r3, #1
 8003fc4:	b2da      	uxtb	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fce:	6a3a      	ldr	r2, [r7, #32]
 8003fd0:	4906      	ldr	r1, [pc, #24]	@ (8003fec <I2C_RequestMemoryRead+0x1cc>)
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f000 f886 	bl	80040e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e000      	b.n	8003fe4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3718      	adds	r7, #24
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	00010002 	.word	0x00010002

08003ff0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	603b      	str	r3, [r7, #0]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004000:	e048      	b.n	8004094 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004008:	d044      	beq.n	8004094 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800400a:	f7fe ff19 	bl	8002e40 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	429a      	cmp	r2, r3
 8004018:	d302      	bcc.n	8004020 <I2C_WaitOnFlagUntilTimeout+0x30>
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d139      	bne.n	8004094 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	0c1b      	lsrs	r3, r3, #16
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b01      	cmp	r3, #1
 8004028:	d10d      	bne.n	8004046 <I2C_WaitOnFlagUntilTimeout+0x56>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	43da      	mvns	r2, r3
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	4013      	ands	r3, r2
 8004036:	b29b      	uxth	r3, r3
 8004038:	2b00      	cmp	r3, #0
 800403a:	bf0c      	ite	eq
 800403c:	2301      	moveq	r3, #1
 800403e:	2300      	movne	r3, #0
 8004040:	b2db      	uxtb	r3, r3
 8004042:	461a      	mov	r2, r3
 8004044:	e00c      	b.n	8004060 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	43da      	mvns	r2, r3
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	4013      	ands	r3, r2
 8004052:	b29b      	uxth	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	bf0c      	ite	eq
 8004058:	2301      	moveq	r3, #1
 800405a:	2300      	movne	r3, #0
 800405c:	b2db      	uxtb	r3, r3
 800405e:	461a      	mov	r2, r3
 8004060:	79fb      	ldrb	r3, [r7, #7]
 8004062:	429a      	cmp	r2, r3
 8004064:	d116      	bne.n	8004094 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2220      	movs	r2, #32
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004080:	f043 0220 	orr.w	r2, r3, #32
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e023      	b.n	80040dc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	0c1b      	lsrs	r3, r3, #16
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b01      	cmp	r3, #1
 800409c:	d10d      	bne.n	80040ba <I2C_WaitOnFlagUntilTimeout+0xca>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	43da      	mvns	r2, r3
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	4013      	ands	r3, r2
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	bf0c      	ite	eq
 80040b0:	2301      	moveq	r3, #1
 80040b2:	2300      	movne	r3, #0
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	461a      	mov	r2, r3
 80040b8:	e00c      	b.n	80040d4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	43da      	mvns	r2, r3
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	4013      	ands	r3, r2
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	bf0c      	ite	eq
 80040cc:	2301      	moveq	r3, #1
 80040ce:	2300      	movne	r3, #0
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	461a      	mov	r2, r3
 80040d4:	79fb      	ldrb	r3, [r7, #7]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d093      	beq.n	8004002 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
 80040f0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040f2:	e071      	b.n	80041d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004102:	d123      	bne.n	800414c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004112:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800411c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2220      	movs	r2, #32
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004138:	f043 0204 	orr.w	r2, r3, #4
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e067      	b.n	800421c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004152:	d041      	beq.n	80041d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004154:	f7fe fe74 	bl	8002e40 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	429a      	cmp	r2, r3
 8004162:	d302      	bcc.n	800416a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d136      	bne.n	80041d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	0c1b      	lsrs	r3, r3, #16
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b01      	cmp	r3, #1
 8004172:	d10c      	bne.n	800418e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	43da      	mvns	r2, r3
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	4013      	ands	r3, r2
 8004180:	b29b      	uxth	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	bf14      	ite	ne
 8004186:	2301      	movne	r3, #1
 8004188:	2300      	moveq	r3, #0
 800418a:	b2db      	uxtb	r3, r3
 800418c:	e00b      	b.n	80041a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	43da      	mvns	r2, r3
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	4013      	ands	r3, r2
 800419a:	b29b      	uxth	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	bf14      	ite	ne
 80041a0:	2301      	movne	r3, #1
 80041a2:	2300      	moveq	r3, #0
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d016      	beq.n	80041d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2220      	movs	r2, #32
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c4:	f043 0220 	orr.w	r2, r3, #32
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e021      	b.n	800421c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	0c1b      	lsrs	r3, r3, #16
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d10c      	bne.n	80041fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	43da      	mvns	r2, r3
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	4013      	ands	r3, r2
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	bf14      	ite	ne
 80041f4:	2301      	movne	r3, #1
 80041f6:	2300      	moveq	r3, #0
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	e00b      	b.n	8004214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	43da      	mvns	r2, r3
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	4013      	ands	r3, r2
 8004208:	b29b      	uxth	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	bf14      	ite	ne
 800420e:	2301      	movne	r3, #1
 8004210:	2300      	moveq	r3, #0
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b00      	cmp	r3, #0
 8004216:	f47f af6d 	bne.w	80040f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004230:	e034      	b.n	800429c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 f8e3 	bl	80043fe <I2C_IsAcknowledgeFailed>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e034      	b.n	80042ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004248:	d028      	beq.n	800429c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800424a:	f7fe fdf9 	bl	8002e40 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	68ba      	ldr	r2, [r7, #8]
 8004256:	429a      	cmp	r2, r3
 8004258:	d302      	bcc.n	8004260 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d11d      	bne.n	800429c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800426a:	2b80      	cmp	r3, #128	@ 0x80
 800426c:	d016      	beq.n	800429c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004288:	f043 0220 	orr.w	r2, r3, #32
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e007      	b.n	80042ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042a6:	2b80      	cmp	r3, #128	@ 0x80
 80042a8:	d1c3      	bne.n	8004232 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042c0:	e034      	b.n	800432c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f000 f89b 	bl	80043fe <I2C_IsAcknowledgeFailed>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e034      	b.n	800433c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d8:	d028      	beq.n	800432c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042da:	f7fe fdb1 	bl	8002e40 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d302      	bcc.n	80042f0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d11d      	bne.n	800432c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	f003 0304 	and.w	r3, r3, #4
 80042fa:	2b04      	cmp	r3, #4
 80042fc:	d016      	beq.n	800432c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2220      	movs	r2, #32
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004318:	f043 0220 	orr.w	r2, r3, #32
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e007      	b.n	800433c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	f003 0304 	and.w	r3, r3, #4
 8004336:	2b04      	cmp	r3, #4
 8004338:	d1c3      	bne.n	80042c2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004350:	e049      	b.n	80043e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	f003 0310 	and.w	r3, r3, #16
 800435c:	2b10      	cmp	r3, #16
 800435e:	d119      	bne.n	8004394 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f06f 0210 	mvn.w	r2, #16
 8004368:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2220      	movs	r2, #32
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e030      	b.n	80043f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004394:	f7fe fd54 	bl	8002e40 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d302      	bcc.n	80043aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d11d      	bne.n	80043e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043b4:	2b40      	cmp	r3, #64	@ 0x40
 80043b6:	d016      	beq.n	80043e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2220      	movs	r2, #32
 80043c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d2:	f043 0220 	orr.w	r2, r3, #32
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e007      	b.n	80043f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f0:	2b40      	cmp	r3, #64	@ 0x40
 80043f2:	d1ae      	bne.n	8004352 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004410:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004414:	d11b      	bne.n	800444e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800441e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2220      	movs	r2, #32
 800442a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443a:	f043 0204 	orr.w	r2, r3, #4
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e000      	b.n	8004450 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	bc80      	pop	{r7}
 8004458:	4770      	bx	lr
	...

0800445c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e272      	b.n	8004954 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 8087 	beq.w	800458a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800447c:	4b92      	ldr	r3, [pc, #584]	@ (80046c8 <HAL_RCC_OscConfig+0x26c>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f003 030c 	and.w	r3, r3, #12
 8004484:	2b04      	cmp	r3, #4
 8004486:	d00c      	beq.n	80044a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004488:	4b8f      	ldr	r3, [pc, #572]	@ (80046c8 <HAL_RCC_OscConfig+0x26c>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f003 030c 	and.w	r3, r3, #12
 8004490:	2b08      	cmp	r3, #8
 8004492:	d112      	bne.n	80044ba <HAL_RCC_OscConfig+0x5e>
 8004494:	4b8c      	ldr	r3, [pc, #560]	@ (80046c8 <HAL_RCC_OscConfig+0x26c>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800449c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044a0:	d10b      	bne.n	80044ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a2:	4b89      	ldr	r3, [pc, #548]	@ (80046c8 <HAL_RCC_OscConfig+0x26c>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d06c      	beq.n	8004588 <HAL_RCC_OscConfig+0x12c>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d168      	bne.n	8004588 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e24c      	b.n	8004954 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044c2:	d106      	bne.n	80044d2 <HAL_RCC_OscConfig+0x76>
 80044c4:	4b80      	ldr	r3, [pc, #512]	@ (80046c8 <HAL_RCC_OscConfig+0x26c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a7f      	ldr	r2, [pc, #508]	@ (80046c8 <HAL_RCC_OscConfig+0x26c>)
 80044ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044ce:	6013      	str	r3, [r2, #0]
 80044d0:	e02e      	b.n	8004530 <HAL_RCC_OscConfig+0xd4>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10c      	bne.n	80044f4 <HAL_RCC_OscConfig+0x98>
 80044da:	4b7b      	ldr	r3, [pc, #492]	@ (80046c8 <HAL_RCC_OscConfig+0x26c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a7a      	ldr	r2, [pc, #488]	@ (80046c8 <HAL_RCC_OscConfig+0x26c>)
 80044e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044e4:	6013      	str	r3, [r2, #0]
 80044e6:	4b78      	ldr	r3, [pc, #480]	@ (80046c8 <HAL_RCC_OscConfig+0x26c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a77      	ldr	r2, [pc, #476]	@ (80046c8 <HAL_RCC_OscConfig+0x26c>)
 80044ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044f0:	6013      	str	r3, [r2, #0]
 80044f2:	e01d      	b.n	8004530 <HAL_RCC_OscConfig+0xd4>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044fc:	d10c      	bne.n	8004518 <HAL_RCC_OscConfig+0xbc>
 80044fe:	4b72      	ldr	r3, [pc, #456]	@ (80046c8 <HAL_RCC_OscConfig+0x26c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a71      	ldr	r2, [pc, #452]	@ (80046c8 <HAL_RCC_OscConfig+0x26c>)
 8004504:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004508:	6013      	str	r3, [r2, #0]
 800450a:	4b6f      	ldr	r3, [pc, #444]	@ (80046c8 <HAL_RCC_OscConfig+0x26c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a6e      	ldr	r2, [pc, #440]	@ (80046c8 <HAL_RCC_OscConfig+0x26c>)
 8004510:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004514:	6013      	str	r3, [r2, #0]
 8004516:	e00b      	b.n	8004530 <HAL_RCC_OscConfig+0xd4>
 8004518:	4b6b      	ldr	r3, [pc, #428]	@ (80046c8 <HAL_RCC_OscConfig+0x26c>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a6a      	ldr	r2, [pc, #424]	@ (80046c8 <HAL_RCC_OscConfig+0x26c>)
 800451e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004522:	6013      	str	r3, [r2, #0]
 8004524:	4b68      	ldr	r3, [pc, #416]	@ (80046c8 <HAL_RCC_OscConfig+0x26c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a67      	ldr	r2, [pc, #412]	@ (80046c8 <HAL_RCC_OscConfig+0x26c>)
 800452a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800452e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d013      	beq.n	8004560 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004538:	f7fe fc82 	bl	8002e40 <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800453e:	e008      	b.n	8004552 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004540:	f7fe fc7e 	bl	8002e40 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b64      	cmp	r3, #100	@ 0x64
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e200      	b.n	8004954 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004552:	4b5d      	ldr	r3, [pc, #372]	@ (80046c8 <HAL_RCC_OscConfig+0x26c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0f0      	beq.n	8004540 <HAL_RCC_OscConfig+0xe4>
 800455e:	e014      	b.n	800458a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004560:	f7fe fc6e 	bl	8002e40 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004568:	f7fe fc6a 	bl	8002e40 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b64      	cmp	r3, #100	@ 0x64
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e1ec      	b.n	8004954 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800457a:	4b53      	ldr	r3, [pc, #332]	@ (80046c8 <HAL_RCC_OscConfig+0x26c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1f0      	bne.n	8004568 <HAL_RCC_OscConfig+0x10c>
 8004586:	e000      	b.n	800458a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d063      	beq.n	800465e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004596:	4b4c      	ldr	r3, [pc, #304]	@ (80046c8 <HAL_RCC_OscConfig+0x26c>)
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f003 030c 	and.w	r3, r3, #12
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00b      	beq.n	80045ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80045a2:	4b49      	ldr	r3, [pc, #292]	@ (80046c8 <HAL_RCC_OscConfig+0x26c>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f003 030c 	and.w	r3, r3, #12
 80045aa:	2b08      	cmp	r3, #8
 80045ac:	d11c      	bne.n	80045e8 <HAL_RCC_OscConfig+0x18c>
 80045ae:	4b46      	ldr	r3, [pc, #280]	@ (80046c8 <HAL_RCC_OscConfig+0x26c>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d116      	bne.n	80045e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ba:	4b43      	ldr	r3, [pc, #268]	@ (80046c8 <HAL_RCC_OscConfig+0x26c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d005      	beq.n	80045d2 <HAL_RCC_OscConfig+0x176>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d001      	beq.n	80045d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e1c0      	b.n	8004954 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d2:	4b3d      	ldr	r3, [pc, #244]	@ (80046c8 <HAL_RCC_OscConfig+0x26c>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	4939      	ldr	r1, [pc, #228]	@ (80046c8 <HAL_RCC_OscConfig+0x26c>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045e6:	e03a      	b.n	800465e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d020      	beq.n	8004632 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045f0:	4b36      	ldr	r3, [pc, #216]	@ (80046cc <HAL_RCC_OscConfig+0x270>)
 80045f2:	2201      	movs	r2, #1
 80045f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f6:	f7fe fc23 	bl	8002e40 <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045fc:	e008      	b.n	8004610 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045fe:	f7fe fc1f 	bl	8002e40 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e1a1      	b.n	8004954 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004610:	4b2d      	ldr	r3, [pc, #180]	@ (80046c8 <HAL_RCC_OscConfig+0x26c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0f0      	beq.n	80045fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800461c:	4b2a      	ldr	r3, [pc, #168]	@ (80046c8 <HAL_RCC_OscConfig+0x26c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	00db      	lsls	r3, r3, #3
 800462a:	4927      	ldr	r1, [pc, #156]	@ (80046c8 <HAL_RCC_OscConfig+0x26c>)
 800462c:	4313      	orrs	r3, r2
 800462e:	600b      	str	r3, [r1, #0]
 8004630:	e015      	b.n	800465e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004632:	4b26      	ldr	r3, [pc, #152]	@ (80046cc <HAL_RCC_OscConfig+0x270>)
 8004634:	2200      	movs	r2, #0
 8004636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004638:	f7fe fc02 	bl	8002e40 <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004640:	f7fe fbfe 	bl	8002e40 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e180      	b.n	8004954 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004652:	4b1d      	ldr	r3, [pc, #116]	@ (80046c8 <HAL_RCC_OscConfig+0x26c>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1f0      	bne.n	8004640 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0308 	and.w	r3, r3, #8
 8004666:	2b00      	cmp	r3, #0
 8004668:	d03a      	beq.n	80046e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d019      	beq.n	80046a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004672:	4b17      	ldr	r3, [pc, #92]	@ (80046d0 <HAL_RCC_OscConfig+0x274>)
 8004674:	2201      	movs	r2, #1
 8004676:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004678:	f7fe fbe2 	bl	8002e40 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004680:	f7fe fbde 	bl	8002e40 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e160      	b.n	8004954 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004692:	4b0d      	ldr	r3, [pc, #52]	@ (80046c8 <HAL_RCC_OscConfig+0x26c>)
 8004694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0f0      	beq.n	8004680 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800469e:	2001      	movs	r0, #1
 80046a0:	f000 face 	bl	8004c40 <RCC_Delay>
 80046a4:	e01c      	b.n	80046e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046a6:	4b0a      	ldr	r3, [pc, #40]	@ (80046d0 <HAL_RCC_OscConfig+0x274>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ac:	f7fe fbc8 	bl	8002e40 <HAL_GetTick>
 80046b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046b2:	e00f      	b.n	80046d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046b4:	f7fe fbc4 	bl	8002e40 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d908      	bls.n	80046d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e146      	b.n	8004954 <HAL_RCC_OscConfig+0x4f8>
 80046c6:	bf00      	nop
 80046c8:	40021000 	.word	0x40021000
 80046cc:	42420000 	.word	0x42420000
 80046d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046d4:	4b92      	ldr	r3, [pc, #584]	@ (8004920 <HAL_RCC_OscConfig+0x4c4>)
 80046d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1e9      	bne.n	80046b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0304 	and.w	r3, r3, #4
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f000 80a6 	beq.w	800483a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046ee:	2300      	movs	r3, #0
 80046f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046f2:	4b8b      	ldr	r3, [pc, #556]	@ (8004920 <HAL_RCC_OscConfig+0x4c4>)
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10d      	bne.n	800471a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046fe:	4b88      	ldr	r3, [pc, #544]	@ (8004920 <HAL_RCC_OscConfig+0x4c4>)
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	4a87      	ldr	r2, [pc, #540]	@ (8004920 <HAL_RCC_OscConfig+0x4c4>)
 8004704:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004708:	61d3      	str	r3, [r2, #28]
 800470a:	4b85      	ldr	r3, [pc, #532]	@ (8004920 <HAL_RCC_OscConfig+0x4c4>)
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004712:	60bb      	str	r3, [r7, #8]
 8004714:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004716:	2301      	movs	r3, #1
 8004718:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800471a:	4b82      	ldr	r3, [pc, #520]	@ (8004924 <HAL_RCC_OscConfig+0x4c8>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004722:	2b00      	cmp	r3, #0
 8004724:	d118      	bne.n	8004758 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004726:	4b7f      	ldr	r3, [pc, #508]	@ (8004924 <HAL_RCC_OscConfig+0x4c8>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a7e      	ldr	r2, [pc, #504]	@ (8004924 <HAL_RCC_OscConfig+0x4c8>)
 800472c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004730:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004732:	f7fe fb85 	bl	8002e40 <HAL_GetTick>
 8004736:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004738:	e008      	b.n	800474c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800473a:	f7fe fb81 	bl	8002e40 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b64      	cmp	r3, #100	@ 0x64
 8004746:	d901      	bls.n	800474c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e103      	b.n	8004954 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800474c:	4b75      	ldr	r3, [pc, #468]	@ (8004924 <HAL_RCC_OscConfig+0x4c8>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004754:	2b00      	cmp	r3, #0
 8004756:	d0f0      	beq.n	800473a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d106      	bne.n	800476e <HAL_RCC_OscConfig+0x312>
 8004760:	4b6f      	ldr	r3, [pc, #444]	@ (8004920 <HAL_RCC_OscConfig+0x4c4>)
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	4a6e      	ldr	r2, [pc, #440]	@ (8004920 <HAL_RCC_OscConfig+0x4c4>)
 8004766:	f043 0301 	orr.w	r3, r3, #1
 800476a:	6213      	str	r3, [r2, #32]
 800476c:	e02d      	b.n	80047ca <HAL_RCC_OscConfig+0x36e>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10c      	bne.n	8004790 <HAL_RCC_OscConfig+0x334>
 8004776:	4b6a      	ldr	r3, [pc, #424]	@ (8004920 <HAL_RCC_OscConfig+0x4c4>)
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	4a69      	ldr	r2, [pc, #420]	@ (8004920 <HAL_RCC_OscConfig+0x4c4>)
 800477c:	f023 0301 	bic.w	r3, r3, #1
 8004780:	6213      	str	r3, [r2, #32]
 8004782:	4b67      	ldr	r3, [pc, #412]	@ (8004920 <HAL_RCC_OscConfig+0x4c4>)
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	4a66      	ldr	r2, [pc, #408]	@ (8004920 <HAL_RCC_OscConfig+0x4c4>)
 8004788:	f023 0304 	bic.w	r3, r3, #4
 800478c:	6213      	str	r3, [r2, #32]
 800478e:	e01c      	b.n	80047ca <HAL_RCC_OscConfig+0x36e>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	2b05      	cmp	r3, #5
 8004796:	d10c      	bne.n	80047b2 <HAL_RCC_OscConfig+0x356>
 8004798:	4b61      	ldr	r3, [pc, #388]	@ (8004920 <HAL_RCC_OscConfig+0x4c4>)
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	4a60      	ldr	r2, [pc, #384]	@ (8004920 <HAL_RCC_OscConfig+0x4c4>)
 800479e:	f043 0304 	orr.w	r3, r3, #4
 80047a2:	6213      	str	r3, [r2, #32]
 80047a4:	4b5e      	ldr	r3, [pc, #376]	@ (8004920 <HAL_RCC_OscConfig+0x4c4>)
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	4a5d      	ldr	r2, [pc, #372]	@ (8004920 <HAL_RCC_OscConfig+0x4c4>)
 80047aa:	f043 0301 	orr.w	r3, r3, #1
 80047ae:	6213      	str	r3, [r2, #32]
 80047b0:	e00b      	b.n	80047ca <HAL_RCC_OscConfig+0x36e>
 80047b2:	4b5b      	ldr	r3, [pc, #364]	@ (8004920 <HAL_RCC_OscConfig+0x4c4>)
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	4a5a      	ldr	r2, [pc, #360]	@ (8004920 <HAL_RCC_OscConfig+0x4c4>)
 80047b8:	f023 0301 	bic.w	r3, r3, #1
 80047bc:	6213      	str	r3, [r2, #32]
 80047be:	4b58      	ldr	r3, [pc, #352]	@ (8004920 <HAL_RCC_OscConfig+0x4c4>)
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	4a57      	ldr	r2, [pc, #348]	@ (8004920 <HAL_RCC_OscConfig+0x4c4>)
 80047c4:	f023 0304 	bic.w	r3, r3, #4
 80047c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d015      	beq.n	80047fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047d2:	f7fe fb35 	bl	8002e40 <HAL_GetTick>
 80047d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047d8:	e00a      	b.n	80047f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047da:	f7fe fb31 	bl	8002e40 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e0b1      	b.n	8004954 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047f0:	4b4b      	ldr	r3, [pc, #300]	@ (8004920 <HAL_RCC_OscConfig+0x4c4>)
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d0ee      	beq.n	80047da <HAL_RCC_OscConfig+0x37e>
 80047fc:	e014      	b.n	8004828 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047fe:	f7fe fb1f 	bl	8002e40 <HAL_GetTick>
 8004802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004804:	e00a      	b.n	800481c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004806:	f7fe fb1b 	bl	8002e40 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004814:	4293      	cmp	r3, r2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e09b      	b.n	8004954 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800481c:	4b40      	ldr	r3, [pc, #256]	@ (8004920 <HAL_RCC_OscConfig+0x4c4>)
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1ee      	bne.n	8004806 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004828:	7dfb      	ldrb	r3, [r7, #23]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d105      	bne.n	800483a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800482e:	4b3c      	ldr	r3, [pc, #240]	@ (8004920 <HAL_RCC_OscConfig+0x4c4>)
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	4a3b      	ldr	r2, [pc, #236]	@ (8004920 <HAL_RCC_OscConfig+0x4c4>)
 8004834:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004838:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 8087 	beq.w	8004952 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004844:	4b36      	ldr	r3, [pc, #216]	@ (8004920 <HAL_RCC_OscConfig+0x4c4>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f003 030c 	and.w	r3, r3, #12
 800484c:	2b08      	cmp	r3, #8
 800484e:	d061      	beq.n	8004914 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	69db      	ldr	r3, [r3, #28]
 8004854:	2b02      	cmp	r3, #2
 8004856:	d146      	bne.n	80048e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004858:	4b33      	ldr	r3, [pc, #204]	@ (8004928 <HAL_RCC_OscConfig+0x4cc>)
 800485a:	2200      	movs	r2, #0
 800485c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800485e:	f7fe faef 	bl	8002e40 <HAL_GetTick>
 8004862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004864:	e008      	b.n	8004878 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004866:	f7fe faeb 	bl	8002e40 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	2b02      	cmp	r3, #2
 8004872:	d901      	bls.n	8004878 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e06d      	b.n	8004954 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004878:	4b29      	ldr	r3, [pc, #164]	@ (8004920 <HAL_RCC_OscConfig+0x4c4>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1f0      	bne.n	8004866 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800488c:	d108      	bne.n	80048a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800488e:	4b24      	ldr	r3, [pc, #144]	@ (8004920 <HAL_RCC_OscConfig+0x4c4>)
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	4921      	ldr	r1, [pc, #132]	@ (8004920 <HAL_RCC_OscConfig+0x4c4>)
 800489c:	4313      	orrs	r3, r2
 800489e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048a0:	4b1f      	ldr	r3, [pc, #124]	@ (8004920 <HAL_RCC_OscConfig+0x4c4>)
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a19      	ldr	r1, [r3, #32]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b0:	430b      	orrs	r3, r1
 80048b2:	491b      	ldr	r1, [pc, #108]	@ (8004920 <HAL_RCC_OscConfig+0x4c4>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004928 <HAL_RCC_OscConfig+0x4cc>)
 80048ba:	2201      	movs	r2, #1
 80048bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048be:	f7fe fabf 	bl	8002e40 <HAL_GetTick>
 80048c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048c4:	e008      	b.n	80048d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048c6:	f7fe fabb 	bl	8002e40 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d901      	bls.n	80048d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e03d      	b.n	8004954 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048d8:	4b11      	ldr	r3, [pc, #68]	@ (8004920 <HAL_RCC_OscConfig+0x4c4>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d0f0      	beq.n	80048c6 <HAL_RCC_OscConfig+0x46a>
 80048e4:	e035      	b.n	8004952 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048e6:	4b10      	ldr	r3, [pc, #64]	@ (8004928 <HAL_RCC_OscConfig+0x4cc>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ec:	f7fe faa8 	bl	8002e40 <HAL_GetTick>
 80048f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048f4:	f7fe faa4 	bl	8002e40 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e026      	b.n	8004954 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004906:	4b06      	ldr	r3, [pc, #24]	@ (8004920 <HAL_RCC_OscConfig+0x4c4>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1f0      	bne.n	80048f4 <HAL_RCC_OscConfig+0x498>
 8004912:	e01e      	b.n	8004952 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	69db      	ldr	r3, [r3, #28]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d107      	bne.n	800492c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e019      	b.n	8004954 <HAL_RCC_OscConfig+0x4f8>
 8004920:	40021000 	.word	0x40021000
 8004924:	40007000 	.word	0x40007000
 8004928:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800492c:	4b0b      	ldr	r3, [pc, #44]	@ (800495c <HAL_RCC_OscConfig+0x500>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	429a      	cmp	r2, r3
 800493e:	d106      	bne.n	800494e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800494a:	429a      	cmp	r2, r3
 800494c:	d001      	beq.n	8004952 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e000      	b.n	8004954 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3718      	adds	r7, #24
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	40021000 	.word	0x40021000

08004960 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e0d0      	b.n	8004b16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004974:	4b6a      	ldr	r3, [pc, #424]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c0>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0307 	and.w	r3, r3, #7
 800497c:	683a      	ldr	r2, [r7, #0]
 800497e:	429a      	cmp	r2, r3
 8004980:	d910      	bls.n	80049a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004982:	4b67      	ldr	r3, [pc, #412]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c0>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f023 0207 	bic.w	r2, r3, #7
 800498a:	4965      	ldr	r1, [pc, #404]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c0>)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	4313      	orrs	r3, r2
 8004990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004992:	4b63      	ldr	r3, [pc, #396]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c0>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0307 	and.w	r3, r3, #7
 800499a:	683a      	ldr	r2, [r7, #0]
 800499c:	429a      	cmp	r2, r3
 800499e:	d001      	beq.n	80049a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e0b8      	b.n	8004b16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d020      	beq.n	80049f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d005      	beq.n	80049c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049bc:	4b59      	ldr	r3, [pc, #356]	@ (8004b24 <HAL_RCC_ClockConfig+0x1c4>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	4a58      	ldr	r2, [pc, #352]	@ (8004b24 <HAL_RCC_ClockConfig+0x1c4>)
 80049c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80049c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0308 	and.w	r3, r3, #8
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d005      	beq.n	80049e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049d4:	4b53      	ldr	r3, [pc, #332]	@ (8004b24 <HAL_RCC_ClockConfig+0x1c4>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	4a52      	ldr	r2, [pc, #328]	@ (8004b24 <HAL_RCC_ClockConfig+0x1c4>)
 80049da:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80049de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049e0:	4b50      	ldr	r3, [pc, #320]	@ (8004b24 <HAL_RCC_ClockConfig+0x1c4>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	494d      	ldr	r1, [pc, #308]	@ (8004b24 <HAL_RCC_ClockConfig+0x1c4>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d040      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d107      	bne.n	8004a16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a06:	4b47      	ldr	r3, [pc, #284]	@ (8004b24 <HAL_RCC_ClockConfig+0x1c4>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d115      	bne.n	8004a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e07f      	b.n	8004b16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d107      	bne.n	8004a2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a1e:	4b41      	ldr	r3, [pc, #260]	@ (8004b24 <HAL_RCC_ClockConfig+0x1c4>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d109      	bne.n	8004a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e073      	b.n	8004b16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a2e:	4b3d      	ldr	r3, [pc, #244]	@ (8004b24 <HAL_RCC_ClockConfig+0x1c4>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e06b      	b.n	8004b16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a3e:	4b39      	ldr	r3, [pc, #228]	@ (8004b24 <HAL_RCC_ClockConfig+0x1c4>)
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f023 0203 	bic.w	r2, r3, #3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	4936      	ldr	r1, [pc, #216]	@ (8004b24 <HAL_RCC_ClockConfig+0x1c4>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a50:	f7fe f9f6 	bl	8002e40 <HAL_GetTick>
 8004a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a56:	e00a      	b.n	8004a6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a58:	f7fe f9f2 	bl	8002e40 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e053      	b.n	8004b16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a6e:	4b2d      	ldr	r3, [pc, #180]	@ (8004b24 <HAL_RCC_ClockConfig+0x1c4>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f003 020c 	and.w	r2, r3, #12
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d1eb      	bne.n	8004a58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a80:	4b27      	ldr	r3, [pc, #156]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c0>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0307 	and.w	r3, r3, #7
 8004a88:	683a      	ldr	r2, [r7, #0]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d210      	bcs.n	8004ab0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a8e:	4b24      	ldr	r3, [pc, #144]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c0>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f023 0207 	bic.w	r2, r3, #7
 8004a96:	4922      	ldr	r1, [pc, #136]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c0>)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a9e:	4b20      	ldr	r3, [pc, #128]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c0>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0307 	and.w	r3, r3, #7
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d001      	beq.n	8004ab0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e032      	b.n	8004b16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d008      	beq.n	8004ace <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004abc:	4b19      	ldr	r3, [pc, #100]	@ (8004b24 <HAL_RCC_ClockConfig+0x1c4>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	4916      	ldr	r1, [pc, #88]	@ (8004b24 <HAL_RCC_ClockConfig+0x1c4>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0308 	and.w	r3, r3, #8
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d009      	beq.n	8004aee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ada:	4b12      	ldr	r3, [pc, #72]	@ (8004b24 <HAL_RCC_ClockConfig+0x1c4>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	00db      	lsls	r3, r3, #3
 8004ae8:	490e      	ldr	r1, [pc, #56]	@ (8004b24 <HAL_RCC_ClockConfig+0x1c4>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004aee:	f000 f821 	bl	8004b34 <HAL_RCC_GetSysClockFreq>
 8004af2:	4602      	mov	r2, r0
 8004af4:	4b0b      	ldr	r3, [pc, #44]	@ (8004b24 <HAL_RCC_ClockConfig+0x1c4>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	091b      	lsrs	r3, r3, #4
 8004afa:	f003 030f 	and.w	r3, r3, #15
 8004afe:	490a      	ldr	r1, [pc, #40]	@ (8004b28 <HAL_RCC_ClockConfig+0x1c8>)
 8004b00:	5ccb      	ldrb	r3, [r1, r3]
 8004b02:	fa22 f303 	lsr.w	r3, r2, r3
 8004b06:	4a09      	ldr	r2, [pc, #36]	@ (8004b2c <HAL_RCC_ClockConfig+0x1cc>)
 8004b08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b0a:	4b09      	ldr	r3, [pc, #36]	@ (8004b30 <HAL_RCC_ClockConfig+0x1d0>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7fe f954 	bl	8002dbc <HAL_InitTick>

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	40022000 	.word	0x40022000
 8004b24:	40021000 	.word	0x40021000
 8004b28:	08006440 	.word	0x08006440
 8004b2c:	20000090 	.word	0x20000090
 8004b30:	20000094 	.word	0x20000094

08004b34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b087      	sub	sp, #28
 8004b38:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60fb      	str	r3, [r7, #12]
 8004b3e:	2300      	movs	r3, #0
 8004b40:	60bb      	str	r3, [r7, #8]
 8004b42:	2300      	movs	r3, #0
 8004b44:	617b      	str	r3, [r7, #20]
 8004b46:	2300      	movs	r3, #0
 8004b48:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8004bc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f003 030c 	and.w	r3, r3, #12
 8004b5a:	2b04      	cmp	r3, #4
 8004b5c:	d002      	beq.n	8004b64 <HAL_RCC_GetSysClockFreq+0x30>
 8004b5e:	2b08      	cmp	r3, #8
 8004b60:	d003      	beq.n	8004b6a <HAL_RCC_GetSysClockFreq+0x36>
 8004b62:	e027      	b.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b64:	4b19      	ldr	r3, [pc, #100]	@ (8004bcc <HAL_RCC_GetSysClockFreq+0x98>)
 8004b66:	613b      	str	r3, [r7, #16]
      break;
 8004b68:	e027      	b.n	8004bba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	0c9b      	lsrs	r3, r3, #18
 8004b6e:	f003 030f 	and.w	r3, r3, #15
 8004b72:	4a17      	ldr	r2, [pc, #92]	@ (8004bd0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b74:	5cd3      	ldrb	r3, [r2, r3]
 8004b76:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d010      	beq.n	8004ba4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b82:	4b11      	ldr	r3, [pc, #68]	@ (8004bc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	0c5b      	lsrs	r3, r3, #17
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	4a11      	ldr	r2, [pc, #68]	@ (8004bd4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b8e:	5cd3      	ldrb	r3, [r2, r3]
 8004b90:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a0d      	ldr	r2, [pc, #52]	@ (8004bcc <HAL_RCC_GetSysClockFreq+0x98>)
 8004b96:	fb03 f202 	mul.w	r2, r3, r2
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba0:	617b      	str	r3, [r7, #20]
 8004ba2:	e004      	b.n	8004bae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a0c      	ldr	r2, [pc, #48]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004ba8:	fb02 f303 	mul.w	r3, r2, r3
 8004bac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	613b      	str	r3, [r7, #16]
      break;
 8004bb2:	e002      	b.n	8004bba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004bb4:	4b05      	ldr	r3, [pc, #20]	@ (8004bcc <HAL_RCC_GetSysClockFreq+0x98>)
 8004bb6:	613b      	str	r3, [r7, #16]
      break;
 8004bb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bba:	693b      	ldr	r3, [r7, #16]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	371c      	adds	r7, #28
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bc80      	pop	{r7}
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	40021000 	.word	0x40021000
 8004bcc:	007a1200 	.word	0x007a1200
 8004bd0:	08006458 	.word	0x08006458
 8004bd4:	08006468 	.word	0x08006468
 8004bd8:	003d0900 	.word	0x003d0900

08004bdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004be0:	4b02      	ldr	r3, [pc, #8]	@ (8004bec <HAL_RCC_GetHCLKFreq+0x10>)
 8004be2:	681b      	ldr	r3, [r3, #0]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bc80      	pop	{r7}
 8004bea:	4770      	bx	lr
 8004bec:	20000090 	.word	0x20000090

08004bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004bf4:	f7ff fff2 	bl	8004bdc <HAL_RCC_GetHCLKFreq>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	4b05      	ldr	r3, [pc, #20]	@ (8004c10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	0a1b      	lsrs	r3, r3, #8
 8004c00:	f003 0307 	and.w	r3, r3, #7
 8004c04:	4903      	ldr	r1, [pc, #12]	@ (8004c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c06:	5ccb      	ldrb	r3, [r1, r3]
 8004c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	40021000 	.word	0x40021000
 8004c14:	08006450 	.word	0x08006450

08004c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c1c:	f7ff ffde 	bl	8004bdc <HAL_RCC_GetHCLKFreq>
 8004c20:	4602      	mov	r2, r0
 8004c22:	4b05      	ldr	r3, [pc, #20]	@ (8004c38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	0adb      	lsrs	r3, r3, #11
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	4903      	ldr	r1, [pc, #12]	@ (8004c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c2e:	5ccb      	ldrb	r3, [r1, r3]
 8004c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	40021000 	.word	0x40021000
 8004c3c:	08006450 	.word	0x08006450

08004c40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c48:	4b0a      	ldr	r3, [pc, #40]	@ (8004c74 <RCC_Delay+0x34>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a0a      	ldr	r2, [pc, #40]	@ (8004c78 <RCC_Delay+0x38>)
 8004c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c52:	0a5b      	lsrs	r3, r3, #9
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	fb02 f303 	mul.w	r3, r2, r3
 8004c5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c5c:	bf00      	nop
  }
  while (Delay --);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	1e5a      	subs	r2, r3, #1
 8004c62:	60fa      	str	r2, [r7, #12]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1f9      	bne.n	8004c5c <RCC_Delay+0x1c>
}
 8004c68:	bf00      	nop
 8004c6a:	bf00      	nop
 8004c6c:	3714      	adds	r7, #20
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bc80      	pop	{r7}
 8004c72:	4770      	bx	lr
 8004c74:	20000090 	.word	0x20000090
 8004c78:	10624dd3 	.word	0x10624dd3

08004c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e041      	b.n	8004d12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d106      	bne.n	8004ca8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7fd ff08 	bl	8002ab8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2202      	movs	r2, #2
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	3304      	adds	r3, #4
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4610      	mov	r0, r2
 8004cbc:	f000 fc28 	bl	8005510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
	...

08004d1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d001      	beq.n	8004d34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e03a      	b.n	8004daa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2202      	movs	r2, #2
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68da      	ldr	r2, [r3, #12]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0201 	orr.w	r2, r2, #1
 8004d4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a18      	ldr	r2, [pc, #96]	@ (8004db4 <HAL_TIM_Base_Start_IT+0x98>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d00e      	beq.n	8004d74 <HAL_TIM_Base_Start_IT+0x58>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d5e:	d009      	beq.n	8004d74 <HAL_TIM_Base_Start_IT+0x58>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a14      	ldr	r2, [pc, #80]	@ (8004db8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d004      	beq.n	8004d74 <HAL_TIM_Base_Start_IT+0x58>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a13      	ldr	r2, [pc, #76]	@ (8004dbc <HAL_TIM_Base_Start_IT+0xa0>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d111      	bne.n	8004d98 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f003 0307 	and.w	r3, r3, #7
 8004d7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2b06      	cmp	r3, #6
 8004d84:	d010      	beq.n	8004da8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f042 0201 	orr.w	r2, r2, #1
 8004d94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d96:	e007      	b.n	8004da8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f042 0201 	orr.w	r2, r2, #1
 8004da6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bc80      	pop	{r7}
 8004db2:	4770      	bx	lr
 8004db4:	40012c00 	.word	0x40012c00
 8004db8:	40000400 	.word	0x40000400
 8004dbc:	40000800 	.word	0x40000800

08004dc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d101      	bne.n	8004dd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e041      	b.n	8004e56 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d106      	bne.n	8004dec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f7fd fe8c 	bl	8002b04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2202      	movs	r2, #2
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	3304      	adds	r3, #4
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	4610      	mov	r0, r2
 8004e00:	f000 fb86 	bl	8005510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3708      	adds	r7, #8
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
	...

08004e60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d109      	bne.n	8004e84 <HAL_TIM_PWM_Start+0x24>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	bf14      	ite	ne
 8004e7c:	2301      	movne	r3, #1
 8004e7e:	2300      	moveq	r3, #0
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	e022      	b.n	8004eca <HAL_TIM_PWM_Start+0x6a>
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	d109      	bne.n	8004e9e <HAL_TIM_PWM_Start+0x3e>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	bf14      	ite	ne
 8004e96:	2301      	movne	r3, #1
 8004e98:	2300      	moveq	r3, #0
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	e015      	b.n	8004eca <HAL_TIM_PWM_Start+0x6a>
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	2b08      	cmp	r3, #8
 8004ea2:	d109      	bne.n	8004eb8 <HAL_TIM_PWM_Start+0x58>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	bf14      	ite	ne
 8004eb0:	2301      	movne	r3, #1
 8004eb2:	2300      	moveq	r3, #0
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	e008      	b.n	8004eca <HAL_TIM_PWM_Start+0x6a>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	bf14      	ite	ne
 8004ec4:	2301      	movne	r3, #1
 8004ec6:	2300      	moveq	r3, #0
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d001      	beq.n	8004ed2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e05e      	b.n	8004f90 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d104      	bne.n	8004ee2 <HAL_TIM_PWM_Start+0x82>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2202      	movs	r2, #2
 8004edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ee0:	e013      	b.n	8004f0a <HAL_TIM_PWM_Start+0xaa>
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b04      	cmp	r3, #4
 8004ee6:	d104      	bne.n	8004ef2 <HAL_TIM_PWM_Start+0x92>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2202      	movs	r2, #2
 8004eec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ef0:	e00b      	b.n	8004f0a <HAL_TIM_PWM_Start+0xaa>
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b08      	cmp	r3, #8
 8004ef6:	d104      	bne.n	8004f02 <HAL_TIM_PWM_Start+0xa2>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2202      	movs	r2, #2
 8004efc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f00:	e003      	b.n	8004f0a <HAL_TIM_PWM_Start+0xaa>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2202      	movs	r2, #2
 8004f06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	6839      	ldr	r1, [r7, #0]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 fd7c 	bl	8005a10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a1e      	ldr	r2, [pc, #120]	@ (8004f98 <HAL_TIM_PWM_Start+0x138>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d107      	bne.n	8004f32 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f30:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a18      	ldr	r2, [pc, #96]	@ (8004f98 <HAL_TIM_PWM_Start+0x138>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d00e      	beq.n	8004f5a <HAL_TIM_PWM_Start+0xfa>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f44:	d009      	beq.n	8004f5a <HAL_TIM_PWM_Start+0xfa>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a14      	ldr	r2, [pc, #80]	@ (8004f9c <HAL_TIM_PWM_Start+0x13c>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d004      	beq.n	8004f5a <HAL_TIM_PWM_Start+0xfa>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a12      	ldr	r2, [pc, #72]	@ (8004fa0 <HAL_TIM_PWM_Start+0x140>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d111      	bne.n	8004f7e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f003 0307 	and.w	r3, r3, #7
 8004f64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2b06      	cmp	r3, #6
 8004f6a:	d010      	beq.n	8004f8e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f042 0201 	orr.w	r2, r2, #1
 8004f7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f7c:	e007      	b.n	8004f8e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f042 0201 	orr.w	r2, r2, #1
 8004f8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	40012c00 	.word	0x40012c00
 8004f9c:	40000400 	.word	0x40000400
 8004fa0:	40000800 	.word	0x40000800

08004fa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d122      	bne.n	8005000 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d11b      	bne.n	8005000 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f06f 0202 	mvn.w	r2, #2
 8004fd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	f003 0303 	and.w	r3, r3, #3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d003      	beq.n	8004fee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 fa76 	bl	80054d8 <HAL_TIM_IC_CaptureCallback>
 8004fec:	e005      	b.n	8004ffa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 fa69 	bl	80054c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 fa78 	bl	80054ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	f003 0304 	and.w	r3, r3, #4
 800500a:	2b04      	cmp	r3, #4
 800500c:	d122      	bne.n	8005054 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f003 0304 	and.w	r3, r3, #4
 8005018:	2b04      	cmp	r3, #4
 800501a:	d11b      	bne.n	8005054 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f06f 0204 	mvn.w	r2, #4
 8005024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2202      	movs	r2, #2
 800502a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005036:	2b00      	cmp	r3, #0
 8005038:	d003      	beq.n	8005042 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 fa4c 	bl	80054d8 <HAL_TIM_IC_CaptureCallback>
 8005040:	e005      	b.n	800504e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 fa3f 	bl	80054c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 fa4e 	bl	80054ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	f003 0308 	and.w	r3, r3, #8
 800505e:	2b08      	cmp	r3, #8
 8005060:	d122      	bne.n	80050a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	f003 0308 	and.w	r3, r3, #8
 800506c:	2b08      	cmp	r3, #8
 800506e:	d11b      	bne.n	80050a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f06f 0208 	mvn.w	r2, #8
 8005078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2204      	movs	r2, #4
 800507e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	f003 0303 	and.w	r3, r3, #3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d003      	beq.n	8005096 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 fa22 	bl	80054d8 <HAL_TIM_IC_CaptureCallback>
 8005094:	e005      	b.n	80050a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 fa15 	bl	80054c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 fa24 	bl	80054ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	f003 0310 	and.w	r3, r3, #16
 80050b2:	2b10      	cmp	r3, #16
 80050b4:	d122      	bne.n	80050fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f003 0310 	and.w	r3, r3, #16
 80050c0:	2b10      	cmp	r3, #16
 80050c2:	d11b      	bne.n	80050fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f06f 0210 	mvn.w	r2, #16
 80050cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2208      	movs	r2, #8
 80050d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d003      	beq.n	80050ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f9f8 	bl	80054d8 <HAL_TIM_IC_CaptureCallback>
 80050e8:	e005      	b.n	80050f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f9eb 	bl	80054c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 f9fa 	bl	80054ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b01      	cmp	r3, #1
 8005108:	d10e      	bne.n	8005128 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	2b01      	cmp	r3, #1
 8005116:	d107      	bne.n	8005128 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f06f 0201 	mvn.w	r2, #1
 8005120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f7fc fee0 	bl	8001ee8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005132:	2b80      	cmp	r3, #128	@ 0x80
 8005134:	d10e      	bne.n	8005154 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005140:	2b80      	cmp	r3, #128	@ 0x80
 8005142:	d107      	bne.n	8005154 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800514c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 fce9 	bl	8005b26 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800515e:	2b40      	cmp	r3, #64	@ 0x40
 8005160:	d10e      	bne.n	8005180 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800516c:	2b40      	cmp	r3, #64	@ 0x40
 800516e:	d107      	bne.n	8005180 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f9be 	bl	80054fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	f003 0320 	and.w	r3, r3, #32
 800518a:	2b20      	cmp	r3, #32
 800518c:	d10e      	bne.n	80051ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	f003 0320 	and.w	r3, r3, #32
 8005198:	2b20      	cmp	r3, #32
 800519a:	d107      	bne.n	80051ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f06f 0220 	mvn.w	r2, #32
 80051a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 fcb4 	bl	8005b14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051ac:	bf00      	nop
 80051ae:	3708      	adds	r7, #8
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051c0:	2300      	movs	r3, #0
 80051c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d101      	bne.n	80051d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051ce:	2302      	movs	r3, #2
 80051d0:	e0ae      	b.n	8005330 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b0c      	cmp	r3, #12
 80051de:	f200 809f 	bhi.w	8005320 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80051e2:	a201      	add	r2, pc, #4	@ (adr r2, 80051e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e8:	0800521d 	.word	0x0800521d
 80051ec:	08005321 	.word	0x08005321
 80051f0:	08005321 	.word	0x08005321
 80051f4:	08005321 	.word	0x08005321
 80051f8:	0800525d 	.word	0x0800525d
 80051fc:	08005321 	.word	0x08005321
 8005200:	08005321 	.word	0x08005321
 8005204:	08005321 	.word	0x08005321
 8005208:	0800529f 	.word	0x0800529f
 800520c:	08005321 	.word	0x08005321
 8005210:	08005321 	.word	0x08005321
 8005214:	08005321 	.word	0x08005321
 8005218:	080052df 	.word	0x080052df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68b9      	ldr	r1, [r7, #8]
 8005222:	4618      	mov	r0, r3
 8005224:	f000 f9d6 	bl	80055d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	699a      	ldr	r2, [r3, #24]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f042 0208 	orr.w	r2, r2, #8
 8005236:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	699a      	ldr	r2, [r3, #24]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f022 0204 	bic.w	r2, r2, #4
 8005246:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6999      	ldr	r1, [r3, #24]
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	691a      	ldr	r2, [r3, #16]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	430a      	orrs	r2, r1
 8005258:	619a      	str	r2, [r3, #24]
      break;
 800525a:	e064      	b.n	8005326 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68b9      	ldr	r1, [r7, #8]
 8005262:	4618      	mov	r0, r3
 8005264:	f000 fa1c 	bl	80056a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	699a      	ldr	r2, [r3, #24]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005276:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	699a      	ldr	r2, [r3, #24]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005286:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6999      	ldr	r1, [r3, #24]
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	021a      	lsls	r2, r3, #8
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	430a      	orrs	r2, r1
 800529a:	619a      	str	r2, [r3, #24]
      break;
 800529c:	e043      	b.n	8005326 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68b9      	ldr	r1, [r7, #8]
 80052a4:	4618      	mov	r0, r3
 80052a6:	f000 fa65 	bl	8005774 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	69da      	ldr	r2, [r3, #28]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f042 0208 	orr.w	r2, r2, #8
 80052b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	69da      	ldr	r2, [r3, #28]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f022 0204 	bic.w	r2, r2, #4
 80052c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	69d9      	ldr	r1, [r3, #28]
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	691a      	ldr	r2, [r3, #16]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	430a      	orrs	r2, r1
 80052da:	61da      	str	r2, [r3, #28]
      break;
 80052dc:	e023      	b.n	8005326 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68b9      	ldr	r1, [r7, #8]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f000 faaf 	bl	8005848 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	69da      	ldr	r2, [r3, #28]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	69da      	ldr	r2, [r3, #28]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005308:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	69d9      	ldr	r1, [r3, #28]
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	021a      	lsls	r2, r3, #8
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	430a      	orrs	r2, r1
 800531c:	61da      	str	r2, [r3, #28]
      break;
 800531e:	e002      	b.n	8005326 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	75fb      	strb	r3, [r7, #23]
      break;
 8005324:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800532e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005330:	4618      	mov	r0, r3
 8005332:	3718      	adds	r7, #24
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005342:	2300      	movs	r3, #0
 8005344:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800534c:	2b01      	cmp	r3, #1
 800534e:	d101      	bne.n	8005354 <HAL_TIM_ConfigClockSource+0x1c>
 8005350:	2302      	movs	r3, #2
 8005352:	e0b4      	b.n	80054be <HAL_TIM_ConfigClockSource+0x186>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2202      	movs	r2, #2
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005372:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800537a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800538c:	d03e      	beq.n	800540c <HAL_TIM_ConfigClockSource+0xd4>
 800538e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005392:	f200 8087 	bhi.w	80054a4 <HAL_TIM_ConfigClockSource+0x16c>
 8005396:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800539a:	f000 8086 	beq.w	80054aa <HAL_TIM_ConfigClockSource+0x172>
 800539e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053a2:	d87f      	bhi.n	80054a4 <HAL_TIM_ConfigClockSource+0x16c>
 80053a4:	2b70      	cmp	r3, #112	@ 0x70
 80053a6:	d01a      	beq.n	80053de <HAL_TIM_ConfigClockSource+0xa6>
 80053a8:	2b70      	cmp	r3, #112	@ 0x70
 80053aa:	d87b      	bhi.n	80054a4 <HAL_TIM_ConfigClockSource+0x16c>
 80053ac:	2b60      	cmp	r3, #96	@ 0x60
 80053ae:	d050      	beq.n	8005452 <HAL_TIM_ConfigClockSource+0x11a>
 80053b0:	2b60      	cmp	r3, #96	@ 0x60
 80053b2:	d877      	bhi.n	80054a4 <HAL_TIM_ConfigClockSource+0x16c>
 80053b4:	2b50      	cmp	r3, #80	@ 0x50
 80053b6:	d03c      	beq.n	8005432 <HAL_TIM_ConfigClockSource+0xfa>
 80053b8:	2b50      	cmp	r3, #80	@ 0x50
 80053ba:	d873      	bhi.n	80054a4 <HAL_TIM_ConfigClockSource+0x16c>
 80053bc:	2b40      	cmp	r3, #64	@ 0x40
 80053be:	d058      	beq.n	8005472 <HAL_TIM_ConfigClockSource+0x13a>
 80053c0:	2b40      	cmp	r3, #64	@ 0x40
 80053c2:	d86f      	bhi.n	80054a4 <HAL_TIM_ConfigClockSource+0x16c>
 80053c4:	2b30      	cmp	r3, #48	@ 0x30
 80053c6:	d064      	beq.n	8005492 <HAL_TIM_ConfigClockSource+0x15a>
 80053c8:	2b30      	cmp	r3, #48	@ 0x30
 80053ca:	d86b      	bhi.n	80054a4 <HAL_TIM_ConfigClockSource+0x16c>
 80053cc:	2b20      	cmp	r3, #32
 80053ce:	d060      	beq.n	8005492 <HAL_TIM_ConfigClockSource+0x15a>
 80053d0:	2b20      	cmp	r3, #32
 80053d2:	d867      	bhi.n	80054a4 <HAL_TIM_ConfigClockSource+0x16c>
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d05c      	beq.n	8005492 <HAL_TIM_ConfigClockSource+0x15a>
 80053d8:	2b10      	cmp	r3, #16
 80053da:	d05a      	beq.n	8005492 <HAL_TIM_ConfigClockSource+0x15a>
 80053dc:	e062      	b.n	80054a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053ee:	f000 faf0 	bl	80059d2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005400:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	609a      	str	r2, [r3, #8]
      break;
 800540a:	e04f      	b.n	80054ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800541c:	f000 fad9 	bl	80059d2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	689a      	ldr	r2, [r3, #8]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800542e:	609a      	str	r2, [r3, #8]
      break;
 8005430:	e03c      	b.n	80054ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800543e:	461a      	mov	r2, r3
 8005440:	f000 fa50 	bl	80058e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2150      	movs	r1, #80	@ 0x50
 800544a:	4618      	mov	r0, r3
 800544c:	f000 faa7 	bl	800599e <TIM_ITRx_SetConfig>
      break;
 8005450:	e02c      	b.n	80054ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800545e:	461a      	mov	r2, r3
 8005460:	f000 fa6e 	bl	8005940 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2160      	movs	r1, #96	@ 0x60
 800546a:	4618      	mov	r0, r3
 800546c:	f000 fa97 	bl	800599e <TIM_ITRx_SetConfig>
      break;
 8005470:	e01c      	b.n	80054ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800547e:	461a      	mov	r2, r3
 8005480:	f000 fa30 	bl	80058e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2140      	movs	r1, #64	@ 0x40
 800548a:	4618      	mov	r0, r3
 800548c:	f000 fa87 	bl	800599e <TIM_ITRx_SetConfig>
      break;
 8005490:	e00c      	b.n	80054ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4619      	mov	r1, r3
 800549c:	4610      	mov	r0, r2
 800549e:	f000 fa7e 	bl	800599e <TIM_ITRx_SetConfig>
      break;
 80054a2:	e003      	b.n	80054ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	73fb      	strb	r3, [r7, #15]
      break;
 80054a8:	e000      	b.n	80054ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80054aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80054bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b083      	sub	sp, #12
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054ce:	bf00      	nop
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bc80      	pop	{r7}
 80054d6:	4770      	bx	lr

080054d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bc80      	pop	{r7}
 80054e8:	4770      	bx	lr

080054ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b083      	sub	sp, #12
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054f2:	bf00      	nop
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bc80      	pop	{r7}
 80054fa:	4770      	bx	lr

080054fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	bc80      	pop	{r7}
 800550c:	4770      	bx	lr
	...

08005510 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a29      	ldr	r2, [pc, #164]	@ (80055c8 <TIM_Base_SetConfig+0xb8>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d00b      	beq.n	8005540 <TIM_Base_SetConfig+0x30>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800552e:	d007      	beq.n	8005540 <TIM_Base_SetConfig+0x30>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a26      	ldr	r2, [pc, #152]	@ (80055cc <TIM_Base_SetConfig+0xbc>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d003      	beq.n	8005540 <TIM_Base_SetConfig+0x30>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a25      	ldr	r2, [pc, #148]	@ (80055d0 <TIM_Base_SetConfig+0xc0>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d108      	bne.n	8005552 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005546:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	4313      	orrs	r3, r2
 8005550:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a1c      	ldr	r2, [pc, #112]	@ (80055c8 <TIM_Base_SetConfig+0xb8>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d00b      	beq.n	8005572 <TIM_Base_SetConfig+0x62>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005560:	d007      	beq.n	8005572 <TIM_Base_SetConfig+0x62>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a19      	ldr	r2, [pc, #100]	@ (80055cc <TIM_Base_SetConfig+0xbc>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d003      	beq.n	8005572 <TIM_Base_SetConfig+0x62>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a18      	ldr	r2, [pc, #96]	@ (80055d0 <TIM_Base_SetConfig+0xc0>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d108      	bne.n	8005584 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005578:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	4313      	orrs	r3, r2
 8005582:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	4313      	orrs	r3, r2
 8005590:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	689a      	ldr	r2, [r3, #8]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a07      	ldr	r2, [pc, #28]	@ (80055c8 <TIM_Base_SetConfig+0xb8>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d103      	bne.n	80055b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	691a      	ldr	r2, [r3, #16]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	615a      	str	r2, [r3, #20]
}
 80055be:	bf00      	nop
 80055c0:	3714      	adds	r7, #20
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bc80      	pop	{r7}
 80055c6:	4770      	bx	lr
 80055c8:	40012c00 	.word	0x40012c00
 80055cc:	40000400 	.word	0x40000400
 80055d0:	40000800 	.word	0x40000800

080055d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b087      	sub	sp, #28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a1b      	ldr	r3, [r3, #32]
 80055e8:	f023 0201 	bic.w	r2, r3, #1
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f023 0303 	bic.w	r3, r3, #3
 800560a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	4313      	orrs	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f023 0302 	bic.w	r3, r3, #2
 800561c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	4313      	orrs	r3, r2
 8005626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a1c      	ldr	r2, [pc, #112]	@ (800569c <TIM_OC1_SetConfig+0xc8>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d10c      	bne.n	800564a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	f023 0308 	bic.w	r3, r3, #8
 8005636:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	4313      	orrs	r3, r2
 8005640:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f023 0304 	bic.w	r3, r3, #4
 8005648:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a13      	ldr	r2, [pc, #76]	@ (800569c <TIM_OC1_SetConfig+0xc8>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d111      	bne.n	8005676 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005658:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005660:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	4313      	orrs	r3, r2
 800566a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	4313      	orrs	r3, r2
 8005674:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	621a      	str	r2, [r3, #32]
}
 8005690:	bf00      	nop
 8005692:	371c      	adds	r7, #28
 8005694:	46bd      	mov	sp, r7
 8005696:	bc80      	pop	{r7}
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	40012c00 	.word	0x40012c00

080056a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a1b      	ldr	r3, [r3, #32]
 80056b4:	f023 0210 	bic.w	r2, r3, #16
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	021b      	lsls	r3, r3, #8
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	f023 0320 	bic.w	r3, r3, #32
 80056ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	011b      	lsls	r3, r3, #4
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a1d      	ldr	r2, [pc, #116]	@ (8005770 <TIM_OC2_SetConfig+0xd0>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d10d      	bne.n	800571c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005706:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	011b      	lsls	r3, r3, #4
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	4313      	orrs	r3, r2
 8005712:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800571a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a14      	ldr	r2, [pc, #80]	@ (8005770 <TIM_OC2_SetConfig+0xd0>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d113      	bne.n	800574c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800572a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005732:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	695b      	ldr	r3, [r3, #20]
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	4313      	orrs	r3, r2
 800573e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	4313      	orrs	r3, r2
 800574a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	621a      	str	r2, [r3, #32]
}
 8005766:	bf00      	nop
 8005768:	371c      	adds	r7, #28
 800576a:	46bd      	mov	sp, r7
 800576c:	bc80      	pop	{r7}
 800576e:	4770      	bx	lr
 8005770:	40012c00 	.word	0x40012c00

08005774 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005774:	b480      	push	{r7}
 8005776:	b087      	sub	sp, #28
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a1b      	ldr	r3, [r3, #32]
 8005788:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f023 0303 	bic.w	r3, r3, #3
 80057aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	021b      	lsls	r3, r3, #8
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a1d      	ldr	r2, [pc, #116]	@ (8005844 <TIM_OC3_SetConfig+0xd0>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d10d      	bne.n	80057ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80057d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	021b      	lsls	r3, r3, #8
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80057ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a14      	ldr	r2, [pc, #80]	@ (8005844 <TIM_OC3_SetConfig+0xd0>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d113      	bne.n	800581e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005804:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	011b      	lsls	r3, r3, #4
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	4313      	orrs	r3, r2
 8005810:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	011b      	lsls	r3, r3, #4
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	4313      	orrs	r3, r2
 800581c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	621a      	str	r2, [r3, #32]
}
 8005838:	bf00      	nop
 800583a:	371c      	adds	r7, #28
 800583c:	46bd      	mov	sp, r7
 800583e:	bc80      	pop	{r7}
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	40012c00 	.word	0x40012c00

08005848 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005848:	b480      	push	{r7}
 800584a:	b087      	sub	sp, #28
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a1b      	ldr	r3, [r3, #32]
 800585c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800587e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	021b      	lsls	r3, r3, #8
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	4313      	orrs	r3, r2
 800588a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005892:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	031b      	lsls	r3, r3, #12
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	4313      	orrs	r3, r2
 800589e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a0f      	ldr	r2, [pc, #60]	@ (80058e0 <TIM_OC4_SetConfig+0x98>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d109      	bne.n	80058bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	019b      	lsls	r3, r3, #6
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	685a      	ldr	r2, [r3, #4]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	621a      	str	r2, [r3, #32]
}
 80058d6:	bf00      	nop
 80058d8:	371c      	adds	r7, #28
 80058da:	46bd      	mov	sp, r7
 80058dc:	bc80      	pop	{r7}
 80058de:	4770      	bx	lr
 80058e0:	40012c00 	.word	0x40012c00

080058e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b087      	sub	sp, #28
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6a1b      	ldr	r3, [r3, #32]
 80058f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	f023 0201 	bic.w	r2, r3, #1
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800590e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	011b      	lsls	r3, r3, #4
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	4313      	orrs	r3, r2
 8005918:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f023 030a 	bic.w	r3, r3, #10
 8005920:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	4313      	orrs	r3, r2
 8005928:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	621a      	str	r2, [r3, #32]
}
 8005936:	bf00      	nop
 8005938:	371c      	adds	r7, #28
 800593a:	46bd      	mov	sp, r7
 800593c:	bc80      	pop	{r7}
 800593e:	4770      	bx	lr

08005940 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005940:	b480      	push	{r7}
 8005942:	b087      	sub	sp, #28
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6a1b      	ldr	r3, [r3, #32]
 8005950:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	f023 0210 	bic.w	r2, r3, #16
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800596a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	031b      	lsls	r3, r3, #12
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	4313      	orrs	r3, r2
 8005974:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800597c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	011b      	lsls	r3, r3, #4
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	4313      	orrs	r3, r2
 8005986:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	621a      	str	r2, [r3, #32]
}
 8005994:	bf00      	nop
 8005996:	371c      	adds	r7, #28
 8005998:	46bd      	mov	sp, r7
 800599a:	bc80      	pop	{r7}
 800599c:	4770      	bx	lr

0800599e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800599e:	b480      	push	{r7}
 80059a0:	b085      	sub	sp, #20
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
 80059a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	f043 0307 	orr.w	r3, r3, #7
 80059c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	609a      	str	r2, [r3, #8]
}
 80059c8:	bf00      	nop
 80059ca:	3714      	adds	r7, #20
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bc80      	pop	{r7}
 80059d0:	4770      	bx	lr

080059d2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059d2:	b480      	push	{r7}
 80059d4:	b087      	sub	sp, #28
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	60f8      	str	r0, [r7, #12]
 80059da:	60b9      	str	r1, [r7, #8]
 80059dc:	607a      	str	r2, [r7, #4]
 80059de:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059ec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	021a      	lsls	r2, r3, #8
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	431a      	orrs	r2, r3
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	609a      	str	r2, [r3, #8]
}
 8005a06:	bf00      	nop
 8005a08:	371c      	adds	r7, #28
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bc80      	pop	{r7}
 8005a0e:	4770      	bx	lr

08005a10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b087      	sub	sp, #28
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	f003 031f 	and.w	r3, r3, #31
 8005a22:	2201      	movs	r2, #1
 8005a24:	fa02 f303 	lsl.w	r3, r2, r3
 8005a28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6a1a      	ldr	r2, [r3, #32]
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	43db      	mvns	r3, r3
 8005a32:	401a      	ands	r2, r3
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6a1a      	ldr	r2, [r3, #32]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f003 031f 	and.w	r3, r3, #31
 8005a42:	6879      	ldr	r1, [r7, #4]
 8005a44:	fa01 f303 	lsl.w	r3, r1, r3
 8005a48:	431a      	orrs	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	621a      	str	r2, [r3, #32]
}
 8005a4e:	bf00      	nop
 8005a50:	371c      	adds	r7, #28
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bc80      	pop	{r7}
 8005a56:	4770      	bx	lr

08005a58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d101      	bne.n	8005a70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	e046      	b.n	8005afe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a16      	ldr	r2, [pc, #88]	@ (8005b08 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d00e      	beq.n	8005ad2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005abc:	d009      	beq.n	8005ad2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a12      	ldr	r2, [pc, #72]	@ (8005b0c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d004      	beq.n	8005ad2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a10      	ldr	r2, [pc, #64]	@ (8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d10c      	bne.n	8005aec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ad8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bc80      	pop	{r7}
 8005b06:	4770      	bx	lr
 8005b08:	40012c00 	.word	0x40012c00
 8005b0c:	40000400 	.word	0x40000400
 8005b10:	40000800 	.word	0x40000800

08005b14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bc80      	pop	{r7}
 8005b24:	4770      	bx	lr

08005b26 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b26:	b480      	push	{r7}
 8005b28:	b083      	sub	sp, #12
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b2e:	bf00      	nop
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bc80      	pop	{r7}
 8005b36:	4770      	bx	lr

08005b38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e042      	b.n	8005bd0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d106      	bne.n	8005b64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f7fd f868 	bl	8002c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2224      	movs	r2, #36	@ 0x24
 8005b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68da      	ldr	r2, [r3, #12]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 f82b 	bl	8005bd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	691a      	ldr	r2, [r3, #16]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	695a      	ldr	r2, [r3, #20]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ba0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68da      	ldr	r2, [r3, #12]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005bb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2220      	movs	r2, #32
 8005bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68da      	ldr	r2, [r3, #12]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	689a      	ldr	r2, [r3, #8]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	695b      	ldr	r3, [r3, #20]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005c12:	f023 030c 	bic.w	r3, r3, #12
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	6812      	ldr	r2, [r2, #0]
 8005c1a:	68b9      	ldr	r1, [r7, #8]
 8005c1c:	430b      	orrs	r3, r1
 8005c1e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	699a      	ldr	r2, [r3, #24]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	430a      	orrs	r2, r1
 8005c34:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a2c      	ldr	r2, [pc, #176]	@ (8005cec <UART_SetConfig+0x114>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d103      	bne.n	8005c48 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005c40:	f7fe ffea 	bl	8004c18 <HAL_RCC_GetPCLK2Freq>
 8005c44:	60f8      	str	r0, [r7, #12]
 8005c46:	e002      	b.n	8005c4e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005c48:	f7fe ffd2 	bl	8004bf0 <HAL_RCC_GetPCLK1Freq>
 8005c4c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	4613      	mov	r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4413      	add	r3, r2
 8005c56:	009a      	lsls	r2, r3, #2
 8005c58:	441a      	add	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c64:	4a22      	ldr	r2, [pc, #136]	@ (8005cf0 <UART_SetConfig+0x118>)
 8005c66:	fba2 2303 	umull	r2, r3, r2, r3
 8005c6a:	095b      	lsrs	r3, r3, #5
 8005c6c:	0119      	lsls	r1, r3, #4
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	4613      	mov	r3, r2
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	4413      	add	r3, r2
 8005c76:	009a      	lsls	r2, r3, #2
 8005c78:	441a      	add	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c84:	4b1a      	ldr	r3, [pc, #104]	@ (8005cf0 <UART_SetConfig+0x118>)
 8005c86:	fba3 0302 	umull	r0, r3, r3, r2
 8005c8a:	095b      	lsrs	r3, r3, #5
 8005c8c:	2064      	movs	r0, #100	@ 0x64
 8005c8e:	fb00 f303 	mul.w	r3, r0, r3
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	011b      	lsls	r3, r3, #4
 8005c96:	3332      	adds	r3, #50	@ 0x32
 8005c98:	4a15      	ldr	r2, [pc, #84]	@ (8005cf0 <UART_SetConfig+0x118>)
 8005c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c9e:	095b      	lsrs	r3, r3, #5
 8005ca0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ca4:	4419      	add	r1, r3
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	4613      	mov	r3, r2
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	4413      	add	r3, r2
 8005cae:	009a      	lsls	r2, r3, #2
 8005cb0:	441a      	add	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8005cf0 <UART_SetConfig+0x118>)
 8005cbe:	fba3 0302 	umull	r0, r3, r3, r2
 8005cc2:	095b      	lsrs	r3, r3, #5
 8005cc4:	2064      	movs	r0, #100	@ 0x64
 8005cc6:	fb00 f303 	mul.w	r3, r0, r3
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	011b      	lsls	r3, r3, #4
 8005cce:	3332      	adds	r3, #50	@ 0x32
 8005cd0:	4a07      	ldr	r2, [pc, #28]	@ (8005cf0 <UART_SetConfig+0x118>)
 8005cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd6:	095b      	lsrs	r3, r3, #5
 8005cd8:	f003 020f 	and.w	r2, r3, #15
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	440a      	add	r2, r1
 8005ce2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005ce4:	bf00      	nop
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	40013800 	.word	0x40013800
 8005cf0:	51eb851f 	.word	0x51eb851f

08005cf4 <memset>:
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	4402      	add	r2, r0
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d100      	bne.n	8005cfe <memset+0xa>
 8005cfc:	4770      	bx	lr
 8005cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8005d02:	e7f9      	b.n	8005cf8 <memset+0x4>

08005d04 <__errno>:
 8005d04:	4b01      	ldr	r3, [pc, #4]	@ (8005d0c <__errno+0x8>)
 8005d06:	6818      	ldr	r0, [r3, #0]
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	2000009c 	.word	0x2000009c

08005d10 <__libc_init_array>:
 8005d10:	b570      	push	{r4, r5, r6, lr}
 8005d12:	2600      	movs	r6, #0
 8005d14:	4d0c      	ldr	r5, [pc, #48]	@ (8005d48 <__libc_init_array+0x38>)
 8005d16:	4c0d      	ldr	r4, [pc, #52]	@ (8005d4c <__libc_init_array+0x3c>)
 8005d18:	1b64      	subs	r4, r4, r5
 8005d1a:	10a4      	asrs	r4, r4, #2
 8005d1c:	42a6      	cmp	r6, r4
 8005d1e:	d109      	bne.n	8005d34 <__libc_init_array+0x24>
 8005d20:	f000 fb80 	bl	8006424 <_init>
 8005d24:	2600      	movs	r6, #0
 8005d26:	4d0a      	ldr	r5, [pc, #40]	@ (8005d50 <__libc_init_array+0x40>)
 8005d28:	4c0a      	ldr	r4, [pc, #40]	@ (8005d54 <__libc_init_array+0x44>)
 8005d2a:	1b64      	subs	r4, r4, r5
 8005d2c:	10a4      	asrs	r4, r4, #2
 8005d2e:	42a6      	cmp	r6, r4
 8005d30:	d105      	bne.n	8005d3e <__libc_init_array+0x2e>
 8005d32:	bd70      	pop	{r4, r5, r6, pc}
 8005d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d38:	4798      	blx	r3
 8005d3a:	3601      	adds	r6, #1
 8005d3c:	e7ee      	b.n	8005d1c <__libc_init_array+0xc>
 8005d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d42:	4798      	blx	r3
 8005d44:	3601      	adds	r6, #1
 8005d46:	e7f2      	b.n	8005d2e <__libc_init_array+0x1e>
 8005d48:	080064e0 	.word	0x080064e0
 8005d4c:	080064e0 	.word	0x080064e0
 8005d50:	080064e0 	.word	0x080064e0
 8005d54:	080064e4 	.word	0x080064e4

08005d58 <atan2>:
 8005d58:	f000 ba92 	b.w	8006280 <__ieee754_atan2>

08005d5c <sqrt>:
 8005d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d5e:	4606      	mov	r6, r0
 8005d60:	460f      	mov	r7, r1
 8005d62:	f000 f9b5 	bl	80060d0 <__ieee754_sqrt>
 8005d66:	4632      	mov	r2, r6
 8005d68:	4604      	mov	r4, r0
 8005d6a:	460d      	mov	r5, r1
 8005d6c:	463b      	mov	r3, r7
 8005d6e:	4630      	mov	r0, r6
 8005d70:	4639      	mov	r1, r7
 8005d72:	f7fa fe43 	bl	80009fc <__aeabi_dcmpun>
 8005d76:	b990      	cbnz	r0, 8005d9e <sqrt+0x42>
 8005d78:	2200      	movs	r2, #0
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	4630      	mov	r0, r6
 8005d7e:	4639      	mov	r1, r7
 8005d80:	f7fa fe14 	bl	80009ac <__aeabi_dcmplt>
 8005d84:	b158      	cbz	r0, 8005d9e <sqrt+0x42>
 8005d86:	f7ff ffbd 	bl	8005d04 <__errno>
 8005d8a:	2321      	movs	r3, #33	@ 0x21
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	6003      	str	r3, [r0, #0]
 8005d90:	2300      	movs	r3, #0
 8005d92:	4610      	mov	r0, r2
 8005d94:	4619      	mov	r1, r3
 8005d96:	f7fa fcc1 	bl	800071c <__aeabi_ddiv>
 8005d9a:	4604      	mov	r4, r0
 8005d9c:	460d      	mov	r5, r1
 8005d9e:	4620      	mov	r0, r4
 8005da0:	4629      	mov	r1, r5
 8005da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005da4:	0000      	movs	r0, r0
	...

08005da8 <atan>:
 8005da8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dac:	4bbc      	ldr	r3, [pc, #752]	@ (80060a0 <atan+0x2f8>)
 8005dae:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8005db2:	429e      	cmp	r6, r3
 8005db4:	4604      	mov	r4, r0
 8005db6:	460d      	mov	r5, r1
 8005db8:	468b      	mov	fp, r1
 8005dba:	d918      	bls.n	8005dee <atan+0x46>
 8005dbc:	4bb9      	ldr	r3, [pc, #740]	@ (80060a4 <atan+0x2fc>)
 8005dbe:	429e      	cmp	r6, r3
 8005dc0:	d801      	bhi.n	8005dc6 <atan+0x1e>
 8005dc2:	d109      	bne.n	8005dd8 <atan+0x30>
 8005dc4:	b140      	cbz	r0, 8005dd8 <atan+0x30>
 8005dc6:	4622      	mov	r2, r4
 8005dc8:	462b      	mov	r3, r5
 8005dca:	4620      	mov	r0, r4
 8005dcc:	4629      	mov	r1, r5
 8005dce:	f7fa f9c5 	bl	800015c <__adddf3>
 8005dd2:	4604      	mov	r4, r0
 8005dd4:	460d      	mov	r5, r1
 8005dd6:	e006      	b.n	8005de6 <atan+0x3e>
 8005dd8:	f1bb 0f00 	cmp.w	fp, #0
 8005ddc:	f340 8123 	ble.w	8006026 <atan+0x27e>
 8005de0:	a593      	add	r5, pc, #588	@ (adr r5, 8006030 <atan+0x288>)
 8005de2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005de6:	4620      	mov	r0, r4
 8005de8:	4629      	mov	r1, r5
 8005dea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dee:	4bae      	ldr	r3, [pc, #696]	@ (80060a8 <atan+0x300>)
 8005df0:	429e      	cmp	r6, r3
 8005df2:	d811      	bhi.n	8005e18 <atan+0x70>
 8005df4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8005df8:	429e      	cmp	r6, r3
 8005dfa:	d80a      	bhi.n	8005e12 <atan+0x6a>
 8005dfc:	a38e      	add	r3, pc, #568	@ (adr r3, 8006038 <atan+0x290>)
 8005dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e02:	f7fa f9ab 	bl	800015c <__adddf3>
 8005e06:	2200      	movs	r2, #0
 8005e08:	4ba8      	ldr	r3, [pc, #672]	@ (80060ac <atan+0x304>)
 8005e0a:	f7fa fded 	bl	80009e8 <__aeabi_dcmpgt>
 8005e0e:	2800      	cmp	r0, #0
 8005e10:	d1e9      	bne.n	8005de6 <atan+0x3e>
 8005e12:	f04f 3aff 	mov.w	sl, #4294967295
 8005e16:	e027      	b.n	8005e68 <atan+0xc0>
 8005e18:	f000 f956 	bl	80060c8 <fabs>
 8005e1c:	4ba4      	ldr	r3, [pc, #656]	@ (80060b0 <atan+0x308>)
 8005e1e:	4604      	mov	r4, r0
 8005e20:	429e      	cmp	r6, r3
 8005e22:	460d      	mov	r5, r1
 8005e24:	f200 80b8 	bhi.w	8005f98 <atan+0x1f0>
 8005e28:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8005e2c:	429e      	cmp	r6, r3
 8005e2e:	f200 809c 	bhi.w	8005f6a <atan+0x1c2>
 8005e32:	4602      	mov	r2, r0
 8005e34:	460b      	mov	r3, r1
 8005e36:	f7fa f991 	bl	800015c <__adddf3>
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	4b9b      	ldr	r3, [pc, #620]	@ (80060ac <atan+0x304>)
 8005e3e:	f7fa f98b 	bl	8000158 <__aeabi_dsub>
 8005e42:	2200      	movs	r2, #0
 8005e44:	4606      	mov	r6, r0
 8005e46:	460f      	mov	r7, r1
 8005e48:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005e4c:	4620      	mov	r0, r4
 8005e4e:	4629      	mov	r1, r5
 8005e50:	f7fa f984 	bl	800015c <__adddf3>
 8005e54:	4602      	mov	r2, r0
 8005e56:	460b      	mov	r3, r1
 8005e58:	4630      	mov	r0, r6
 8005e5a:	4639      	mov	r1, r7
 8005e5c:	f7fa fc5e 	bl	800071c <__aeabi_ddiv>
 8005e60:	f04f 0a00 	mov.w	sl, #0
 8005e64:	4604      	mov	r4, r0
 8005e66:	460d      	mov	r5, r1
 8005e68:	4622      	mov	r2, r4
 8005e6a:	462b      	mov	r3, r5
 8005e6c:	4620      	mov	r0, r4
 8005e6e:	4629      	mov	r1, r5
 8005e70:	f7fa fb2a 	bl	80004c8 <__aeabi_dmul>
 8005e74:	4602      	mov	r2, r0
 8005e76:	460b      	mov	r3, r1
 8005e78:	4680      	mov	r8, r0
 8005e7a:	4689      	mov	r9, r1
 8005e7c:	f7fa fb24 	bl	80004c8 <__aeabi_dmul>
 8005e80:	a36f      	add	r3, pc, #444	@ (adr r3, 8006040 <atan+0x298>)
 8005e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e86:	4606      	mov	r6, r0
 8005e88:	460f      	mov	r7, r1
 8005e8a:	f7fa fb1d 	bl	80004c8 <__aeabi_dmul>
 8005e8e:	a36e      	add	r3, pc, #440	@ (adr r3, 8006048 <atan+0x2a0>)
 8005e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e94:	f7fa f962 	bl	800015c <__adddf3>
 8005e98:	4632      	mov	r2, r6
 8005e9a:	463b      	mov	r3, r7
 8005e9c:	f7fa fb14 	bl	80004c8 <__aeabi_dmul>
 8005ea0:	a36b      	add	r3, pc, #428	@ (adr r3, 8006050 <atan+0x2a8>)
 8005ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea6:	f7fa f959 	bl	800015c <__adddf3>
 8005eaa:	4632      	mov	r2, r6
 8005eac:	463b      	mov	r3, r7
 8005eae:	f7fa fb0b 	bl	80004c8 <__aeabi_dmul>
 8005eb2:	a369      	add	r3, pc, #420	@ (adr r3, 8006058 <atan+0x2b0>)
 8005eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb8:	f7fa f950 	bl	800015c <__adddf3>
 8005ebc:	4632      	mov	r2, r6
 8005ebe:	463b      	mov	r3, r7
 8005ec0:	f7fa fb02 	bl	80004c8 <__aeabi_dmul>
 8005ec4:	a366      	add	r3, pc, #408	@ (adr r3, 8006060 <atan+0x2b8>)
 8005ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eca:	f7fa f947 	bl	800015c <__adddf3>
 8005ece:	4632      	mov	r2, r6
 8005ed0:	463b      	mov	r3, r7
 8005ed2:	f7fa faf9 	bl	80004c8 <__aeabi_dmul>
 8005ed6:	a364      	add	r3, pc, #400	@ (adr r3, 8006068 <atan+0x2c0>)
 8005ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005edc:	f7fa f93e 	bl	800015c <__adddf3>
 8005ee0:	4642      	mov	r2, r8
 8005ee2:	464b      	mov	r3, r9
 8005ee4:	f7fa faf0 	bl	80004c8 <__aeabi_dmul>
 8005ee8:	a361      	add	r3, pc, #388	@ (adr r3, 8006070 <atan+0x2c8>)
 8005eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eee:	4680      	mov	r8, r0
 8005ef0:	4689      	mov	r9, r1
 8005ef2:	4630      	mov	r0, r6
 8005ef4:	4639      	mov	r1, r7
 8005ef6:	f7fa fae7 	bl	80004c8 <__aeabi_dmul>
 8005efa:	a35f      	add	r3, pc, #380	@ (adr r3, 8006078 <atan+0x2d0>)
 8005efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f00:	f7fa f92a 	bl	8000158 <__aeabi_dsub>
 8005f04:	4632      	mov	r2, r6
 8005f06:	463b      	mov	r3, r7
 8005f08:	f7fa fade 	bl	80004c8 <__aeabi_dmul>
 8005f0c:	a35c      	add	r3, pc, #368	@ (adr r3, 8006080 <atan+0x2d8>)
 8005f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f12:	f7fa f921 	bl	8000158 <__aeabi_dsub>
 8005f16:	4632      	mov	r2, r6
 8005f18:	463b      	mov	r3, r7
 8005f1a:	f7fa fad5 	bl	80004c8 <__aeabi_dmul>
 8005f1e:	a35a      	add	r3, pc, #360	@ (adr r3, 8006088 <atan+0x2e0>)
 8005f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f24:	f7fa f918 	bl	8000158 <__aeabi_dsub>
 8005f28:	4632      	mov	r2, r6
 8005f2a:	463b      	mov	r3, r7
 8005f2c:	f7fa facc 	bl	80004c8 <__aeabi_dmul>
 8005f30:	a357      	add	r3, pc, #348	@ (adr r3, 8006090 <atan+0x2e8>)
 8005f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f36:	f7fa f90f 	bl	8000158 <__aeabi_dsub>
 8005f3a:	4632      	mov	r2, r6
 8005f3c:	463b      	mov	r3, r7
 8005f3e:	f7fa fac3 	bl	80004c8 <__aeabi_dmul>
 8005f42:	4602      	mov	r2, r0
 8005f44:	460b      	mov	r3, r1
 8005f46:	4640      	mov	r0, r8
 8005f48:	4649      	mov	r1, r9
 8005f4a:	f7fa f907 	bl	800015c <__adddf3>
 8005f4e:	4622      	mov	r2, r4
 8005f50:	462b      	mov	r3, r5
 8005f52:	f7fa fab9 	bl	80004c8 <__aeabi_dmul>
 8005f56:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	d144      	bne.n	8005fea <atan+0x242>
 8005f60:	4620      	mov	r0, r4
 8005f62:	4629      	mov	r1, r5
 8005f64:	f7fa f8f8 	bl	8000158 <__aeabi_dsub>
 8005f68:	e733      	b.n	8005dd2 <atan+0x2a>
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	4b4f      	ldr	r3, [pc, #316]	@ (80060ac <atan+0x304>)
 8005f6e:	f7fa f8f3 	bl	8000158 <__aeabi_dsub>
 8005f72:	2200      	movs	r2, #0
 8005f74:	4606      	mov	r6, r0
 8005f76:	460f      	mov	r7, r1
 8005f78:	4620      	mov	r0, r4
 8005f7a:	4629      	mov	r1, r5
 8005f7c:	4b4b      	ldr	r3, [pc, #300]	@ (80060ac <atan+0x304>)
 8005f7e:	f7fa f8ed 	bl	800015c <__adddf3>
 8005f82:	4602      	mov	r2, r0
 8005f84:	460b      	mov	r3, r1
 8005f86:	4630      	mov	r0, r6
 8005f88:	4639      	mov	r1, r7
 8005f8a:	f7fa fbc7 	bl	800071c <__aeabi_ddiv>
 8005f8e:	f04f 0a01 	mov.w	sl, #1
 8005f92:	4604      	mov	r4, r0
 8005f94:	460d      	mov	r5, r1
 8005f96:	e767      	b.n	8005e68 <atan+0xc0>
 8005f98:	4b46      	ldr	r3, [pc, #280]	@ (80060b4 <atan+0x30c>)
 8005f9a:	429e      	cmp	r6, r3
 8005f9c:	d21a      	bcs.n	8005fd4 <atan+0x22c>
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	4b45      	ldr	r3, [pc, #276]	@ (80060b8 <atan+0x310>)
 8005fa2:	f7fa f8d9 	bl	8000158 <__aeabi_dsub>
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	4606      	mov	r6, r0
 8005faa:	460f      	mov	r7, r1
 8005fac:	4620      	mov	r0, r4
 8005fae:	4629      	mov	r1, r5
 8005fb0:	4b41      	ldr	r3, [pc, #260]	@ (80060b8 <atan+0x310>)
 8005fb2:	f7fa fa89 	bl	80004c8 <__aeabi_dmul>
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	4b3c      	ldr	r3, [pc, #240]	@ (80060ac <atan+0x304>)
 8005fba:	f7fa f8cf 	bl	800015c <__adddf3>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	4630      	mov	r0, r6
 8005fc4:	4639      	mov	r1, r7
 8005fc6:	f7fa fba9 	bl	800071c <__aeabi_ddiv>
 8005fca:	f04f 0a02 	mov.w	sl, #2
 8005fce:	4604      	mov	r4, r0
 8005fd0:	460d      	mov	r5, r1
 8005fd2:	e749      	b.n	8005e68 <atan+0xc0>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	2000      	movs	r0, #0
 8005fda:	4938      	ldr	r1, [pc, #224]	@ (80060bc <atan+0x314>)
 8005fdc:	f7fa fb9e 	bl	800071c <__aeabi_ddiv>
 8005fe0:	f04f 0a03 	mov.w	sl, #3
 8005fe4:	4604      	mov	r4, r0
 8005fe6:	460d      	mov	r5, r1
 8005fe8:	e73e      	b.n	8005e68 <atan+0xc0>
 8005fea:	4b35      	ldr	r3, [pc, #212]	@ (80060c0 <atan+0x318>)
 8005fec:	4e35      	ldr	r6, [pc, #212]	@ (80060c4 <atan+0x31c>)
 8005fee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff6:	f7fa f8af 	bl	8000158 <__aeabi_dsub>
 8005ffa:	4622      	mov	r2, r4
 8005ffc:	462b      	mov	r3, r5
 8005ffe:	f7fa f8ab 	bl	8000158 <__aeabi_dsub>
 8006002:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006006:	4602      	mov	r2, r0
 8006008:	460b      	mov	r3, r1
 800600a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800600e:	f7fa f8a3 	bl	8000158 <__aeabi_dsub>
 8006012:	f1bb 0f00 	cmp.w	fp, #0
 8006016:	4604      	mov	r4, r0
 8006018:	460d      	mov	r5, r1
 800601a:	f6bf aee4 	bge.w	8005de6 <atan+0x3e>
 800601e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006022:	461d      	mov	r5, r3
 8006024:	e6df      	b.n	8005de6 <atan+0x3e>
 8006026:	a51c      	add	r5, pc, #112	@ (adr r5, 8006098 <atan+0x2f0>)
 8006028:	e9d5 4500 	ldrd	r4, r5, [r5]
 800602c:	e6db      	b.n	8005de6 <atan+0x3e>
 800602e:	bf00      	nop
 8006030:	54442d18 	.word	0x54442d18
 8006034:	3ff921fb 	.word	0x3ff921fb
 8006038:	8800759c 	.word	0x8800759c
 800603c:	7e37e43c 	.word	0x7e37e43c
 8006040:	e322da11 	.word	0xe322da11
 8006044:	3f90ad3a 	.word	0x3f90ad3a
 8006048:	24760deb 	.word	0x24760deb
 800604c:	3fa97b4b 	.word	0x3fa97b4b
 8006050:	a0d03d51 	.word	0xa0d03d51
 8006054:	3fb10d66 	.word	0x3fb10d66
 8006058:	c54c206e 	.word	0xc54c206e
 800605c:	3fb745cd 	.word	0x3fb745cd
 8006060:	920083ff 	.word	0x920083ff
 8006064:	3fc24924 	.word	0x3fc24924
 8006068:	5555550d 	.word	0x5555550d
 800606c:	3fd55555 	.word	0x3fd55555
 8006070:	2c6a6c2f 	.word	0x2c6a6c2f
 8006074:	bfa2b444 	.word	0xbfa2b444
 8006078:	52defd9a 	.word	0x52defd9a
 800607c:	3fadde2d 	.word	0x3fadde2d
 8006080:	af749a6d 	.word	0xaf749a6d
 8006084:	3fb3b0f2 	.word	0x3fb3b0f2
 8006088:	fe231671 	.word	0xfe231671
 800608c:	3fbc71c6 	.word	0x3fbc71c6
 8006090:	9998ebc4 	.word	0x9998ebc4
 8006094:	3fc99999 	.word	0x3fc99999
 8006098:	54442d18 	.word	0x54442d18
 800609c:	bff921fb 	.word	0xbff921fb
 80060a0:	440fffff 	.word	0x440fffff
 80060a4:	7ff00000 	.word	0x7ff00000
 80060a8:	3fdbffff 	.word	0x3fdbffff
 80060ac:	3ff00000 	.word	0x3ff00000
 80060b0:	3ff2ffff 	.word	0x3ff2ffff
 80060b4:	40038000 	.word	0x40038000
 80060b8:	3ff80000 	.word	0x3ff80000
 80060bc:	bff00000 	.word	0xbff00000
 80060c0:	08006470 	.word	0x08006470
 80060c4:	08006490 	.word	0x08006490

080060c8 <fabs>:
 80060c8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80060cc:	4619      	mov	r1, r3
 80060ce:	4770      	bx	lr

080060d0 <__ieee754_sqrt>:
 80060d0:	4a67      	ldr	r2, [pc, #412]	@ (8006270 <__ieee754_sqrt+0x1a0>)
 80060d2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d6:	438a      	bics	r2, r1
 80060d8:	4606      	mov	r6, r0
 80060da:	460f      	mov	r7, r1
 80060dc:	460b      	mov	r3, r1
 80060de:	4604      	mov	r4, r0
 80060e0:	d10e      	bne.n	8006100 <__ieee754_sqrt+0x30>
 80060e2:	4602      	mov	r2, r0
 80060e4:	f7fa f9f0 	bl	80004c8 <__aeabi_dmul>
 80060e8:	4602      	mov	r2, r0
 80060ea:	460b      	mov	r3, r1
 80060ec:	4630      	mov	r0, r6
 80060ee:	4639      	mov	r1, r7
 80060f0:	f7fa f834 	bl	800015c <__adddf3>
 80060f4:	4606      	mov	r6, r0
 80060f6:	460f      	mov	r7, r1
 80060f8:	4630      	mov	r0, r6
 80060fa:	4639      	mov	r1, r7
 80060fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006100:	2900      	cmp	r1, #0
 8006102:	dc0c      	bgt.n	800611e <__ieee754_sqrt+0x4e>
 8006104:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8006108:	4302      	orrs	r2, r0
 800610a:	d0f5      	beq.n	80060f8 <__ieee754_sqrt+0x28>
 800610c:	b189      	cbz	r1, 8006132 <__ieee754_sqrt+0x62>
 800610e:	4602      	mov	r2, r0
 8006110:	f7fa f822 	bl	8000158 <__aeabi_dsub>
 8006114:	4602      	mov	r2, r0
 8006116:	460b      	mov	r3, r1
 8006118:	f7fa fb00 	bl	800071c <__aeabi_ddiv>
 800611c:	e7ea      	b.n	80060f4 <__ieee754_sqrt+0x24>
 800611e:	150a      	asrs	r2, r1, #20
 8006120:	d115      	bne.n	800614e <__ieee754_sqrt+0x7e>
 8006122:	2100      	movs	r1, #0
 8006124:	e009      	b.n	800613a <__ieee754_sqrt+0x6a>
 8006126:	0ae3      	lsrs	r3, r4, #11
 8006128:	3a15      	subs	r2, #21
 800612a:	0564      	lsls	r4, r4, #21
 800612c:	2b00      	cmp	r3, #0
 800612e:	d0fa      	beq.n	8006126 <__ieee754_sqrt+0x56>
 8006130:	e7f7      	b.n	8006122 <__ieee754_sqrt+0x52>
 8006132:	460a      	mov	r2, r1
 8006134:	e7fa      	b.n	800612c <__ieee754_sqrt+0x5c>
 8006136:	005b      	lsls	r3, r3, #1
 8006138:	3101      	adds	r1, #1
 800613a:	02d8      	lsls	r0, r3, #11
 800613c:	d5fb      	bpl.n	8006136 <__ieee754_sqrt+0x66>
 800613e:	1e48      	subs	r0, r1, #1
 8006140:	1a12      	subs	r2, r2, r0
 8006142:	f1c1 0020 	rsb	r0, r1, #32
 8006146:	fa24 f000 	lsr.w	r0, r4, r0
 800614a:	4303      	orrs	r3, r0
 800614c:	408c      	lsls	r4, r1
 800614e:	2600      	movs	r6, #0
 8006150:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8006154:	2116      	movs	r1, #22
 8006156:	07d2      	lsls	r2, r2, #31
 8006158:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800615c:	4632      	mov	r2, r6
 800615e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006162:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006166:	bf5c      	itt	pl
 8006168:	005b      	lslpl	r3, r3, #1
 800616a:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800616e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006172:	bf58      	it	pl
 8006174:	0064      	lslpl	r4, r4, #1
 8006176:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800617a:	107f      	asrs	r7, r7, #1
 800617c:	0064      	lsls	r4, r4, #1
 800617e:	1815      	adds	r5, r2, r0
 8006180:	429d      	cmp	r5, r3
 8006182:	bfde      	ittt	le
 8006184:	182a      	addle	r2, r5, r0
 8006186:	1b5b      	suble	r3, r3, r5
 8006188:	1836      	addle	r6, r6, r0
 800618a:	0fe5      	lsrs	r5, r4, #31
 800618c:	3901      	subs	r1, #1
 800618e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8006192:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8006196:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800619a:	d1f0      	bne.n	800617e <__ieee754_sqrt+0xae>
 800619c:	460d      	mov	r5, r1
 800619e:	f04f 0a20 	mov.w	sl, #32
 80061a2:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80061a6:	429a      	cmp	r2, r3
 80061a8:	eb01 0c00 	add.w	ip, r1, r0
 80061ac:	db02      	blt.n	80061b4 <__ieee754_sqrt+0xe4>
 80061ae:	d113      	bne.n	80061d8 <__ieee754_sqrt+0x108>
 80061b0:	45a4      	cmp	ip, r4
 80061b2:	d811      	bhi.n	80061d8 <__ieee754_sqrt+0x108>
 80061b4:	f1bc 0f00 	cmp.w	ip, #0
 80061b8:	eb0c 0100 	add.w	r1, ip, r0
 80061bc:	da42      	bge.n	8006244 <__ieee754_sqrt+0x174>
 80061be:	2900      	cmp	r1, #0
 80061c0:	db40      	blt.n	8006244 <__ieee754_sqrt+0x174>
 80061c2:	f102 0e01 	add.w	lr, r2, #1
 80061c6:	1a9b      	subs	r3, r3, r2
 80061c8:	4672      	mov	r2, lr
 80061ca:	45a4      	cmp	ip, r4
 80061cc:	bf88      	it	hi
 80061ce:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80061d2:	eba4 040c 	sub.w	r4, r4, ip
 80061d6:	4405      	add	r5, r0
 80061d8:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 80061dc:	f1ba 0a01 	subs.w	sl, sl, #1
 80061e0:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 80061e4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80061e8:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80061ec:	d1db      	bne.n	80061a6 <__ieee754_sqrt+0xd6>
 80061ee:	431c      	orrs	r4, r3
 80061f0:	d01a      	beq.n	8006228 <__ieee754_sqrt+0x158>
 80061f2:	4c20      	ldr	r4, [pc, #128]	@ (8006274 <__ieee754_sqrt+0x1a4>)
 80061f4:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8006278 <__ieee754_sqrt+0x1a8>
 80061f8:	e9d4 0100 	ldrd	r0, r1, [r4]
 80061fc:	e9db 2300 	ldrd	r2, r3, [fp]
 8006200:	f7f9 ffaa 	bl	8000158 <__aeabi_dsub>
 8006204:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006208:	4602      	mov	r2, r0
 800620a:	460b      	mov	r3, r1
 800620c:	4640      	mov	r0, r8
 800620e:	4649      	mov	r1, r9
 8006210:	f7fa fbd6 	bl	80009c0 <__aeabi_dcmple>
 8006214:	b140      	cbz	r0, 8006228 <__ieee754_sqrt+0x158>
 8006216:	e9d4 0100 	ldrd	r0, r1, [r4]
 800621a:	e9db 2300 	ldrd	r2, r3, [fp]
 800621e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006222:	d111      	bne.n	8006248 <__ieee754_sqrt+0x178>
 8006224:	4655      	mov	r5, sl
 8006226:	3601      	adds	r6, #1
 8006228:	1072      	asrs	r2, r6, #1
 800622a:	086b      	lsrs	r3, r5, #1
 800622c:	07f1      	lsls	r1, r6, #31
 800622e:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8006232:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8006236:	bf48      	it	mi
 8006238:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800623c:	4618      	mov	r0, r3
 800623e:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8006242:	e757      	b.n	80060f4 <__ieee754_sqrt+0x24>
 8006244:	4696      	mov	lr, r2
 8006246:	e7be      	b.n	80061c6 <__ieee754_sqrt+0xf6>
 8006248:	f7f9 ff88 	bl	800015c <__adddf3>
 800624c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006250:	4602      	mov	r2, r0
 8006252:	460b      	mov	r3, r1
 8006254:	4640      	mov	r0, r8
 8006256:	4649      	mov	r1, r9
 8006258:	f7fa fba8 	bl	80009ac <__aeabi_dcmplt>
 800625c:	b120      	cbz	r0, 8006268 <__ieee754_sqrt+0x198>
 800625e:	1ca8      	adds	r0, r5, #2
 8006260:	bf08      	it	eq
 8006262:	3601      	addeq	r6, #1
 8006264:	3502      	adds	r5, #2
 8006266:	e7df      	b.n	8006228 <__ieee754_sqrt+0x158>
 8006268:	1c6b      	adds	r3, r5, #1
 800626a:	f023 0501 	bic.w	r5, r3, #1
 800626e:	e7db      	b.n	8006228 <__ieee754_sqrt+0x158>
 8006270:	7ff00000 	.word	0x7ff00000
 8006274:	200000f8 	.word	0x200000f8
 8006278:	200000f0 	.word	0x200000f0
 800627c:	00000000 	.word	0x00000000

08006280 <__ieee754_atan2>:
 8006280:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006284:	4617      	mov	r7, r2
 8006286:	4690      	mov	r8, r2
 8006288:	4699      	mov	r9, r3
 800628a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800628e:	427b      	negs	r3, r7
 8006290:	f8df a184 	ldr.w	sl, [pc, #388]	@ 8006418 <__ieee754_atan2+0x198>
 8006294:	433b      	orrs	r3, r7
 8006296:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800629a:	4553      	cmp	r3, sl
 800629c:	4604      	mov	r4, r0
 800629e:	460d      	mov	r5, r1
 80062a0:	d809      	bhi.n	80062b6 <__ieee754_atan2+0x36>
 80062a2:	4246      	negs	r6, r0
 80062a4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80062a8:	4306      	orrs	r6, r0
 80062aa:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 80062ae:	4556      	cmp	r6, sl
 80062b0:	468e      	mov	lr, r1
 80062b2:	4683      	mov	fp, r0
 80062b4:	d908      	bls.n	80062c8 <__ieee754_atan2+0x48>
 80062b6:	4642      	mov	r2, r8
 80062b8:	464b      	mov	r3, r9
 80062ba:	4620      	mov	r0, r4
 80062bc:	4629      	mov	r1, r5
 80062be:	f7f9 ff4d 	bl	800015c <__adddf3>
 80062c2:	4604      	mov	r4, r0
 80062c4:	460d      	mov	r5, r1
 80062c6:	e016      	b.n	80062f6 <__ieee754_atan2+0x76>
 80062c8:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 80062cc:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 80062d0:	433e      	orrs	r6, r7
 80062d2:	d103      	bne.n	80062dc <__ieee754_atan2+0x5c>
 80062d4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d8:	f7ff bd66 	b.w	8005da8 <atan>
 80062dc:	ea4f 76a9 	mov.w	r6, r9, asr #30
 80062e0:	f006 0602 	and.w	r6, r6, #2
 80062e4:	ea53 0b0b 	orrs.w	fp, r3, fp
 80062e8:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 80062ec:	d107      	bne.n	80062fe <__ieee754_atan2+0x7e>
 80062ee:	2e02      	cmp	r6, #2
 80062f0:	d064      	beq.n	80063bc <__ieee754_atan2+0x13c>
 80062f2:	2e03      	cmp	r6, #3
 80062f4:	d066      	beq.n	80063c4 <__ieee754_atan2+0x144>
 80062f6:	4620      	mov	r0, r4
 80062f8:	4629      	mov	r1, r5
 80062fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062fe:	4317      	orrs	r7, r2
 8006300:	d106      	bne.n	8006310 <__ieee754_atan2+0x90>
 8006302:	f1be 0f00 	cmp.w	lr, #0
 8006306:	da68      	bge.n	80063da <__ieee754_atan2+0x15a>
 8006308:	a537      	add	r5, pc, #220	@ (adr r5, 80063e8 <__ieee754_atan2+0x168>)
 800630a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800630e:	e7f2      	b.n	80062f6 <__ieee754_atan2+0x76>
 8006310:	4552      	cmp	r2, sl
 8006312:	d10f      	bne.n	8006334 <__ieee754_atan2+0xb4>
 8006314:	4293      	cmp	r3, r2
 8006316:	f106 36ff 	add.w	r6, r6, #4294967295
 800631a:	d107      	bne.n	800632c <__ieee754_atan2+0xac>
 800631c:	2e02      	cmp	r6, #2
 800631e:	d855      	bhi.n	80063cc <__ieee754_atan2+0x14c>
 8006320:	4b3e      	ldr	r3, [pc, #248]	@ (800641c <__ieee754_atan2+0x19c>)
 8006322:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006326:	e9d3 4500 	ldrd	r4, r5, [r3]
 800632a:	e7e4      	b.n	80062f6 <__ieee754_atan2+0x76>
 800632c:	2e02      	cmp	r6, #2
 800632e:	d851      	bhi.n	80063d4 <__ieee754_atan2+0x154>
 8006330:	4b3b      	ldr	r3, [pc, #236]	@ (8006420 <__ieee754_atan2+0x1a0>)
 8006332:	e7f6      	b.n	8006322 <__ieee754_atan2+0xa2>
 8006334:	4553      	cmp	r3, sl
 8006336:	d0e4      	beq.n	8006302 <__ieee754_atan2+0x82>
 8006338:	1a9b      	subs	r3, r3, r2
 800633a:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800633e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006342:	da21      	bge.n	8006388 <__ieee754_atan2+0x108>
 8006344:	f1b9 0f00 	cmp.w	r9, #0
 8006348:	da01      	bge.n	800634e <__ieee754_atan2+0xce>
 800634a:	323c      	adds	r2, #60	@ 0x3c
 800634c:	db20      	blt.n	8006390 <__ieee754_atan2+0x110>
 800634e:	4642      	mov	r2, r8
 8006350:	464b      	mov	r3, r9
 8006352:	4620      	mov	r0, r4
 8006354:	4629      	mov	r1, r5
 8006356:	f7fa f9e1 	bl	800071c <__aeabi_ddiv>
 800635a:	f7ff feb5 	bl	80060c8 <fabs>
 800635e:	f7ff fd23 	bl	8005da8 <atan>
 8006362:	4604      	mov	r4, r0
 8006364:	460d      	mov	r5, r1
 8006366:	2e01      	cmp	r6, #1
 8006368:	d015      	beq.n	8006396 <__ieee754_atan2+0x116>
 800636a:	2e02      	cmp	r6, #2
 800636c:	d017      	beq.n	800639e <__ieee754_atan2+0x11e>
 800636e:	2e00      	cmp	r6, #0
 8006370:	d0c1      	beq.n	80062f6 <__ieee754_atan2+0x76>
 8006372:	a31f      	add	r3, pc, #124	@ (adr r3, 80063f0 <__ieee754_atan2+0x170>)
 8006374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006378:	4620      	mov	r0, r4
 800637a:	4629      	mov	r1, r5
 800637c:	f7f9 feec 	bl	8000158 <__aeabi_dsub>
 8006380:	a31d      	add	r3, pc, #116	@ (adr r3, 80063f8 <__ieee754_atan2+0x178>)
 8006382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006386:	e016      	b.n	80063b6 <__ieee754_atan2+0x136>
 8006388:	a51d      	add	r5, pc, #116	@ (adr r5, 8006400 <__ieee754_atan2+0x180>)
 800638a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800638e:	e7ea      	b.n	8006366 <__ieee754_atan2+0xe6>
 8006390:	2400      	movs	r4, #0
 8006392:	2500      	movs	r5, #0
 8006394:	e7e7      	b.n	8006366 <__ieee754_atan2+0xe6>
 8006396:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 800639a:	461d      	mov	r5, r3
 800639c:	e7ab      	b.n	80062f6 <__ieee754_atan2+0x76>
 800639e:	a314      	add	r3, pc, #80	@ (adr r3, 80063f0 <__ieee754_atan2+0x170>)
 80063a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a4:	4620      	mov	r0, r4
 80063a6:	4629      	mov	r1, r5
 80063a8:	f7f9 fed6 	bl	8000158 <__aeabi_dsub>
 80063ac:	4602      	mov	r2, r0
 80063ae:	460b      	mov	r3, r1
 80063b0:	a111      	add	r1, pc, #68	@ (adr r1, 80063f8 <__ieee754_atan2+0x178>)
 80063b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063b6:	f7f9 fecf 	bl	8000158 <__aeabi_dsub>
 80063ba:	e782      	b.n	80062c2 <__ieee754_atan2+0x42>
 80063bc:	a50e      	add	r5, pc, #56	@ (adr r5, 80063f8 <__ieee754_atan2+0x178>)
 80063be:	e9d5 4500 	ldrd	r4, r5, [r5]
 80063c2:	e798      	b.n	80062f6 <__ieee754_atan2+0x76>
 80063c4:	a510      	add	r5, pc, #64	@ (adr r5, 8006408 <__ieee754_atan2+0x188>)
 80063c6:	e9d5 4500 	ldrd	r4, r5, [r5]
 80063ca:	e794      	b.n	80062f6 <__ieee754_atan2+0x76>
 80063cc:	a510      	add	r5, pc, #64	@ (adr r5, 8006410 <__ieee754_atan2+0x190>)
 80063ce:	e9d5 4500 	ldrd	r4, r5, [r5]
 80063d2:	e790      	b.n	80062f6 <__ieee754_atan2+0x76>
 80063d4:	2400      	movs	r4, #0
 80063d6:	2500      	movs	r5, #0
 80063d8:	e78d      	b.n	80062f6 <__ieee754_atan2+0x76>
 80063da:	a509      	add	r5, pc, #36	@ (adr r5, 8006400 <__ieee754_atan2+0x180>)
 80063dc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80063e0:	e789      	b.n	80062f6 <__ieee754_atan2+0x76>
 80063e2:	bf00      	nop
 80063e4:	f3af 8000 	nop.w
 80063e8:	54442d18 	.word	0x54442d18
 80063ec:	bff921fb 	.word	0xbff921fb
 80063f0:	33145c07 	.word	0x33145c07
 80063f4:	3ca1a626 	.word	0x3ca1a626
 80063f8:	54442d18 	.word	0x54442d18
 80063fc:	400921fb 	.word	0x400921fb
 8006400:	54442d18 	.word	0x54442d18
 8006404:	3ff921fb 	.word	0x3ff921fb
 8006408:	54442d18 	.word	0x54442d18
 800640c:	c00921fb 	.word	0xc00921fb
 8006410:	54442d18 	.word	0x54442d18
 8006414:	3fe921fb 	.word	0x3fe921fb
 8006418:	7ff00000 	.word	0x7ff00000
 800641c:	080064c8 	.word	0x080064c8
 8006420:	080064b0 	.word	0x080064b0

08006424 <_init>:
 8006424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006426:	bf00      	nop
 8006428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800642a:	bc08      	pop	{r3}
 800642c:	469e      	mov	lr, r3
 800642e:	4770      	bx	lr

08006430 <_fini>:
 8006430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006432:	bf00      	nop
 8006434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006436:	bc08      	pop	{r3}
 8006438:	469e      	mov	lr, r3
 800643a:	4770      	bx	lr
