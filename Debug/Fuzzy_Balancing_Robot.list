
Fuzzy_Balancing_Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000633c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08006450  08006450  00007450  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064f0  080064f0  00008100  2**0
                  CONTENTS
  4 .ARM          00000000  080064f0  080064f0  00008100  2**0
                  CONTENTS
  5 .preinit_array 00000000  080064f0  080064f0  00008100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064f0  080064f0  000074f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080064f4  080064f4  000074f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000100  20000000  080064f8  00008000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  20000100  080065f8  00008100  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000468  080065f8  00008468  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000efa1  00000000  00000000  00008129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fcc  00000000  00000000  000170ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  00019098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000be7  00000000  00000000  00019f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d5f  00000000  00000000  0001ab77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011441  00000000  00000000  000328d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cade  00000000  00000000  00043d17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d07f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045f4  00000000  00000000  000d0838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000d4e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000100 	.word	0x20000100
 800012c:	00000000 	.word	0x00000000
 8000130:	08006434 	.word	0x08006434

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000104 	.word	0x20000104
 800014c:	08006434 	.word	0x08006434

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	@ 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d36:	2afd      	cmp	r2, #253	@ 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	@ 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	@ 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_f2uiz>:
 8001070:	0042      	lsls	r2, r0, #1
 8001072:	d20e      	bcs.n	8001092 <__aeabi_f2uiz+0x22>
 8001074:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001078:	d30b      	bcc.n	8001092 <__aeabi_f2uiz+0x22>
 800107a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800107e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001082:	d409      	bmi.n	8001098 <__aeabi_f2uiz+0x28>
 8001084:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001088:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800108c:	fa23 f002 	lsr.w	r0, r3, r2
 8001090:	4770      	bx	lr
 8001092:	f04f 0000 	mov.w	r0, #0
 8001096:	4770      	bx	lr
 8001098:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800109c:	d101      	bne.n	80010a2 <__aeabi_f2uiz+0x32>
 800109e:	0242      	lsls	r2, r0, #9
 80010a0:	d102      	bne.n	80010a8 <__aeabi_f2uiz+0x38>
 80010a2:	f04f 30ff 	mov.w	r0, #4294967295
 80010a6:	4770      	bx	lr
 80010a8:	f04f 0000 	mov.w	r0, #0
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop

080010b0 <max>:
float c1, c2, c3; // parameters theta
float d1, d2, d3; // parameters theta_dot
float u_S, u_M, u_B;

float max(int num_args, ...) // VARIABLE MUST BE FLOAT (EX: 70.0, 980.0 NOT 70 OR 980) , IF NOT FLOAT --> MAX FUNC WILL FALSE!!
{
 80010b0:	b40f      	push	{r0, r1, r2, r3}
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b084      	sub	sp, #16
 80010b6:	af00      	add	r7, sp, #0
   float max;
   float current;
   va_list ap;
   va_start(ap, num_args);
 80010b8:	f107 031c 	add.w	r3, r7, #28
 80010bc:	603b      	str	r3, [r7, #0]
   for(int i = 0; i < num_args; i++)
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	e023      	b.n	800110c <max+0x5c>
   {
	   current = (float)va_arg(ap, double);  // Auto increment the pointer to receive the next argument (float) every call function
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	3307      	adds	r3, #7
 80010c8:	f023 0307 	bic.w	r3, r3, #7
 80010cc:	f103 0208 	add.w	r2, r3, #8
 80010d0:	603a      	str	r2, [r7, #0]
 80010d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d6:	4610      	mov	r0, r2
 80010d8:	4619      	mov	r1, r3
 80010da:	f7ff fca5 	bl	8000a28 <__aeabi_d2f>
 80010de:	4603      	mov	r3, r0
 80010e0:	607b      	str	r3, [r7, #4]
	   current += 0.0000001f; // Convert to float again :>
 80010e2:	4910      	ldr	r1, [pc, #64]	@ (8001124 <max+0x74>)
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff fcf5 	bl	8000ad4 <__addsf3>
 80010ea:	4603      	mov	r3, r0
 80010ec:	607b      	str	r3, [r7, #4]
	   if(i == 0 || current > max)
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d006      	beq.n	8001102 <max+0x52>
 80010f4:	68f9      	ldr	r1, [r7, #12]
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff ffb0 	bl	800105c <__aeabi_fcmpgt>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <max+0x56>
	   {
		   max = current;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	60fb      	str	r3, [r7, #12]
   for(int i = 0; i < num_args; i++)
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	3301      	adds	r3, #1
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68ba      	ldr	r2, [r7, #8]
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	429a      	cmp	r2, r3
 8001112:	dbd7      	blt.n	80010c4 <max+0x14>
	   }
   }
   va_end(ap);

   return max;
 8001114:	68fb      	ldr	r3, [r7, #12]
}
 8001116:	4618      	mov	r0, r3
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001120:	b004      	add	sp, #16
 8001122:	4770      	bx	lr
 8001124:	33d6bf95 	.word	0x33d6bf95

08001128 <min>:
float min(float a, float b) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
	return (a <= b) ? a : b;
 8001132:	6839      	ldr	r1, [r7, #0]
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff7d 	bl	8001034 <__aeabi_fcmple>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <min+0x1c>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	e000      	b.n	8001146 <min+0x1e>
 8001144:	683b      	ldr	r3, [r7, #0]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <mfTriang>:
//float max(float a, float b) {
//	return (a >= b) ? a : b;
//}


float mfTriang(float x, float a, float b, float c) {
 800114e:	b590      	push	{r4, r7, lr}
 8001150:	b087      	sub	sp, #28
 8001152:	af00      	add	r7, sp, #0
 8001154:	60f8      	str	r0, [r7, #12]
 8001156:	60b9      	str	r1, [r7, #8]
 8001158:	607a      	str	r2, [r7, #4]
 800115a:	603b      	str	r3, [r7, #0]
  float out_tri;

  if (x < a) {
 800115c:	68b9      	ldr	r1, [r7, #8]
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	f7ff ff5e 	bl	8001020 <__aeabi_fcmplt>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <mfTriang+0x24>
	  out_tri = 0;
 800116a:	f04f 0300 	mov.w	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
 8001170:	e042      	b.n	80011f8 <mfTriang+0xaa>
  } else if ((x >= a) && (x <= b)) {
 8001172:	68b9      	ldr	r1, [r7, #8]
 8001174:	68f8      	ldr	r0, [r7, #12]
 8001176:	f7ff ff67 	bl	8001048 <__aeabi_fcmpge>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d018      	beq.n	80011b2 <mfTriang+0x64>
 8001180:	6879      	ldr	r1, [r7, #4]
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f7ff ff56 	bl	8001034 <__aeabi_fcmple>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d011      	beq.n	80011b2 <mfTriang+0x64>
	  out_tri = (x - a) / (b - a);
 800118e:	68b9      	ldr	r1, [r7, #8]
 8001190:	68f8      	ldr	r0, [r7, #12]
 8001192:	f7ff fc9d 	bl	8000ad0 <__aeabi_fsub>
 8001196:	4603      	mov	r3, r0
 8001198:	461c      	mov	r4, r3
 800119a:	68b9      	ldr	r1, [r7, #8]
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff fc97 	bl	8000ad0 <__aeabi_fsub>
 80011a2:	4603      	mov	r3, r0
 80011a4:	4619      	mov	r1, r3
 80011a6:	4620      	mov	r0, r4
 80011a8:	f7ff fe50 	bl	8000e4c <__aeabi_fdiv>
 80011ac:	4603      	mov	r3, r0
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	e022      	b.n	80011f8 <mfTriang+0xaa>
  } else if ((x >= b) && (x <= c)) {
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	68f8      	ldr	r0, [r7, #12]
 80011b6:	f7ff ff47 	bl	8001048 <__aeabi_fcmpge>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d018      	beq.n	80011f2 <mfTriang+0xa4>
 80011c0:	6839      	ldr	r1, [r7, #0]
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f7ff ff36 	bl	8001034 <__aeabi_fcmple>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d011      	beq.n	80011f2 <mfTriang+0xa4>
	  out_tri = (c - x) / (c - b);
 80011ce:	68f9      	ldr	r1, [r7, #12]
 80011d0:	6838      	ldr	r0, [r7, #0]
 80011d2:	f7ff fc7d 	bl	8000ad0 <__aeabi_fsub>
 80011d6:	4603      	mov	r3, r0
 80011d8:	461c      	mov	r4, r3
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	6838      	ldr	r0, [r7, #0]
 80011de:	f7ff fc77 	bl	8000ad0 <__aeabi_fsub>
 80011e2:	4603      	mov	r3, r0
 80011e4:	4619      	mov	r1, r3
 80011e6:	4620      	mov	r0, r4
 80011e8:	f7ff fe30 	bl	8000e4c <__aeabi_fdiv>
 80011ec:	4603      	mov	r3, r0
 80011ee:	617b      	str	r3, [r7, #20]
 80011f0:	e002      	b.n	80011f8 <mfTriang+0xaa>
  } else {
	  out_tri = 0;
 80011f2:	f04f 0300 	mov.w	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
  }

  return out_tri;
 80011f8:	697b      	ldr	r3, [r7, #20]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	371c      	adds	r7, #28
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd90      	pop	{r4, r7, pc}

08001202 <mfTrap>:

float mfTrap(float x, float a, float b, float c, float d) {
 8001202:	b590      	push	{r4, r7, lr}
 8001204:	b087      	sub	sp, #28
 8001206:	af00      	add	r7, sp, #0
 8001208:	60f8      	str	r0, [r7, #12]
 800120a:	60b9      	str	r1, [r7, #8]
 800120c:	607a      	str	r2, [r7, #4]
 800120e:	603b      	str	r3, [r7, #0]
  float out_trap;

  if (x < a) {
 8001210:	68b9      	ldr	r1, [r7, #8]
 8001212:	68f8      	ldr	r0, [r7, #12]
 8001214:	f7ff ff04 	bl	8001020 <__aeabi_fcmplt>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <mfTrap+0x24>
	  out_trap = 0;
 800121e:	f04f 0300 	mov.w	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	e06a      	b.n	80012fc <mfTrap+0xfa>
  } else if ((x >= a) && (x <= b)) {
 8001226:	68b9      	ldr	r1, [r7, #8]
 8001228:	68f8      	ldr	r0, [r7, #12]
 800122a:	f7ff ff0d 	bl	8001048 <__aeabi_fcmpge>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d023      	beq.n	800127c <mfTrap+0x7a>
 8001234:	6879      	ldr	r1, [r7, #4]
 8001236:	68f8      	ldr	r0, [r7, #12]
 8001238:	f7ff fefc 	bl	8001034 <__aeabi_fcmple>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d01c      	beq.n	800127c <mfTrap+0x7a>
    if (a == b) {
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	68b8      	ldr	r0, [r7, #8]
 8001246:	f7ff fee1 	bl	800100c <__aeabi_fcmpeq>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <mfTrap+0x56>
    	out_trap = 1;
 8001250:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001254:	617b      	str	r3, [r7, #20]
    if (a == b) {
 8001256:	e051      	b.n	80012fc <mfTrap+0xfa>
    } else {
    	out_trap = (x - a) / (b - a);
 8001258:	68b9      	ldr	r1, [r7, #8]
 800125a:	68f8      	ldr	r0, [r7, #12]
 800125c:	f7ff fc38 	bl	8000ad0 <__aeabi_fsub>
 8001260:	4603      	mov	r3, r0
 8001262:	461c      	mov	r4, r3
 8001264:	68b9      	ldr	r1, [r7, #8]
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff fc32 	bl	8000ad0 <__aeabi_fsub>
 800126c:	4603      	mov	r3, r0
 800126e:	4619      	mov	r1, r3
 8001270:	4620      	mov	r0, r4
 8001272:	f7ff fdeb 	bl	8000e4c <__aeabi_fdiv>
 8001276:	4603      	mov	r3, r0
 8001278:	617b      	str	r3, [r7, #20]
    if (a == b) {
 800127a:	e03f      	b.n	80012fc <mfTrap+0xfa>
    }
  } else if ((x >= b) && (x <= c)) {
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	f7ff fee2 	bl	8001048 <__aeabi_fcmpge>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d00a      	beq.n	80012a0 <mfTrap+0x9e>
 800128a:	6839      	ldr	r1, [r7, #0]
 800128c:	68f8      	ldr	r0, [r7, #12]
 800128e:	f7ff fed1 	bl	8001034 <__aeabi_fcmple>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <mfTrap+0x9e>
	  out_trap = 1;
 8001298:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	e02d      	b.n	80012fc <mfTrap+0xfa>
  } else if ((x >= c) && (x <= d)) {
 80012a0:	6839      	ldr	r1, [r7, #0]
 80012a2:	68f8      	ldr	r0, [r7, #12]
 80012a4:	f7ff fed0 	bl	8001048 <__aeabi_fcmpge>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d023      	beq.n	80012f6 <mfTrap+0xf4>
 80012ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80012b0:	68f8      	ldr	r0, [r7, #12]
 80012b2:	f7ff febf 	bl	8001034 <__aeabi_fcmple>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d01c      	beq.n	80012f6 <mfTrap+0xf4>
    if (c == d) {
 80012bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80012be:	6838      	ldr	r0, [r7, #0]
 80012c0:	f7ff fea4 	bl	800100c <__aeabi_fcmpeq>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <mfTrap+0xd0>
    	out_trap = 1;
 80012ca:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80012ce:	617b      	str	r3, [r7, #20]
    if (c == d) {
 80012d0:	e014      	b.n	80012fc <mfTrap+0xfa>
    } else {
    	out_trap = (d - x) / (d - c);
 80012d2:	68f9      	ldr	r1, [r7, #12]
 80012d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80012d6:	f7ff fbfb 	bl	8000ad0 <__aeabi_fsub>
 80012da:	4603      	mov	r3, r0
 80012dc:	461c      	mov	r4, r3
 80012de:	6839      	ldr	r1, [r7, #0]
 80012e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80012e2:	f7ff fbf5 	bl	8000ad0 <__aeabi_fsub>
 80012e6:	4603      	mov	r3, r0
 80012e8:	4619      	mov	r1, r3
 80012ea:	4620      	mov	r0, r4
 80012ec:	f7ff fdae 	bl	8000e4c <__aeabi_fdiv>
 80012f0:	4603      	mov	r3, r0
 80012f2:	617b      	str	r3, [r7, #20]
    if (c == d) {
 80012f4:	e002      	b.n	80012fc <mfTrap+0xfa>
    }
  } else {
	  out_trap = 0;
 80012f6:	f04f 0300 	mov.w	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
  }

  return out_trap;
 80012fc:	697b      	ldr	r3, [r7, #20]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	371c      	adds	r7, #28
 8001302:	46bd      	mov	sp, r7
 8001304:	bd90      	pop	{r4, r7, pc}
	...

08001308 <run_fuzzy>:

float run_fuzzy(float x1, float x2) {
 8001308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800130c:	b0bb      	sub	sp, #236	@ 0xec
 800130e:	af08      	add	r7, sp, #32
 8001310:	60f8      	str	r0, [r7, #12]
 8001312:	60b9      	str	r1, [r7, #8]
  Theta_struct theta;
  Thetadot_struct theta_dot;
  Uk_struct u_dot;

  // parameters theta
  c1 = 0.4f;
 8001314:	4ba8      	ldr	r3, [pc, #672]	@ (80015b8 <run_fuzzy+0x2b0>)
 8001316:	4aa9      	ldr	r2, [pc, #676]	@ (80015bc <run_fuzzy+0x2b4>)
 8001318:	601a      	str	r2, [r3, #0]
  c2 = 0.25f;
 800131a:	4ba9      	ldr	r3, [pc, #676]	@ (80015c0 <run_fuzzy+0x2b8>)
 800131c:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 8001320:	601a      	str	r2, [r3, #0]
  c3 = 0.07f;
 8001322:	4ba8      	ldr	r3, [pc, #672]	@ (80015c4 <run_fuzzy+0x2bc>)
 8001324:	4aa8      	ldr	r2, [pc, #672]	@ (80015c8 <run_fuzzy+0x2c0>)
 8001326:	601a      	str	r2, [r3, #0]

  theta.NB = mfTrap(x1, -5.0f, -1.0f, -c1, -c2 ); // ve hinh dinh nghia cac gia tri ngon ngu cua bien NB,NS,... (theta)
 8001328:	4ba3      	ldr	r3, [pc, #652]	@ (80015b8 <run_fuzzy+0x2b0>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 8001330:	4ba3      	ldr	r3, [pc, #652]	@ (80015c0 <run_fuzzy+0x2b8>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	4613      	mov	r3, r2
 800133c:	4aa3      	ldr	r2, [pc, #652]	@ (80015cc <run_fuzzy+0x2c4>)
 800133e:	49a4      	ldr	r1, [pc, #656]	@ (80015d0 <run_fuzzy+0x2c8>)
 8001340:	68f8      	ldr	r0, [r7, #12]
 8001342:	f7ff ff5e 	bl	8001202 <mfTrap>
 8001346:	4603      	mov	r3, r0
 8001348:	647b      	str	r3, [r7, #68]	@ 0x44
  theta.NS = mfTrap(x1, -c1, -c2 , -c3 , 0);
 800134a:	4b9b      	ldr	r3, [pc, #620]	@ (80015b8 <run_fuzzy+0x2b0>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f083 4100 	eor.w	r1, r3, #2147483648	@ 0x80000000
 8001352:	4b9b      	ldr	r3, [pc, #620]	@ (80015c0 <run_fuzzy+0x2b8>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 800135a:	4b9a      	ldr	r3, [pc, #616]	@ (80015c4 <run_fuzzy+0x2bc>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001362:	f04f 0000 	mov.w	r0, #0
 8001366:	9000      	str	r0, [sp, #0]
 8001368:	68f8      	ldr	r0, [r7, #12]
 800136a:	f7ff ff4a 	bl	8001202 <mfTrap>
 800136e:	4603      	mov	r3, r0
 8001370:	64bb      	str	r3, [r7, #72]	@ 0x48
  theta.ZE = mfTrap(x1, -c2 , -c3 , c3 - 0.055, c2 - 0.18);
 8001372:	4b93      	ldr	r3, [pc, #588]	@ (80015c0 <run_fuzzy+0x2b8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 800137a:	4b92      	ldr	r3, [pc, #584]	@ (80015c4 <run_fuzzy+0x2bc>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001382:	4b90      	ldr	r3, [pc, #576]	@ (80015c4 <run_fuzzy+0x2bc>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f846 	bl	8000418 <__aeabi_f2d>
 800138c:	a386      	add	r3, pc, #536	@ (adr r3, 80015a8 <run_fuzzy+0x2a0>)
 800138e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001392:	f7fe fee1 	bl	8000158 <__aeabi_dsub>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	4610      	mov	r0, r2
 800139c:	4619      	mov	r1, r3
 800139e:	f7ff fb43 	bl	8000a28 <__aeabi_d2f>
 80013a2:	4606      	mov	r6, r0
 80013a4:	4b86      	ldr	r3, [pc, #536]	@ (80015c0 <run_fuzzy+0x2b8>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f835 	bl	8000418 <__aeabi_f2d>
 80013ae:	a380      	add	r3, pc, #512	@ (adr r3, 80015b0 <run_fuzzy+0x2a8>)
 80013b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b4:	f7fe fed0 	bl	8000158 <__aeabi_dsub>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4610      	mov	r0, r2
 80013be:	4619      	mov	r1, r3
 80013c0:	f7ff fb32 	bl	8000a28 <__aeabi_d2f>
 80013c4:	4603      	mov	r3, r0
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	4633      	mov	r3, r6
 80013ca:	462a      	mov	r2, r5
 80013cc:	4621      	mov	r1, r4
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	f7ff ff17 	bl	8001202 <mfTrap>
 80013d4:	4603      	mov	r3, r0
 80013d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  theta.PS = mfTrap(x1, 0, c3 - 0.055, c2 - 0.18, c1 - 0.18);
 80013d8:	4b7a      	ldr	r3, [pc, #488]	@ (80015c4 <run_fuzzy+0x2bc>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f81b 	bl	8000418 <__aeabi_f2d>
 80013e2:	a371      	add	r3, pc, #452	@ (adr r3, 80015a8 <run_fuzzy+0x2a0>)
 80013e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e8:	f7fe feb6 	bl	8000158 <__aeabi_dsub>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	4610      	mov	r0, r2
 80013f2:	4619      	mov	r1, r3
 80013f4:	f7ff fb18 	bl	8000a28 <__aeabi_d2f>
 80013f8:	4604      	mov	r4, r0
 80013fa:	4b71      	ldr	r3, [pc, #452]	@ (80015c0 <run_fuzzy+0x2b8>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f80a 	bl	8000418 <__aeabi_f2d>
 8001404:	a36a      	add	r3, pc, #424	@ (adr r3, 80015b0 <run_fuzzy+0x2a8>)
 8001406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140a:	f7fe fea5 	bl	8000158 <__aeabi_dsub>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4610      	mov	r0, r2
 8001414:	4619      	mov	r1, r3
 8001416:	f7ff fb07 	bl	8000a28 <__aeabi_d2f>
 800141a:	4605      	mov	r5, r0
 800141c:	4b66      	ldr	r3, [pc, #408]	@ (80015b8 <run_fuzzy+0x2b0>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f7fe fff9 	bl	8000418 <__aeabi_f2d>
 8001426:	a362      	add	r3, pc, #392	@ (adr r3, 80015b0 <run_fuzzy+0x2a8>)
 8001428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142c:	f7fe fe94 	bl	8000158 <__aeabi_dsub>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4610      	mov	r0, r2
 8001436:	4619      	mov	r1, r3
 8001438:	f7ff faf6 	bl	8000a28 <__aeabi_d2f>
 800143c:	4603      	mov	r3, r0
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	462b      	mov	r3, r5
 8001442:	4622      	mov	r2, r4
 8001444:	f04f 0100 	mov.w	r1, #0
 8001448:	68f8      	ldr	r0, [r7, #12]
 800144a:	f7ff feda 	bl	8001202 <mfTrap>
 800144e:	4603      	mov	r3, r0
 8001450:	653b      	str	r3, [r7, #80]	@ 0x50
  theta.PB = mfTrap(x1, c2 - 0.18, c1 - 0.18, 1.0f, 5.0f);
 8001452:	4b5b      	ldr	r3, [pc, #364]	@ (80015c0 <run_fuzzy+0x2b8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f7fe ffde 	bl	8000418 <__aeabi_f2d>
 800145c:	a354      	add	r3, pc, #336	@ (adr r3, 80015b0 <run_fuzzy+0x2a8>)
 800145e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001462:	f7fe fe79 	bl	8000158 <__aeabi_dsub>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4610      	mov	r0, r2
 800146c:	4619      	mov	r1, r3
 800146e:	f7ff fadb 	bl	8000a28 <__aeabi_d2f>
 8001472:	4604      	mov	r4, r0
 8001474:	4b50      	ldr	r3, [pc, #320]	@ (80015b8 <run_fuzzy+0x2b0>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f7fe ffcd 	bl	8000418 <__aeabi_f2d>
 800147e:	a34c      	add	r3, pc, #304	@ (adr r3, 80015b0 <run_fuzzy+0x2a8>)
 8001480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001484:	f7fe fe68 	bl	8000158 <__aeabi_dsub>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4610      	mov	r0, r2
 800148e:	4619      	mov	r1, r3
 8001490:	f7ff faca 	bl	8000a28 <__aeabi_d2f>
 8001494:	4602      	mov	r2, r0
 8001496:	4b4f      	ldr	r3, [pc, #316]	@ (80015d4 <run_fuzzy+0x2cc>)
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800149e:	4621      	mov	r1, r4
 80014a0:	68f8      	ldr	r0, [r7, #12]
 80014a2:	f7ff feae 	bl	8001202 <mfTrap>
 80014a6:	4603      	mov	r3, r0
 80014a8:	657b      	str	r3, [r7, #84]	@ 0x54

  // parameters theta_dot
  d1 = 0.18f;
 80014aa:	4b4b      	ldr	r3, [pc, #300]	@ (80015d8 <run_fuzzy+0x2d0>)
 80014ac:	4a4b      	ldr	r2, [pc, #300]	@ (80015dc <run_fuzzy+0x2d4>)
 80014ae:	601a      	str	r2, [r3, #0]
  d2 = 0.12f;
 80014b0:	4b4b      	ldr	r3, [pc, #300]	@ (80015e0 <run_fuzzy+0x2d8>)
 80014b2:	4a4c      	ldr	r2, [pc, #304]	@ (80015e4 <run_fuzzy+0x2dc>)
 80014b4:	601a      	str	r2, [r3, #0]
  d3 = 0.07f;
 80014b6:	4b4c      	ldr	r3, [pc, #304]	@ (80015e8 <run_fuzzy+0x2e0>)
 80014b8:	4a43      	ldr	r2, [pc, #268]	@ (80015c8 <run_fuzzy+0x2c0>)
 80014ba:	601a      	str	r2, [r3, #0]

  theta_dot.NB = mfTrap(x1, -5.0f, -1.0f, -d1, -d2); // ve hinh dinh nghia cac gia tri ngon ngu cua bien NB,NS,... (thetadot)
 80014bc:	4b46      	ldr	r3, [pc, #280]	@ (80015d8 <run_fuzzy+0x2d0>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 80014c4:	4b46      	ldr	r3, [pc, #280]	@ (80015e0 <run_fuzzy+0x2d8>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	4613      	mov	r3, r2
 80014d0:	4a3e      	ldr	r2, [pc, #248]	@ (80015cc <run_fuzzy+0x2c4>)
 80014d2:	493f      	ldr	r1, [pc, #252]	@ (80015d0 <run_fuzzy+0x2c8>)
 80014d4:	68f8      	ldr	r0, [r7, #12]
 80014d6:	f7ff fe94 	bl	8001202 <mfTrap>
 80014da:	4603      	mov	r3, r0
 80014dc:	633b      	str	r3, [r7, #48]	@ 0x30
  theta_dot.NS = mfTriang(x2, -1.0f, -d2, -d3);
 80014de:	4b40      	ldr	r3, [pc, #256]	@ (80015e0 <run_fuzzy+0x2d8>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 80014e6:	4b40      	ldr	r3, [pc, #256]	@ (80015e8 <run_fuzzy+0x2e0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80014ee:	4937      	ldr	r1, [pc, #220]	@ (80015cc <run_fuzzy+0x2c4>)
 80014f0:	68b8      	ldr	r0, [r7, #8]
 80014f2:	f7ff fe2c 	bl	800114e <mfTriang>
 80014f6:	4603      	mov	r3, r0
 80014f8:	637b      	str	r3, [r7, #52]	@ 0x34
  theta_dot.ZE = mfTriang(x2, -d3, 0, d3);
 80014fa:	4b3b      	ldr	r3, [pc, #236]	@ (80015e8 <run_fuzzy+0x2e0>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f083 4100 	eor.w	r1, r3, #2147483648	@ 0x80000000
 8001502:	4b39      	ldr	r3, [pc, #228]	@ (80015e8 <run_fuzzy+0x2e0>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	68b8      	ldr	r0, [r7, #8]
 800150c:	f7ff fe1f 	bl	800114e <mfTriang>
 8001510:	4603      	mov	r3, r0
 8001512:	63bb      	str	r3, [r7, #56]	@ 0x38
  theta_dot.PS = mfTriang(x2, d3, d2, 1.0f);
 8001514:	4b34      	ldr	r3, [pc, #208]	@ (80015e8 <run_fuzzy+0x2e0>)
 8001516:	6819      	ldr	r1, [r3, #0]
 8001518:	4b31      	ldr	r3, [pc, #196]	@ (80015e0 <run_fuzzy+0x2d8>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001520:	68b8      	ldr	r0, [r7, #8]
 8001522:	f7ff fe14 	bl	800114e <mfTriang>
 8001526:	4603      	mov	r3, r0
 8001528:	63fb      	str	r3, [r7, #60]	@ 0x3c
  theta_dot.PB = mfTrap(x1, d2, d1, 1.0f, 5.0f);
 800152a:	4b2d      	ldr	r3, [pc, #180]	@ (80015e0 <run_fuzzy+0x2d8>)
 800152c:	6819      	ldr	r1, [r3, #0]
 800152e:	4b2a      	ldr	r3, [pc, #168]	@ (80015d8 <run_fuzzy+0x2d0>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	4b28      	ldr	r3, [pc, #160]	@ (80015d4 <run_fuzzy+0x2cc>)
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	f7ff fe61 	bl	8001202 <mfTrap>
 8001540:	4603      	mov	r3, r0
 8001542:	643b      	str	r3, [r7, #64]	@ 0x40

  // calculate uk_fuzzy (-1->1) base on MAX-MIN, "and" => MIN

  r[0] = min(theta.NB, theta_dot.NB); // NB
 8001544:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001546:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001548:	4611      	mov	r1, r2
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff fdec 	bl	8001128 <min>
 8001550:	4603      	mov	r3, r0
 8001552:	65bb      	str	r3, [r7, #88]	@ 0x58

  r[1] = min(theta.NS, theta_dot.NB); // NB
 8001554:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001556:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fde4 	bl	8001128 <min>
 8001560:	4603      	mov	r3, r0
 8001562:	65fb      	str	r3, [r7, #92]	@ 0x5c

  r[2] = min(theta.ZE, theta_dot.NB); // NM
 8001564:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001566:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001568:	4611      	mov	r1, r2
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fddc 	bl	8001128 <min>
 8001570:	4603      	mov	r3, r0
 8001572:	663b      	str	r3, [r7, #96]	@ 0x60

  r[3] = min(theta.PS, theta_dot.NB); // NS
 8001574:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001576:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001578:	4611      	mov	r1, r2
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fdd4 	bl	8001128 <min>
 8001580:	4603      	mov	r3, r0
 8001582:	667b      	str	r3, [r7, #100]	@ 0x64

  r[4] = min(theta.PB, theta_dot.NB); // ZE
 8001584:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001586:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001588:	4611      	mov	r1, r2
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fdcc 	bl	8001128 <min>
 8001590:	4603      	mov	r3, r0
 8001592:	66bb      	str	r3, [r7, #104]	@ 0x68
  //----------------------------------------------
  r[5] = min(theta.NB, theta_dot.NS); // NB
 8001594:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001596:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001598:	4611      	mov	r1, r2
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff fdc4 	bl	8001128 <min>
 80015a0:	e024      	b.n	80015ec <run_fuzzy+0x2e4>
 80015a2:	bf00      	nop
 80015a4:	f3af 8000 	nop.w
 80015a8:	c28f5c29 	.word	0xc28f5c29
 80015ac:	3fac28f5 	.word	0x3fac28f5
 80015b0:	70a3d70a 	.word	0x70a3d70a
 80015b4:	3fc70a3d 	.word	0x3fc70a3d
 80015b8:	2000011c 	.word	0x2000011c
 80015bc:	3ecccccd 	.word	0x3ecccccd
 80015c0:	20000120 	.word	0x20000120
 80015c4:	20000124 	.word	0x20000124
 80015c8:	3d8f5c29 	.word	0x3d8f5c29
 80015cc:	bf800000 	.word	0xbf800000
 80015d0:	c0a00000 	.word	0xc0a00000
 80015d4:	40a00000 	.word	0x40a00000
 80015d8:	20000128 	.word	0x20000128
 80015dc:	3e3851ec 	.word	0x3e3851ec
 80015e0:	2000012c 	.word	0x2000012c
 80015e4:	3df5c28f 	.word	0x3df5c28f
 80015e8:	20000130 	.word	0x20000130
 80015ec:	4603      	mov	r3, r0
 80015ee:	66fb      	str	r3, [r7, #108]	@ 0x6c

  r[6] = min(theta.NS, theta_dot.NS); // NM
 80015f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80015f4:	4611      	mov	r1, r2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fd96 	bl	8001128 <min>
 80015fc:	4603      	mov	r3, r0
 80015fe:	673b      	str	r3, [r7, #112]	@ 0x70

  r[7] = min(theta.ZE, theta_dot.NS); // NS
 8001600:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001602:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fd8e 	bl	8001128 <min>
 800160c:	4603      	mov	r3, r0
 800160e:	677b      	str	r3, [r7, #116]	@ 0x74

  r[8] = min(theta.PS, theta_dot.NS); // ZE
 8001610:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001612:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001614:	4611      	mov	r1, r2
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fd86 	bl	8001128 <min>
 800161c:	4603      	mov	r3, r0
 800161e:	67bb      	str	r3, [r7, #120]	@ 0x78

  r[9] = min(theta.PB, theta_dot.NS); // PS
 8001620:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001622:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001624:	4611      	mov	r1, r2
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff fd7e 	bl	8001128 <min>
 800162c:	4603      	mov	r3, r0
 800162e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  //----------------------------------------------
  r[10] = min(theta.NB, theta_dot.ZE); // NM
 8001630:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001632:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001634:	4611      	mov	r1, r2
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fd76 	bl	8001128 <min>
 800163c:	4603      	mov	r3, r0
 800163e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

  r[11] = min(theta.NS, theta_dot.ZE); // NS
 8001642:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001644:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001646:	4611      	mov	r1, r2
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff fd6d 	bl	8001128 <min>
 800164e:	4603      	mov	r3, r0
 8001650:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  r[12] = min(theta.ZE, theta_dot.ZE); // ZE
 8001654:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001656:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001658:	4611      	mov	r1, r2
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fd64 	bl	8001128 <min>
 8001660:	4603      	mov	r3, r0
 8001662:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  r[13] = min(theta.PS, theta_dot.ZE); // PS
 8001666:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001668:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800166a:	4611      	mov	r1, r2
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fd5b 	bl	8001128 <min>
 8001672:	4603      	mov	r3, r0
 8001674:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

  r[14] = min(theta.PB, theta_dot.ZE); // PM
 8001678:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800167a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800167c:	4611      	mov	r1, r2
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fd52 	bl	8001128 <min>
 8001684:	4603      	mov	r3, r0
 8001686:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  //----------------------------------------------
  r[15] = min(theta.NB, theta_dot.PS); // NS
 800168a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800168c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800168e:	4611      	mov	r1, r2
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fd49 	bl	8001128 <min>
 8001696:	4603      	mov	r3, r0
 8001698:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

  r[16] = min(theta.NS, theta_dot.PS); // ZE
 800169c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800169e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80016a0:	4611      	mov	r1, r2
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fd40 	bl	8001128 <min>
 80016a8:	4603      	mov	r3, r0
 80016aa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

  r[17] = min(theta.ZE, theta_dot.PS); // PS
 80016ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80016b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80016b2:	4611      	mov	r1, r2
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fd37 	bl	8001128 <min>
 80016ba:	4603      	mov	r3, r0
 80016bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

  r[18] = min(theta.PS, theta_dot.PS); // PM
 80016c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80016c2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80016c4:	4611      	mov	r1, r2
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fd2e 	bl	8001128 <min>
 80016cc:	4603      	mov	r3, r0
 80016ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  r[19] = min(theta.PB, theta_dot.PS); // PB
 80016d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80016d6:	4611      	mov	r1, r2
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fd25 	bl	8001128 <min>
 80016de:	4603      	mov	r3, r0
 80016e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  //----------------------------------------------
  r[20] = min(theta.NB, theta_dot.PB); // ZE
 80016e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80016e8:	4611      	mov	r1, r2
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fd1c 	bl	8001128 <min>
 80016f0:	4603      	mov	r3, r0
 80016f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  r[21] = min(theta.NS, theta_dot.PB); // PS
 80016f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80016f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80016fa:	4611      	mov	r1, r2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fd13 	bl	8001128 <min>
 8001702:	4603      	mov	r3, r0
 8001704:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  r[22] = min(theta.ZE, theta_dot.PB); // PM
 8001708:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800170a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800170c:	4611      	mov	r1, r2
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fd0a 	bl	8001128 <min>
 8001714:	4603      	mov	r3, r0
 8001716:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  r[23] = min(theta.PS, theta_dot.PB); // PB
 800171a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800171c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800171e:	4611      	mov	r1, r2
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fd01 	bl	8001128 <min>
 8001726:	4603      	mov	r3, r0
 8001728:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

  r[24] = min(theta.PB, theta_dot.PB); // PB
 800172c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800172e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001730:	4611      	mov	r1, r2
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fcf8 	bl	8001128 <min>
 8001738:	4603      	mov	r3, r0
 800173a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   * ZE: r4 r8 r12 r16 r20
   * PS: r9 r13 r17 r21
   * PM: r14 r18 r22
   * PB: r19 r23 r24
   */
  u_dot.NB = max(3, r[0], r[1], r[5]);
 800173e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001740:	4618      	mov	r0, r3
 8001742:	f7fe fe69 	bl	8000418 <__aeabi_f2d>
 8001746:	4680      	mov	r8, r0
 8001748:	4689      	mov	r9, r1
 800174a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe fe63 	bl	8000418 <__aeabi_f2d>
 8001752:	4604      	mov	r4, r0
 8001754:	460d      	mov	r5, r1
 8001756:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001758:	4618      	mov	r0, r3
 800175a:	f7fe fe5d 	bl	8000418 <__aeabi_f2d>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001766:	e9cd 4500 	strd	r4, r5, [sp]
 800176a:	4642      	mov	r2, r8
 800176c:	464b      	mov	r3, r9
 800176e:	2003      	movs	r0, #3
 8001770:	f7ff fc9e 	bl	80010b0 <max>
 8001774:	4603      	mov	r3, r0
 8001776:	617b      	str	r3, [r7, #20]
  u_dot.NM = max(3, r[2], r[6], r[10]);
 8001778:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fe4c 	bl	8000418 <__aeabi_f2d>
 8001780:	4680      	mov	r8, r0
 8001782:	4689      	mov	r9, r1
 8001784:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe fe46 	bl	8000418 <__aeabi_f2d>
 800178c:	4604      	mov	r4, r0
 800178e:	460d      	mov	r5, r1
 8001790:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe fe3f 	bl	8000418 <__aeabi_f2d>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80017a2:	e9cd 4500 	strd	r4, r5, [sp]
 80017a6:	4642      	mov	r2, r8
 80017a8:	464b      	mov	r3, r9
 80017aa:	2003      	movs	r0, #3
 80017ac:	f7ff fc80 	bl	80010b0 <max>
 80017b0:	4603      	mov	r3, r0
 80017b2:	61bb      	str	r3, [r7, #24]
  u_dot.NS = max(4, r[3], r[7], r[11], r[15]);
 80017b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7fe fe2e 	bl	8000418 <__aeabi_f2d>
 80017bc:	4682      	mov	sl, r0
 80017be:	468b      	mov	fp, r1
 80017c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe fe28 	bl	8000418 <__aeabi_f2d>
 80017c8:	4604      	mov	r4, r0
 80017ca:	460d      	mov	r5, r1
 80017cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe fe21 	bl	8000418 <__aeabi_f2d>
 80017d6:	4680      	mov	r8, r0
 80017d8:	4689      	mov	r9, r1
 80017da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80017de:	4618      	mov	r0, r3
 80017e0:	f7fe fe1a 	bl	8000418 <__aeabi_f2d>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80017ec:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80017f0:	e9cd 4500 	strd	r4, r5, [sp]
 80017f4:	4652      	mov	r2, sl
 80017f6:	465b      	mov	r3, fp
 80017f8:	2004      	movs	r0, #4
 80017fa:	f7ff fc59 	bl	80010b0 <max>
 80017fe:	4603      	mov	r3, r0
 8001800:	61fb      	str	r3, [r7, #28]
  u_dot.ZE = max(5, r[4], r[8], r[12], r[16], r[20]);
 8001802:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe fe07 	bl	8000418 <__aeabi_f2d>
 800180a:	e9c7 0100 	strd	r0, r1, [r7]
 800180e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fe01 	bl	8000418 <__aeabi_f2d>
 8001816:	4604      	mov	r4, r0
 8001818:	460d      	mov	r5, r1
 800181a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe fdfa 	bl	8000418 <__aeabi_f2d>
 8001824:	4680      	mov	r8, r0
 8001826:	4689      	mov	r9, r1
 8001828:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800182c:	4618      	mov	r0, r3
 800182e:	f7fe fdf3 	bl	8000418 <__aeabi_f2d>
 8001832:	4682      	mov	sl, r0
 8001834:	468b      	mov	fp, r1
 8001836:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800183a:	4618      	mov	r0, r3
 800183c:	f7fe fdec 	bl	8000418 <__aeabi_f2d>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001848:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800184c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001850:	e9cd 4500 	strd	r4, r5, [sp]
 8001854:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001858:	2005      	movs	r0, #5
 800185a:	f7ff fc29 	bl	80010b0 <max>
 800185e:	4603      	mov	r3, r0
 8001860:	623b      	str	r3, [r7, #32]
  u_dot.PS = max(4, r[9], r[13], r[17], r[21]);
 8001862:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001864:	4618      	mov	r0, r3
 8001866:	f7fe fdd7 	bl	8000418 <__aeabi_f2d>
 800186a:	4682      	mov	sl, r0
 800186c:	468b      	mov	fp, r1
 800186e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001872:	4618      	mov	r0, r3
 8001874:	f7fe fdd0 	bl	8000418 <__aeabi_f2d>
 8001878:	4604      	mov	r4, r0
 800187a:	460d      	mov	r5, r1
 800187c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001880:	4618      	mov	r0, r3
 8001882:	f7fe fdc9 	bl	8000418 <__aeabi_f2d>
 8001886:	4680      	mov	r8, r0
 8001888:	4689      	mov	r9, r1
 800188a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fdc2 	bl	8000418 <__aeabi_f2d>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800189c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80018a0:	e9cd 4500 	strd	r4, r5, [sp]
 80018a4:	4652      	mov	r2, sl
 80018a6:	465b      	mov	r3, fp
 80018a8:	2004      	movs	r0, #4
 80018aa:	f7ff fc01 	bl	80010b0 <max>
 80018ae:	4603      	mov	r3, r0
 80018b0:	627b      	str	r3, [r7, #36]	@ 0x24
  u_dot.PM = max(3, r[14], r[18], r[22]);
 80018b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe fdae 	bl	8000418 <__aeabi_f2d>
 80018bc:	4680      	mov	r8, r0
 80018be:	4689      	mov	r9, r1
 80018c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fda7 	bl	8000418 <__aeabi_f2d>
 80018ca:	4604      	mov	r4, r0
 80018cc:	460d      	mov	r5, r1
 80018ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fda0 	bl	8000418 <__aeabi_f2d>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80018e0:	e9cd 4500 	strd	r4, r5, [sp]
 80018e4:	4642      	mov	r2, r8
 80018e6:	464b      	mov	r3, r9
 80018e8:	2003      	movs	r0, #3
 80018ea:	f7ff fbe1 	bl	80010b0 <max>
 80018ee:	4603      	mov	r3, r0
 80018f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  u_dot.PB = max(3, r[19], r[23], r[24]);
 80018f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe fd8e 	bl	8000418 <__aeabi_f2d>
 80018fc:	4680      	mov	r8, r0
 80018fe:	4689      	mov	r9, r1
 8001900:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe fd87 	bl	8000418 <__aeabi_f2d>
 800190a:	4604      	mov	r4, r0
 800190c:	460d      	mov	r5, r1
 800190e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001912:	4618      	mov	r0, r3
 8001914:	f7fe fd80 	bl	8000418 <__aeabi_f2d>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001920:	e9cd 4500 	strd	r4, r5, [sp]
 8001924:	4642      	mov	r2, r8
 8001926:	464b      	mov	r3, r9
 8001928:	2003      	movs	r0, #3
 800192a:	f7ff fbc1 	bl	80010b0 <max>
 800192e:	4603      	mov	r3, r0
 8001930:	62fb      	str	r3, [r7, #44]	@ 0x2c

  // weighted average defuzzification method
  float sum_beta;
  float sum_beta_y;
  u_S = 0.3f;
 8001932:	4b54      	ldr	r3, [pc, #336]	@ (8001a84 <run_fuzzy+0x77c>)
 8001934:	4a54      	ldr	r2, [pc, #336]	@ (8001a88 <run_fuzzy+0x780>)
 8001936:	601a      	str	r2, [r3, #0]
  u_M = 0.62f;
 8001938:	4b54      	ldr	r3, [pc, #336]	@ (8001a8c <run_fuzzy+0x784>)
 800193a:	4a55      	ldr	r2, [pc, #340]	@ (8001a90 <run_fuzzy+0x788>)
 800193c:	601a      	str	r2, [r3, #0]
  u_B = 0.82f;
 800193e:	4b55      	ldr	r3, [pc, #340]	@ (8001a94 <run_fuzzy+0x78c>)
 8001940:	4a55      	ldr	r2, [pc, #340]	@ (8001a98 <run_fuzzy+0x790>)
 8001942:	601a      	str	r2, [r3, #0]
  sum_beta = u_dot.NB + u_dot.NM + u_dot.NS + u_dot.ZE + u_dot.PS + u_dot.PM + u_dot.PB;
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4611      	mov	r1, r2
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff f8c2 	bl	8000ad4 <__addsf3>
 8001950:	4603      	mov	r3, r0
 8001952:	461a      	mov	r2, r3
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	4619      	mov	r1, r3
 8001958:	4610      	mov	r0, r2
 800195a:	f7ff f8bb 	bl	8000ad4 <__addsf3>
 800195e:	4603      	mov	r3, r0
 8001960:	461a      	mov	r2, r3
 8001962:	6a3b      	ldr	r3, [r7, #32]
 8001964:	4619      	mov	r1, r3
 8001966:	4610      	mov	r0, r2
 8001968:	f7ff f8b4 	bl	8000ad4 <__addsf3>
 800196c:	4603      	mov	r3, r0
 800196e:	461a      	mov	r2, r3
 8001970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001972:	4619      	mov	r1, r3
 8001974:	4610      	mov	r0, r2
 8001976:	f7ff f8ad 	bl	8000ad4 <__addsf3>
 800197a:	4603      	mov	r3, r0
 800197c:	461a      	mov	r2, r3
 800197e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001980:	4619      	mov	r1, r3
 8001982:	4610      	mov	r0, r2
 8001984:	f7ff f8a6 	bl	8000ad4 <__addsf3>
 8001988:	4603      	mov	r3, r0
 800198a:	461a      	mov	r2, r3
 800198c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800198e:	4619      	mov	r1, r3
 8001990:	4610      	mov	r0, r2
 8001992:	f7ff f89f 	bl	8000ad4 <__addsf3>
 8001996:	4603      	mov	r3, r0
 8001998:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  sum_beta_y = -u_B * u_dot.NB + -u_M * u_dot.NM + -u_S * u_dot.NS + 0 * u_dot.ZE + u_S * u_dot.PS + u_M * u_dot.PM + u_B * u_dot.PB;
 800199c:	4b3d      	ldr	r3, [pc, #244]	@ (8001a94 <run_fuzzy+0x78c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	4611      	mov	r1, r2
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff f99b 	bl	8000ce4 <__aeabi_fmul>
 80019ae:	4603      	mov	r3, r0
 80019b0:	461c      	mov	r4, r3
 80019b2:	4b36      	ldr	r3, [pc, #216]	@ (8001a8c <run_fuzzy+0x784>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4611      	mov	r1, r2
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff f990 	bl	8000ce4 <__aeabi_fmul>
 80019c4:	4603      	mov	r3, r0
 80019c6:	4619      	mov	r1, r3
 80019c8:	4620      	mov	r0, r4
 80019ca:	f7ff f883 	bl	8000ad4 <__addsf3>
 80019ce:	4603      	mov	r3, r0
 80019d0:	461c      	mov	r4, r3
 80019d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001a84 <run_fuzzy+0x77c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80019da:	69fa      	ldr	r2, [r7, #28]
 80019dc:	4611      	mov	r1, r2
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff f980 	bl	8000ce4 <__aeabi_fmul>
 80019e4:	4603      	mov	r3, r0
 80019e6:	4619      	mov	r1, r3
 80019e8:	4620      	mov	r0, r4
 80019ea:	f7ff f873 	bl	8000ad4 <__addsf3>
 80019ee:	4603      	mov	r3, r0
 80019f0:	461c      	mov	r4, r3
 80019f2:	6a3b      	ldr	r3, [r7, #32]
 80019f4:	f04f 0100 	mov.w	r1, #0
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff f973 	bl	8000ce4 <__aeabi_fmul>
 80019fe:	4603      	mov	r3, r0
 8001a00:	4619      	mov	r1, r3
 8001a02:	4620      	mov	r0, r4
 8001a04:	f7ff f866 	bl	8000ad4 <__addsf3>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	461c      	mov	r4, r3
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0e:	4a1d      	ldr	r2, [pc, #116]	@ (8001a84 <run_fuzzy+0x77c>)
 8001a10:	6812      	ldr	r2, [r2, #0]
 8001a12:	4611      	mov	r1, r2
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff f965 	bl	8000ce4 <__aeabi_fmul>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4620      	mov	r0, r4
 8001a20:	f7ff f858 	bl	8000ad4 <__addsf3>
 8001a24:	4603      	mov	r3, r0
 8001a26:	461c      	mov	r4, r3
 8001a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a2a:	4a18      	ldr	r2, [pc, #96]	@ (8001a8c <run_fuzzy+0x784>)
 8001a2c:	6812      	ldr	r2, [r2, #0]
 8001a2e:	4611      	mov	r1, r2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff f957 	bl	8000ce4 <__aeabi_fmul>
 8001a36:	4603      	mov	r3, r0
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4620      	mov	r0, r4
 8001a3c:	f7ff f84a 	bl	8000ad4 <__addsf3>
 8001a40:	4603      	mov	r3, r0
 8001a42:	461c      	mov	r4, r3
 8001a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a46:	4a13      	ldr	r2, [pc, #76]	@ (8001a94 <run_fuzzy+0x78c>)
 8001a48:	6812      	ldr	r2, [r2, #0]
 8001a4a:	4611      	mov	r1, r2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff f949 	bl	8000ce4 <__aeabi_fmul>
 8001a52:	4603      	mov	r3, r0
 8001a54:	4619      	mov	r1, r3
 8001a56:	4620      	mov	r0, r4
 8001a58:	f7ff f83c 	bl	8000ad4 <__addsf3>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  out = sum_beta_y / sum_beta; // Homework3 :>
 8001a62:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 8001a66:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8001a6a:	f7ff f9ef 	bl	8000e4c <__aeabi_fdiv>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  return out;
 8001a74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	37cc      	adds	r7, #204	@ 0xcc
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a82:	bf00      	nop
 8001a84:	20000134 	.word	0x20000134
 8001a88:	3e99999a 	.word	0x3e99999a
 8001a8c:	20000138 	.word	0x20000138
 8001a90:	3f1eb852 	.word	0x3f1eb852
 8001a94:	2000013c 	.word	0x2000013c
 8001a98:	3f51eb85 	.word	0x3f51eb85

08001a9c <limit_range>:

void limit_range(float *x) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  if (*x > 1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fad5 	bl	800105c <__aeabi_fcmpgt>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d004      	beq.n	8001ac2 <limit_range+0x26>
    *x = 1;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001abe:	601a      	str	r2, [r3, #0]
  else if (*x < -1)
    *x = -1;
}
 8001ac0:	e00c      	b.n	8001adc <limit_range+0x40>
  else if (*x < -1)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4907      	ldr	r1, [pc, #28]	@ (8001ae4 <limit_range+0x48>)
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff faa9 	bl	8001020 <__aeabi_fcmplt>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d100      	bne.n	8001ad6 <limit_range+0x3a>
}
 8001ad4:	e002      	b.n	8001adc <limit_range+0x40>
    *x = -1;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a02      	ldr	r2, [pc, #8]	@ (8001ae4 <limit_range+0x48>)
 8001ada:	601a      	str	r2, [r3, #0]
}
 8001adc:	bf00      	nop
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	bf800000 	.word	0xbf800000

08001ae8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aec:	f001 f958 	bl	8002da0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001af0:	f000 f810 	bl	8001b14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001af4:	f000 f9b8 	bl	8001e68 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001af8:	f000 f8ce 	bl	8001c98 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001afc:	f000 f98a 	bl	8001e14 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001b00:	f000 f878 	bl	8001bf4 <MX_TIM1_Init>
  MX_I2C1_Init();
 8001b04:	f000 f848 	bl	8001b98 <MX_I2C1_Init>
  MX_TIM4_Init();
 8001b08:	f000 f920 	bl	8001d4c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  Init_All();
 8001b0c:	f000 fa30 	bl	8001f70 <Init_All>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b10:	bf00      	nop
 8001b12:	e7fd      	b.n	8001b10 <main+0x28>

08001b14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b090      	sub	sp, #64	@ 0x40
 8001b18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b1a:	f107 0318 	add.w	r3, r7, #24
 8001b1e:	2228      	movs	r2, #40	@ 0x28
 8001b20:	2100      	movs	r1, #0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f004 f8ee 	bl	8005d04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b28:	1d3b      	adds	r3, r7, #4
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	60da      	str	r2, [r3, #12]
 8001b34:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b36:	2302      	movs	r3, #2
 8001b38:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b3e:	2310      	movs	r3, #16
 8001b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b42:	2302      	movs	r3, #2
 8001b44:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001b46:	2300      	movs	r3, #0
 8001b48:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001b4a:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8001b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b50:	f107 0318 	add.w	r3, r7, #24
 8001b54:	4618      	mov	r0, r3
 8001b56:	f002 fc89 	bl	800446c <HAL_RCC_OscConfig>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001b60:	f000 fb9e 	bl	80022a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b64:	230f      	movs	r3, #15
 8001b66:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b7a:	1d3b      	adds	r3, r7, #4
 8001b7c:	2102      	movs	r1, #2
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f002 fef6 	bl	8004970 <HAL_RCC_ClockConfig>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001b8a:	f000 fb89 	bl	80022a0 <Error_Handler>
  }
}
 8001b8e:	bf00      	nop
 8001b90:	3740      	adds	r7, #64	@ 0x40
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
	...

08001b98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b9c:	4b12      	ldr	r3, [pc, #72]	@ (8001be8 <MX_I2C1_Init+0x50>)
 8001b9e:	4a13      	ldr	r2, [pc, #76]	@ (8001bec <MX_I2C1_Init+0x54>)
 8001ba0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ba2:	4b11      	ldr	r3, [pc, #68]	@ (8001be8 <MX_I2C1_Init+0x50>)
 8001ba4:	4a12      	ldr	r2, [pc, #72]	@ (8001bf0 <MX_I2C1_Init+0x58>)
 8001ba6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8001be8 <MX_I2C1_Init+0x50>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001bae:	4b0e      	ldr	r3, [pc, #56]	@ (8001be8 <MX_I2C1_Init+0x50>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001be8 <MX_I2C1_Init+0x50>)
 8001bb6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001bba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8001be8 <MX_I2C1_Init+0x50>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001bc2:	4b09      	ldr	r3, [pc, #36]	@ (8001be8 <MX_I2C1_Init+0x50>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bc8:	4b07      	ldr	r3, [pc, #28]	@ (8001be8 <MX_I2C1_Init+0x50>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bce:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <MX_I2C1_Init+0x50>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bd4:	4804      	ldr	r0, [pc, #16]	@ (8001be8 <MX_I2C1_Init+0x50>)
 8001bd6:	f001 fbef 	bl	80033b8 <HAL_I2C_Init>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001be0:	f000 fb5e 	bl	80022a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001be4:	bf00      	nop
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000140 	.word	0x20000140
 8001bec:	40005400 	.word	0x40005400
 8001bf0:	000186a0 	.word	0x000186a0

08001bf4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bfa:	f107 0308 	add.w	r3, r7, #8
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]
 8001c04:	609a      	str	r2, [r3, #8]
 8001c06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c08:	463b      	mov	r3, r7
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c10:	4b1f      	ldr	r3, [pc, #124]	@ (8001c90 <MX_TIM1_Init+0x9c>)
 8001c12:	4a20      	ldr	r2, [pc, #128]	@ (8001c94 <MX_TIM1_Init+0xa0>)
 8001c14:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 639;
 8001c16:	4b1e      	ldr	r3, [pc, #120]	@ (8001c90 <MX_TIM1_Init+0x9c>)
 8001c18:	f240 227f 	movw	r2, #639	@ 0x27f
 8001c1c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001c90 <MX_TIM1_Init+0x9c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 499;
 8001c24:	4b1a      	ldr	r3, [pc, #104]	@ (8001c90 <MX_TIM1_Init+0x9c>)
 8001c26:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001c2a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c2c:	4b18      	ldr	r3, [pc, #96]	@ (8001c90 <MX_TIM1_Init+0x9c>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c32:	4b17      	ldr	r3, [pc, #92]	@ (8001c90 <MX_TIM1_Init+0x9c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c38:	4b15      	ldr	r3, [pc, #84]	@ (8001c90 <MX_TIM1_Init+0x9c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c3e:	4814      	ldr	r0, [pc, #80]	@ (8001c90 <MX_TIM1_Init+0x9c>)
 8001c40:	f003 f824 	bl	8004c8c <HAL_TIM_Base_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001c4a:	f000 fb29 	bl	80022a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c54:	f107 0308 	add.w	r3, r7, #8
 8001c58:	4619      	mov	r1, r3
 8001c5a:	480d      	ldr	r0, [pc, #52]	@ (8001c90 <MX_TIM1_Init+0x9c>)
 8001c5c:	f003 fb74 	bl	8005348 <HAL_TIM_ConfigClockSource>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001c66:	f000 fb1b 	bl	80022a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c72:	463b      	mov	r3, r7
 8001c74:	4619      	mov	r1, r3
 8001c76:	4806      	ldr	r0, [pc, #24]	@ (8001c90 <MX_TIM1_Init+0x9c>)
 8001c78:	f003 fef6 	bl	8005a68 <HAL_TIMEx_MasterConfigSynchronization>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001c82:	f000 fb0d 	bl	80022a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c86:	bf00      	nop
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000194 	.word	0x20000194
 8001c94:	40012c00 	.word	0x40012c00

08001c98 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08a      	sub	sp, #40	@ 0x28
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c9e:	f107 0320 	add.w	r3, r7, #32
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	609a      	str	r2, [r3, #8]
 8001cb2:	60da      	str	r2, [r3, #12]
 8001cb4:	611a      	str	r2, [r3, #16]
 8001cb6:	615a      	str	r2, [r3, #20]
 8001cb8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cba:	4b22      	ldr	r3, [pc, #136]	@ (8001d44 <MX_TIM3_Init+0xac>)
 8001cbc:	4a22      	ldr	r2, [pc, #136]	@ (8001d48 <MX_TIM3_Init+0xb0>)
 8001cbe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8001cc0:	4b20      	ldr	r3, [pc, #128]	@ (8001d44 <MX_TIM3_Init+0xac>)
 8001cc2:	2209      	movs	r2, #9
 8001cc4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc6:	4b1f      	ldr	r3, [pc, #124]	@ (8001d44 <MX_TIM3_Init+0xac>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3199;
 8001ccc:	4b1d      	ldr	r3, [pc, #116]	@ (8001d44 <MX_TIM3_Init+0xac>)
 8001cce:	f640 427f 	movw	r2, #3199	@ 0xc7f
 8001cd2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d44 <MX_TIM3_Init+0xac>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cda:	4b1a      	ldr	r3, [pc, #104]	@ (8001d44 <MX_TIM3_Init+0xac>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ce0:	4818      	ldr	r0, [pc, #96]	@ (8001d44 <MX_TIM3_Init+0xac>)
 8001ce2:	f003 f875 	bl	8004dd0 <HAL_TIM_PWM_Init>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001cec:	f000 fad8 	bl	80022a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cf8:	f107 0320 	add.w	r3, r7, #32
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4811      	ldr	r0, [pc, #68]	@ (8001d44 <MX_TIM3_Init+0xac>)
 8001d00:	f003 feb2 	bl	8005a68 <HAL_TIMEx_MasterConfigSynchronization>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001d0a:	f000 fac9 	bl	80022a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d0e:	2360      	movs	r3, #96	@ 0x60
 8001d10:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	2200      	movs	r2, #0
 8001d22:	4619      	mov	r1, r3
 8001d24:	4807      	ldr	r0, [pc, #28]	@ (8001d44 <MX_TIM3_Init+0xac>)
 8001d26:	f003 fa4d 	bl	80051c4 <HAL_TIM_PWM_ConfigChannel>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001d30:	f000 fab6 	bl	80022a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d34:	4803      	ldr	r0, [pc, #12]	@ (8001d44 <MX_TIM3_Init+0xac>)
 8001d36:	f000 ff1f 	bl	8002b78 <HAL_TIM_MspPostInit>

}
 8001d3a:	bf00      	nop
 8001d3c:	3728      	adds	r7, #40	@ 0x28
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	200001dc 	.word	0x200001dc
 8001d48:	40000400 	.word	0x40000400

08001d4c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08a      	sub	sp, #40	@ 0x28
 8001d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d52:	f107 0320 	add.w	r3, r7, #32
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d5c:	1d3b      	adds	r3, r7, #4
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	60da      	str	r2, [r3, #12]
 8001d68:	611a      	str	r2, [r3, #16]
 8001d6a:	615a      	str	r2, [r3, #20]
 8001d6c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d6e:	4b27      	ldr	r3, [pc, #156]	@ (8001e0c <MX_TIM4_Init+0xc0>)
 8001d70:	4a27      	ldr	r2, [pc, #156]	@ (8001e10 <MX_TIM4_Init+0xc4>)
 8001d72:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9;
 8001d74:	4b25      	ldr	r3, [pc, #148]	@ (8001e0c <MX_TIM4_Init+0xc0>)
 8001d76:	2209      	movs	r2, #9
 8001d78:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d7a:	4b24      	ldr	r3, [pc, #144]	@ (8001e0c <MX_TIM4_Init+0xc0>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3199;
 8001d80:	4b22      	ldr	r3, [pc, #136]	@ (8001e0c <MX_TIM4_Init+0xc0>)
 8001d82:	f640 427f 	movw	r2, #3199	@ 0xc7f
 8001d86:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d88:	4b20      	ldr	r3, [pc, #128]	@ (8001e0c <MX_TIM4_Init+0xc0>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d8e:	4b1f      	ldr	r3, [pc, #124]	@ (8001e0c <MX_TIM4_Init+0xc0>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d94:	481d      	ldr	r0, [pc, #116]	@ (8001e0c <MX_TIM4_Init+0xc0>)
 8001d96:	f003 f81b 	bl	8004dd0 <HAL_TIM_PWM_Init>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001da0:	f000 fa7e 	bl	80022a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da4:	2300      	movs	r3, #0
 8001da6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da8:	2300      	movs	r3, #0
 8001daa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001dac:	f107 0320 	add.w	r3, r7, #32
 8001db0:	4619      	mov	r1, r3
 8001db2:	4816      	ldr	r0, [pc, #88]	@ (8001e0c <MX_TIM4_Init+0xc0>)
 8001db4:	f003 fe58 	bl	8005a68 <HAL_TIMEx_MasterConfigSynchronization>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001dbe:	f000 fa6f 	bl	80022a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dc2:	2360      	movs	r3, #96	@ 0x60
 8001dc4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dd2:	1d3b      	adds	r3, r7, #4
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	480c      	ldr	r0, [pc, #48]	@ (8001e0c <MX_TIM4_Init+0xc0>)
 8001dda:	f003 f9f3 	bl	80051c4 <HAL_TIM_PWM_ConfigChannel>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001de4:	f000 fa5c 	bl	80022a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001de8:	1d3b      	adds	r3, r7, #4
 8001dea:	2204      	movs	r2, #4
 8001dec:	4619      	mov	r1, r3
 8001dee:	4807      	ldr	r0, [pc, #28]	@ (8001e0c <MX_TIM4_Init+0xc0>)
 8001df0:	f003 f9e8 	bl	80051c4 <HAL_TIM_PWM_ConfigChannel>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001dfa:	f000 fa51 	bl	80022a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001dfe:	4803      	ldr	r0, [pc, #12]	@ (8001e0c <MX_TIM4_Init+0xc0>)
 8001e00:	f000 feba 	bl	8002b78 <HAL_TIM_MspPostInit>

}
 8001e04:	bf00      	nop
 8001e06:	3728      	adds	r7, #40	@ 0x28
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20000224 	.word	0x20000224
 8001e10:	40000800 	.word	0x40000800

08001e14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e18:	4b11      	ldr	r3, [pc, #68]	@ (8001e60 <MX_USART1_UART_Init+0x4c>)
 8001e1a:	4a12      	ldr	r2, [pc, #72]	@ (8001e64 <MX_USART1_UART_Init+0x50>)
 8001e1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e1e:	4b10      	ldr	r3, [pc, #64]	@ (8001e60 <MX_USART1_UART_Init+0x4c>)
 8001e20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e26:	4b0e      	ldr	r3, [pc, #56]	@ (8001e60 <MX_USART1_UART_Init+0x4c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e60 <MX_USART1_UART_Init+0x4c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e32:	4b0b      	ldr	r3, [pc, #44]	@ (8001e60 <MX_USART1_UART_Init+0x4c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e38:	4b09      	ldr	r3, [pc, #36]	@ (8001e60 <MX_USART1_UART_Init+0x4c>)
 8001e3a:	220c      	movs	r2, #12
 8001e3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e3e:	4b08      	ldr	r3, [pc, #32]	@ (8001e60 <MX_USART1_UART_Init+0x4c>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e44:	4b06      	ldr	r3, [pc, #24]	@ (8001e60 <MX_USART1_UART_Init+0x4c>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e4a:	4805      	ldr	r0, [pc, #20]	@ (8001e60 <MX_USART1_UART_Init+0x4c>)
 8001e4c:	f003 fe7c 	bl	8005b48 <HAL_UART_Init>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e56:	f000 fa23 	bl	80022a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	2000026c 	.word	0x2000026c
 8001e64:	40013800 	.word	0x40013800

08001e68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b088      	sub	sp, #32
 8001e6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6e:	f107 0310 	add.w	r3, r7, #16
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	605a      	str	r2, [r3, #4]
 8001e78:	609a      	str	r2, [r3, #8]
 8001e7a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e7c:	4b38      	ldr	r3, [pc, #224]	@ (8001f60 <MX_GPIO_Init+0xf8>)
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	4a37      	ldr	r2, [pc, #220]	@ (8001f60 <MX_GPIO_Init+0xf8>)
 8001e82:	f043 0310 	orr.w	r3, r3, #16
 8001e86:	6193      	str	r3, [r2, #24]
 8001e88:	4b35      	ldr	r3, [pc, #212]	@ (8001f60 <MX_GPIO_Init+0xf8>)
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	f003 0310 	and.w	r3, r3, #16
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e94:	4b32      	ldr	r3, [pc, #200]	@ (8001f60 <MX_GPIO_Init+0xf8>)
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	4a31      	ldr	r2, [pc, #196]	@ (8001f60 <MX_GPIO_Init+0xf8>)
 8001e9a:	f043 0320 	orr.w	r3, r3, #32
 8001e9e:	6193      	str	r3, [r2, #24]
 8001ea0:	4b2f      	ldr	r3, [pc, #188]	@ (8001f60 <MX_GPIO_Init+0xf8>)
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	f003 0320 	and.w	r3, r3, #32
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eac:	4b2c      	ldr	r3, [pc, #176]	@ (8001f60 <MX_GPIO_Init+0xf8>)
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	4a2b      	ldr	r2, [pc, #172]	@ (8001f60 <MX_GPIO_Init+0xf8>)
 8001eb2:	f043 0304 	orr.w	r3, r3, #4
 8001eb6:	6193      	str	r3, [r2, #24]
 8001eb8:	4b29      	ldr	r3, [pc, #164]	@ (8001f60 <MX_GPIO_Init+0xf8>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	607b      	str	r3, [r7, #4]
 8001ec2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec4:	4b26      	ldr	r3, [pc, #152]	@ (8001f60 <MX_GPIO_Init+0xf8>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	4a25      	ldr	r2, [pc, #148]	@ (8001f60 <MX_GPIO_Init+0xf8>)
 8001eca:	f043 0308 	orr.w	r3, r3, #8
 8001ece:	6193      	str	r3, [r2, #24]
 8001ed0:	4b23      	ldr	r3, [pc, #140]	@ (8001f60 <MX_GPIO_Init+0xf8>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	f003 0308 	and.w	r3, r3, #8
 8001ed8:	603b      	str	r3, [r7, #0]
 8001eda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001edc:	2200      	movs	r2, #0
 8001ede:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ee2:	4820      	ldr	r0, [pc, #128]	@ (8001f64 <MX_GPIO_Init+0xfc>)
 8001ee4:	f001 fa50 	bl	8003388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_OUT_LED_Pin|GPIO_PIN_5|IN1_Pin|IN2_Pin, GPIO_PIN_RESET);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	21e8      	movs	r1, #232	@ 0xe8
 8001eec:	481e      	ldr	r0, [pc, #120]	@ (8001f68 <MX_GPIO_Init+0x100>)
 8001eee:	f001 fa4b 	bl	8003388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_5, GPIO_PIN_RESET);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f44f 6142 	mov.w	r1, #3104	@ 0xc20
 8001ef8:	481c      	ldr	r0, [pc, #112]	@ (8001f6c <MX_GPIO_Init+0x104>)
 8001efa:	f001 fa45 	bl	8003388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001efe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f04:	2301      	movs	r3, #1
 8001f06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f10:	f107 0310 	add.w	r3, r7, #16
 8001f14:	4619      	mov	r1, r3
 8001f16:	4813      	ldr	r0, [pc, #76]	@ (8001f64 <MX_GPIO_Init+0xfc>)
 8001f18:	f001 f8b2 	bl	8003080 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_OUT_LED_Pin PA5 IN1_Pin IN2_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_LED_Pin|GPIO_PIN_5|IN1_Pin|IN2_Pin;
 8001f1c:	23e8      	movs	r3, #232	@ 0xe8
 8001f1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f20:	2301      	movs	r3, #1
 8001f22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2c:	f107 0310 	add.w	r3, r7, #16
 8001f30:	4619      	mov	r1, r3
 8001f32:	480d      	ldr	r0, [pc, #52]	@ (8001f68 <MX_GPIO_Init+0x100>)
 8001f34:	f001 f8a4 	bl	8003080 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_5;
 8001f38:	f44f 6342 	mov.w	r3, #3104	@ 0xc20
 8001f3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f46:	2302      	movs	r3, #2
 8001f48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f4a:	f107 0310 	add.w	r3, r7, #16
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4806      	ldr	r0, [pc, #24]	@ (8001f6c <MX_GPIO_Init+0x104>)
 8001f52:	f001 f895 	bl	8003080 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f56:	bf00      	nop
 8001f58:	3720      	adds	r7, #32
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40011000 	.word	0x40011000
 8001f68:	40010800 	.word	0x40010800
 8001f6c:	40010c00 	.word	0x40010c00

08001f70 <Init_All>:

/* USER CODE BEGIN 4 */
void Init_All()
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
	while (MPU6050_Init(&hi2c1) == 1);
 8001f74:	bf00      	nop
 8001f76:	4809      	ldr	r0, [pc, #36]	@ (8001f9c <Init_All+0x2c>)
 8001f78:	f000 f998 	bl	80022ac <MPU6050_Init>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d0f9      	beq.n	8001f76 <Init_All+0x6>
	HAL_TIM_Base_Start_IT(&htim1);
 8001f82:	4807      	ldr	r0, [pc, #28]	@ (8001fa0 <Init_All+0x30>)
 8001f84:	f002 fed2 	bl	8004d2c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001f88:	2100      	movs	r1, #0
 8001f8a:	4806      	ldr	r0, [pc, #24]	@ (8001fa4 <Init_All+0x34>)
 8001f8c:	f002 ff70 	bl	8004e70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001f90:	2104      	movs	r1, #4
 8001f92:	4805      	ldr	r0, [pc, #20]	@ (8001fa8 <Init_All+0x38>)
 8001f94:	f002 ff6c 	bl	8004e70 <HAL_TIM_PWM_Start>
}
 8001f98:	bf00      	nop
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20000140 	.word	0x20000140
 8001fa0:	20000194 	.word	0x20000194
 8001fa4:	200001dc 	.word	0x200001dc
 8001fa8:	20000224 	.word	0x20000224

08001fac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim1.Instance)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4b2b      	ldr	r3, [pc, #172]	@ (8002068 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d14e      	bne.n	800205e <HAL_TIM_PeriodElapsedCallback+0xb2>
	{
		MPU6050_Read_All(&hi2c1, &MPU6050);
 8001fc0:	492a      	ldr	r1, [pc, #168]	@ (800206c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001fc2:	482b      	ldr	r0, [pc, #172]	@ (8002070 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001fc4:	f000 f9cc 	bl	8002360 <MPU6050_Read_All>
		Fuzzy_Process();
 8001fc8:	f000 f85e 	bl	8002088 <Fuzzy_Process>
		if (Parameters.theta < -THETA_OVER || Parameters.theta > THETA_OVER)
 8001fcc:	4b29      	ldr	r3, [pc, #164]	@ (8002074 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	4929      	ldr	r1, [pc, #164]	@ (8002078 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff f824 	bl	8001020 <__aeabi_fcmplt>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d108      	bne.n	8001ff0 <HAL_TIM_PeriodElapsedCallback+0x44>
 8001fde:	4b25      	ldr	r3, [pc, #148]	@ (8002074 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	4926      	ldr	r1, [pc, #152]	@ (800207c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff f839 	bl	800105c <__aeabi_fcmpgt>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d002      	beq.n	8001ff6 <HAL_TIM_PeriodElapsedCallback+0x4a>
		{
			motor_stop();
 8001ff0:	f000 f8ea 	bl	80021c8 <motor_stop>
		else
		{
			motor_stop();
		}
	}
}
 8001ff4:	e033      	b.n	800205e <HAL_TIM_PeriodElapsedCallback+0xb2>
		else if(Parameters.uk_fuzzy > 0)
 8001ff6:	4b1f      	ldr	r3, [pc, #124]	@ (8002074 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f04f 0100 	mov.w	r1, #0
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff f82c 	bl	800105c <__aeabi_fcmpgt>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00d      	beq.n	8002026 <HAL_TIM_PeriodElapsedCallback+0x7a>
			motor_forward();
 800200a:	f000 f8a1 	bl	8002150 <motor_forward>
			pwm_out(Parameters.uk_fuzzy);
 800200e:	4b19      	ldr	r3, [pc, #100]	@ (8002074 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	4618      	mov	r0, r3
 8002014:	f000 f8fa 	bl	800220c <pwm_out>
			forward = 1; //Just4Debugging
 8002018:	4b19      	ldr	r3, [pc, #100]	@ (8002080 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800201a:	2201      	movs	r2, #1
 800201c:	701a      	strb	r2, [r3, #0]
			reverse = 0;
 800201e:	4b19      	ldr	r3, [pc, #100]	@ (8002084 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002020:	2200      	movs	r2, #0
 8002022:	701a      	strb	r2, [r3, #0]
}
 8002024:	e01b      	b.n	800205e <HAL_TIM_PeriodElapsedCallback+0xb2>
		else if(Parameters.uk_fuzzy < 0)
 8002026:	4b13      	ldr	r3, [pc, #76]	@ (8002074 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f04f 0100 	mov.w	r1, #0
 800202e:	4618      	mov	r0, r3
 8002030:	f7fe fff6 	bl	8001020 <__aeabi_fcmplt>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00f      	beq.n	800205a <HAL_TIM_PeriodElapsedCallback+0xae>
			motor_reverse();
 800203a:	f000 f8a7 	bl	800218c <motor_reverse>
			pwm_out((-(Parameters.uk_fuzzy)));
 800203e:	4b0d      	ldr	r3, [pc, #52]	@ (8002074 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002046:	4618      	mov	r0, r3
 8002048:	f000 f8e0 	bl	800220c <pwm_out>
			forward = 0; //Just4Debugging
 800204c:	4b0c      	ldr	r3, [pc, #48]	@ (8002080 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800204e:	2200      	movs	r2, #0
 8002050:	701a      	strb	r2, [r3, #0]
			reverse = 1;
 8002052:	4b0c      	ldr	r3, [pc, #48]	@ (8002084 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002054:	2201      	movs	r2, #1
 8002056:	701a      	strb	r2, [r3, #0]
}
 8002058:	e001      	b.n	800205e <HAL_TIM_PeriodElapsedCallback+0xb2>
			motor_stop();
 800205a:	f000 f8b5 	bl	80021c8 <motor_stop>
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20000194 	.word	0x20000194
 800206c:	200002b8 	.word	0x200002b8
 8002070:	20000140 	.word	0x20000140
 8002074:	20000310 	.word	0x20000310
 8002078:	c2700000 	.word	0xc2700000
 800207c:	42700000 	.word	0x42700000
 8002080:	20000324 	.word	0x20000324
 8002084:	20000325 	.word	0x20000325

08002088 <Fuzzy_Process>:

void Fuzzy_Process()
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
	Parameters.theta = MPU6050.KalmanAngleY + THETA_OFFSET;
 800208c:	4b28      	ldr	r3, [pc, #160]	@ (8002130 <Fuzzy_Process+0xa8>)
 800208e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8002092:	f04f 0200 	mov.w	r2, #0
 8002096:	4b27      	ldr	r3, [pc, #156]	@ (8002134 <Fuzzy_Process+0xac>)
 8002098:	f7fe f860 	bl	800015c <__adddf3>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	4610      	mov	r0, r2
 80020a2:	4619      	mov	r1, r3
 80020a4:	f7fe fcc0 	bl	8000a28 <__aeabi_d2f>
 80020a8:	4603      	mov	r3, r0
 80020aa:	4a23      	ldr	r2, [pc, #140]	@ (8002138 <Fuzzy_Process+0xb0>)
 80020ac:	60d3      	str	r3, [r2, #12]
	Parameters.theta_dot = MPU6050.Gy;
 80020ae:	4b20      	ldr	r3, [pc, #128]	@ (8002130 <Fuzzy_Process+0xa8>)
 80020b0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80020b4:	4610      	mov	r0, r2
 80020b6:	4619      	mov	r1, r3
 80020b8:	f7fe fcb6 	bl	8000a28 <__aeabi_d2f>
 80020bc:	4603      	mov	r3, r0
 80020be:	4a1e      	ldr	r2, [pc, #120]	@ (8002138 <Fuzzy_Process+0xb0>)
 80020c0:	6113      	str	r3, [r2, #16]
	Parameters.input[0] = Parameters.theta * (1.0f/K_THETA);
 80020c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002138 <Fuzzy_Process+0xb0>)
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	491d      	ldr	r1, [pc, #116]	@ (800213c <Fuzzy_Process+0xb4>)
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7fe fe0b 	bl	8000ce4 <__aeabi_fmul>
 80020ce:	4603      	mov	r3, r0
 80020d0:	461a      	mov	r2, r3
 80020d2:	4b19      	ldr	r3, [pc, #100]	@ (8002138 <Fuzzy_Process+0xb0>)
 80020d4:	601a      	str	r2, [r3, #0]
	Parameters.input[1] = Parameters.theta_dot * (1.0f/K_THETA_DOT);
 80020d6:	4b18      	ldr	r3, [pc, #96]	@ (8002138 <Fuzzy_Process+0xb0>)
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	4919      	ldr	r1, [pc, #100]	@ (8002140 <Fuzzy_Process+0xb8>)
 80020dc:	4618      	mov	r0, r3
 80020de:	f7fe fe01 	bl	8000ce4 <__aeabi_fmul>
 80020e2:	4603      	mov	r3, r0
 80020e4:	461a      	mov	r2, r3
 80020e6:	4b14      	ldr	r3, [pc, #80]	@ (8002138 <Fuzzy_Process+0xb0>)
 80020e8:	605a      	str	r2, [r3, #4]
	limit_range(&(Parameters.input[0]));
 80020ea:	4813      	ldr	r0, [pc, #76]	@ (8002138 <Fuzzy_Process+0xb0>)
 80020ec:	f7ff fcd6 	bl	8001a9c <limit_range>
	limit_range(&(Parameters.input[1]));
 80020f0:	4814      	ldr	r0, [pc, #80]	@ (8002144 <Fuzzy_Process+0xbc>)
 80020f2:	f7ff fcd3 	bl	8001a9c <limit_range>
	Parameters.uk_fuzzy = (run_fuzzy(Parameters.input[0], Parameters.input[1])) * K_UK_FUZZY;
 80020f6:	4b10      	ldr	r3, [pc, #64]	@ (8002138 <Fuzzy_Process+0xb0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a0f      	ldr	r2, [pc, #60]	@ (8002138 <Fuzzy_Process+0xb0>)
 80020fc:	6852      	ldr	r2, [r2, #4]
 80020fe:	4611      	mov	r1, r2
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff f901 	bl	8001308 <run_fuzzy>
 8002106:	4603      	mov	r3, r0
 8002108:	490f      	ldr	r1, [pc, #60]	@ (8002148 <Fuzzy_Process+0xc0>)
 800210a:	4618      	mov	r0, r3
 800210c:	f7fe fdea 	bl	8000ce4 <__aeabi_fmul>
 8002110:	4603      	mov	r3, r0
 8002112:	461a      	mov	r2, r3
 8002114:	4b08      	ldr	r3, [pc, #32]	@ (8002138 <Fuzzy_Process+0xb0>)
 8002116:	609a      	str	r2, [r3, #8]
	Parameters.uk_fuzzy *= (1.0f/3199); //convert uk (-3199->3199 to -100->100)
 8002118:	4b07      	ldr	r3, [pc, #28]	@ (8002138 <Fuzzy_Process+0xb0>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	490b      	ldr	r1, [pc, #44]	@ (800214c <Fuzzy_Process+0xc4>)
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe fde0 	bl	8000ce4 <__aeabi_fmul>
 8002124:	4603      	mov	r3, r0
 8002126:	461a      	mov	r2, r3
 8002128:	4b03      	ldr	r3, [pc, #12]	@ (8002138 <Fuzzy_Process+0xb0>)
 800212a:	609a      	str	r2, [r3, #8]
}
 800212c:	bf00      	nop
 800212e:	bd80      	pop	{r7, pc}
 8002130:	200002b8 	.word	0x200002b8
 8002134:	40040000 	.word	0x40040000
 8002138:	20000310 	.word	0x20000310
 800213c:	3de38e39 	.word	0x3de38e39
 8002140:	3c23d70a 	.word	0x3c23d70a
 8002144:	20000314 	.word	0x20000314
 8002148:	4547f000 	.word	0x4547f000
 800214c:	39a3e427 	.word	0x39a3e427

08002150 <motor_forward>:

void motor_forward()
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1); //IN1
 8002154:	2201      	movs	r2, #1
 8002156:	2140      	movs	r1, #64	@ 0x40
 8002158:	480a      	ldr	r0, [pc, #40]	@ (8002184 <motor_forward+0x34>)
 800215a:	f001 f915 	bl	8003388 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0); //IN2
 800215e:	2200      	movs	r2, #0
 8002160:	2180      	movs	r1, #128	@ 0x80
 8002162:	4808      	ldr	r0, [pc, #32]	@ (8002184 <motor_forward+0x34>)
 8002164:	f001 f910 	bl	8003388 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1); //IN3
 8002168:	2201      	movs	r2, #1
 800216a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800216e:	4806      	ldr	r0, [pc, #24]	@ (8002188 <motor_forward+0x38>)
 8002170:	f001 f90a 	bl	8003388 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0); //IN4
 8002174:	2200      	movs	r2, #0
 8002176:	2120      	movs	r1, #32
 8002178:	4803      	ldr	r0, [pc, #12]	@ (8002188 <motor_forward+0x38>)
 800217a:	f001 f905 	bl	8003388 <HAL_GPIO_WritePin>
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40010800 	.word	0x40010800
 8002188:	40010c00 	.word	0x40010c00

0800218c <motor_reverse>:

void motor_reverse()
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0); //IN1
 8002190:	2200      	movs	r2, #0
 8002192:	2140      	movs	r1, #64	@ 0x40
 8002194:	480a      	ldr	r0, [pc, #40]	@ (80021c0 <motor_reverse+0x34>)
 8002196:	f001 f8f7 	bl	8003388 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1); //IN2
 800219a:	2201      	movs	r2, #1
 800219c:	2180      	movs	r1, #128	@ 0x80
 800219e:	4808      	ldr	r0, [pc, #32]	@ (80021c0 <motor_reverse+0x34>)
 80021a0:	f001 f8f2 	bl	8003388 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0); //IN3
 80021a4:	2200      	movs	r2, #0
 80021a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80021aa:	4806      	ldr	r0, [pc, #24]	@ (80021c4 <motor_reverse+0x38>)
 80021ac:	f001 f8ec 	bl	8003388 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1); //IN4
 80021b0:	2201      	movs	r2, #1
 80021b2:	2120      	movs	r1, #32
 80021b4:	4803      	ldr	r0, [pc, #12]	@ (80021c4 <motor_reverse+0x38>)
 80021b6:	f001 f8e7 	bl	8003388 <HAL_GPIO_WritePin>
}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40010800 	.word	0x40010800
 80021c4:	40010c00 	.word	0x40010c00

080021c8 <motor_stop>:

void motor_stop()
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0); //IN1
 80021cc:	2200      	movs	r2, #0
 80021ce:	2140      	movs	r1, #64	@ 0x40
 80021d0:	480c      	ldr	r0, [pc, #48]	@ (8002204 <motor_stop+0x3c>)
 80021d2:	f001 f8d9 	bl	8003388 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0); //IN2
 80021d6:	2200      	movs	r2, #0
 80021d8:	2180      	movs	r1, #128	@ 0x80
 80021da:	480a      	ldr	r0, [pc, #40]	@ (8002204 <motor_stop+0x3c>)
 80021dc:	f001 f8d4 	bl	8003388 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0); //IN3
 80021e0:	2200      	movs	r2, #0
 80021e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80021e6:	4808      	ldr	r0, [pc, #32]	@ (8002208 <motor_stop+0x40>)
 80021e8:	f001 f8ce 	bl	8003388 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0); //IN4
 80021ec:	2200      	movs	r2, #0
 80021ee:	2120      	movs	r1, #32
 80021f0:	4805      	ldr	r0, [pc, #20]	@ (8002208 <motor_stop+0x40>)
 80021f2:	f001 f8c9 	bl	8003388 <HAL_GPIO_WritePin>
	pwm_out(0);
 80021f6:	f04f 0000 	mov.w	r0, #0
 80021fa:	f000 f807 	bl	800220c <pwm_out>
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40010800 	.word	0x40010800
 8002208:	40010c00 	.word	0x40010c00

0800220c <pwm_out>:

void pwm_out(float duty) //duty 0->1 (not 0->100), uk -1->1
{
 800220c:	b590      	push	{r4, r7, lr}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
	if (duty > 1) duty = 1;
 8002214:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f7fe ff1f 	bl	800105c <__aeabi_fcmpgt>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d002      	beq.n	800222a <pwm_out+0x1e>
 8002224:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002228:	607b      	str	r3, [r7, #4]
	if (duty < 0) duty = 0;
 800222a:	f04f 0100 	mov.w	r1, #0
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7fe fef6 	bl	8001020 <__aeabi_fcmplt>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d002      	beq.n	8002240 <pwm_out+0x34>
 800223a:	f04f 0300 	mov.w	r3, #0
 800223e:	607b      	str	r3, [r7, #4]
	htim3.Instance->CCR1 = (htim3.Instance->ARR) * (duty); //hardware
 8002240:	4b15      	ldr	r3, [pc, #84]	@ (8002298 <pwm_out+0x8c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe fcf4 	bl	8000c34 <__aeabi_ui2f>
 800224c:	4603      	mov	r3, r0
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	4618      	mov	r0, r3
 8002252:	f7fe fd47 	bl	8000ce4 <__aeabi_fmul>
 8002256:	4603      	mov	r3, r0
 8002258:	461a      	mov	r2, r3
 800225a:	4b0f      	ldr	r3, [pc, #60]	@ (8002298 <pwm_out+0x8c>)
 800225c:	681c      	ldr	r4, [r3, #0]
 800225e:	4610      	mov	r0, r2
 8002260:	f7fe ff06 	bl	8001070 <__aeabi_f2uiz>
 8002264:	4603      	mov	r3, r0
 8002266:	6363      	str	r3, [r4, #52]	@ 0x34
	htim4.Instance->CCR2 = (htim4.Instance->ARR) * (duty);
 8002268:	4b0c      	ldr	r3, [pc, #48]	@ (800229c <pwm_out+0x90>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe fce0 	bl	8000c34 <__aeabi_ui2f>
 8002274:	4603      	mov	r3, r0
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe fd33 	bl	8000ce4 <__aeabi_fmul>
 800227e:	4603      	mov	r3, r0
 8002280:	461a      	mov	r2, r3
 8002282:	4b06      	ldr	r3, [pc, #24]	@ (800229c <pwm_out+0x90>)
 8002284:	681c      	ldr	r4, [r3, #0]
 8002286:	4610      	mov	r0, r2
 8002288:	f7fe fef2 	bl	8001070 <__aeabi_f2uiz>
 800228c:	4603      	mov	r3, r0
 800228e:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	bd90      	pop	{r4, r7, pc}
 8002298:	200001dc 	.word	0x200001dc
 800229c:	20000224 	.word	0x20000224

080022a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022a4:	b672      	cpsid	i
}
 80022a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022a8:	bf00      	nop
 80022aa:	e7fd      	b.n	80022a8 <Error_Handler+0x8>

080022ac <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b088      	sub	sp, #32
 80022b0:	af04      	add	r7, sp, #16
 80022b2:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80022b4:	2364      	movs	r3, #100	@ 0x64
 80022b6:	9302      	str	r3, [sp, #8]
 80022b8:	2301      	movs	r3, #1
 80022ba:	9301      	str	r3, [sp, #4]
 80022bc:	f107 030f 	add.w	r3, r7, #15
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	2301      	movs	r3, #1
 80022c4:	2275      	movs	r2, #117	@ 0x75
 80022c6:	21d0      	movs	r1, #208	@ 0xd0
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f001 fab3 	bl	8003834 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 80022ce:	7bfb      	ldrb	r3, [r7, #15]
 80022d0:	2b68      	cmp	r3, #104	@ 0x68
 80022d2:	d13d      	bne.n	8002350 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80022d8:	2364      	movs	r3, #100	@ 0x64
 80022da:	9302      	str	r3, [sp, #8]
 80022dc:	2301      	movs	r3, #1
 80022de:	9301      	str	r3, [sp, #4]
 80022e0:	f107 030e 	add.w	r3, r7, #14
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	2301      	movs	r3, #1
 80022e8:	226b      	movs	r2, #107	@ 0x6b
 80022ea:	21d0      	movs	r1, #208	@ 0xd0
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f001 f9a7 	bl	8003640 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80022f2:	2307      	movs	r3, #7
 80022f4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80022f6:	2364      	movs	r3, #100	@ 0x64
 80022f8:	9302      	str	r3, [sp, #8]
 80022fa:	2301      	movs	r3, #1
 80022fc:	9301      	str	r3, [sp, #4]
 80022fe:	f107 030e 	add.w	r3, r7, #14
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	2301      	movs	r3, #1
 8002306:	2219      	movs	r2, #25
 8002308:	21d0      	movs	r1, #208	@ 0xd0
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f001 f998 	bl	8003640 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ï¿½ 2g
        Data = 0x00;
 8002310:	2300      	movs	r3, #0
 8002312:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002314:	2364      	movs	r3, #100	@ 0x64
 8002316:	9302      	str	r3, [sp, #8]
 8002318:	2301      	movs	r3, #1
 800231a:	9301      	str	r3, [sp, #4]
 800231c:	f107 030e 	add.w	r3, r7, #14
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	2301      	movs	r3, #1
 8002324:	221c      	movs	r2, #28
 8002326:	21d0      	movs	r1, #208	@ 0xd0
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f001 f989 	bl	8003640 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ï¿½ 250 ï¿½/s
        Data = 0x00;
 800232e:	2300      	movs	r3, #0
 8002330:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002332:	2364      	movs	r3, #100	@ 0x64
 8002334:	9302      	str	r3, [sp, #8]
 8002336:	2301      	movs	r3, #1
 8002338:	9301      	str	r3, [sp, #4]
 800233a:	f107 030e 	add.w	r3, r7, #14
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	2301      	movs	r3, #1
 8002342:	221b      	movs	r2, #27
 8002344:	21d0      	movs	r1, #208	@ 0xd0
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f001 f97a 	bl	8003640 <HAL_I2C_Mem_Write>
        return 0;
 800234c:	2300      	movs	r3, #0
 800234e:	e000      	b.n	8002352 <MPU6050_Init+0xa6>
    }
    return 1;
 8002350:	2301      	movs	r3, #1
}
 8002352:	4618      	mov	r0, r3
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	0000      	movs	r0, r0
 800235c:	0000      	movs	r0, r0
	...

08002360 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8002360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002364:	b094      	sub	sp, #80	@ 0x50
 8002366:	af04      	add	r7, sp, #16
 8002368:	6078      	str	r0, [r7, #4]
 800236a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 800236c:	2364      	movs	r3, #100	@ 0x64
 800236e:	9302      	str	r3, [sp, #8]
 8002370:	230e      	movs	r3, #14
 8002372:	9301      	str	r3, [sp, #4]
 8002374:	f107 0308 	add.w	r3, r7, #8
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	2301      	movs	r3, #1
 800237c:	223b      	movs	r2, #59	@ 0x3b
 800237e:	21d0      	movs	r1, #208	@ 0xd0
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f001 fa57 	bl	8003834 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8002386:	7a3b      	ldrb	r3, [r7, #8]
 8002388:	021b      	lsls	r3, r3, #8
 800238a:	b21a      	sxth	r2, r3
 800238c:	7a7b      	ldrb	r3, [r7, #9]
 800238e:	b21b      	sxth	r3, r3
 8002390:	4313      	orrs	r3, r2
 8002392:	b21a      	sxth	r2, r3
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8002398:	7abb      	ldrb	r3, [r7, #10]
 800239a:	021b      	lsls	r3, r3, #8
 800239c:	b21a      	sxth	r2, r3
 800239e:	7afb      	ldrb	r3, [r7, #11]
 80023a0:	b21b      	sxth	r3, r3
 80023a2:	4313      	orrs	r3, r2
 80023a4:	b21a      	sxth	r2, r3
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80023aa:	7b3b      	ldrb	r3, [r7, #12]
 80023ac:	021b      	lsls	r3, r3, #8
 80023ae:	b21a      	sxth	r2, r3
 80023b0:	7b7b      	ldrb	r3, [r7, #13]
 80023b2:	b21b      	sxth	r3, r3
 80023b4:	4313      	orrs	r3, r2
 80023b6:	b21a      	sxth	r2, r3
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 80023bc:	7bbb      	ldrb	r3, [r7, #14]
 80023be:	021b      	lsls	r3, r3, #8
 80023c0:	b21a      	sxth	r2, r3
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
 80023c4:	b21b      	sxth	r3, r3
 80023c6:	4313      	orrs	r3, r2
 80023c8:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 80023ca:	7c3b      	ldrb	r3, [r7, #16]
 80023cc:	021b      	lsls	r3, r3, #8
 80023ce:	b21a      	sxth	r2, r3
 80023d0:	7c7b      	ldrb	r3, [r7, #17]
 80023d2:	b21b      	sxth	r3, r3
 80023d4:	4313      	orrs	r3, r2
 80023d6:	b21a      	sxth	r2, r3
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 80023dc:	7cbb      	ldrb	r3, [r7, #18]
 80023de:	021b      	lsls	r3, r3, #8
 80023e0:	b21a      	sxth	r2, r3
 80023e2:	7cfb      	ldrb	r3, [r7, #19]
 80023e4:	b21b      	sxth	r3, r3
 80023e6:	4313      	orrs	r3, r2
 80023e8:	b21a      	sxth	r2, r3
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 80023ee:	7d3b      	ldrb	r3, [r7, #20]
 80023f0:	021b      	lsls	r3, r3, #8
 80023f2:	b21a      	sxth	r2, r3
 80023f4:	7d7b      	ldrb	r3, [r7, #21]
 80023f6:	b21b      	sxth	r3, r3
 80023f8:	4313      	orrs	r3, r2
 80023fa:	b21a      	sxth	r2, r3
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002406:	4618      	mov	r0, r3
 8002408:	f7fd fff4 	bl	80003f4 <__aeabi_i2d>
 800240c:	f04f 0200 	mov.w	r2, #0
 8002410:	4b95      	ldr	r3, [pc, #596]	@ (8002668 <MPU6050_Read_All+0x308>)
 8002412:	f7fe f983 	bl	800071c <__aeabi_ddiv>
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	6839      	ldr	r1, [r7, #0]
 800241c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002426:	4618      	mov	r0, r3
 8002428:	f7fd ffe4 	bl	80003f4 <__aeabi_i2d>
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	4b8d      	ldr	r3, [pc, #564]	@ (8002668 <MPU6050_Read_All+0x308>)
 8002432:	f7fe f973 	bl	800071c <__aeabi_ddiv>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	6839      	ldr	r1, [r7, #0]
 800243c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002446:	4618      	mov	r0, r3
 8002448:	f7fd ffd4 	bl	80003f4 <__aeabi_i2d>
 800244c:	a380      	add	r3, pc, #512	@ (adr r3, 8002650 <MPU6050_Read_All+0x2f0>)
 800244e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002452:	f7fe f963 	bl	800071c <__aeabi_ddiv>
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	6839      	ldr	r1, [r7, #0]
 800245c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8002460:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8002464:	4618      	mov	r0, r3
 8002466:	f7fe fbe9 	bl	8000c3c <__aeabi_i2f>
 800246a:	4603      	mov	r3, r0
 800246c:	497f      	ldr	r1, [pc, #508]	@ (800266c <MPU6050_Read_All+0x30c>)
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe fcec 	bl	8000e4c <__aeabi_fdiv>
 8002474:	4603      	mov	r3, r0
 8002476:	497e      	ldr	r1, [pc, #504]	@ (8002670 <MPU6050_Read_All+0x310>)
 8002478:	4618      	mov	r0, r3
 800247a:	f7fe fb2b 	bl	8000ad4 <__addsf3>
 800247e:	4603      	mov	r3, r0
 8002480:	461a      	mov	r2, r3
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	641a      	str	r2, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800248c:	4618      	mov	r0, r3
 800248e:	f7fd ffb1 	bl	80003f4 <__aeabi_i2d>
 8002492:	a371      	add	r3, pc, #452	@ (adr r3, 8002658 <MPU6050_Read_All+0x2f8>)
 8002494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002498:	f7fe f940 	bl	800071c <__aeabi_ddiv>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	6839      	ldr	r1, [r7, #0]
 80024a2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7fd ffa1 	bl	80003f4 <__aeabi_i2d>
 80024b2:	a369      	add	r3, pc, #420	@ (adr r3, 8002658 <MPU6050_Read_All+0x2f8>)
 80024b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b8:	f7fe f930 	bl	800071c <__aeabi_ddiv>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	6839      	ldr	r1, [r7, #0]
 80024c2:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fd ff91 	bl	80003f4 <__aeabi_i2d>
 80024d2:	a361      	add	r3, pc, #388	@ (adr r3, 8002658 <MPU6050_Read_All+0x2f8>)
 80024d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d8:	f7fe f920 	bl	800071c <__aeabi_ddiv>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	6839      	ldr	r1, [r7, #0]
 80024e2:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 80024e6:	f000 fcb3 	bl	8002e50 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	4b61      	ldr	r3, [pc, #388]	@ (8002674 <MPU6050_Read_All+0x314>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fd ff6e 	bl	80003d4 <__aeabi_ui2d>
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	4b5e      	ldr	r3, [pc, #376]	@ (8002678 <MPU6050_Read_All+0x318>)
 80024fe:	f7fe f90d 	bl	800071c <__aeabi_ddiv>
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 800250a:	f000 fca1 	bl	8002e50 <HAL_GetTick>
 800250e:	4603      	mov	r3, r0
 8002510:	4a58      	ldr	r2, [pc, #352]	@ (8002674 <MPU6050_Read_All+0x314>)
 8002512:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	f9b3 3000 	ldrsh.w	r3, [r3]
 800251a:	461a      	mov	r2, r3
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002522:	fb03 f202 	mul.w	r2, r3, r2
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800252c:	4619      	mov	r1, r3
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002534:	fb01 f303 	mul.w	r3, r1, r3
 8002538:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 800253a:	4618      	mov	r0, r3
 800253c:	f7fd ff5a 	bl	80003f4 <__aeabi_i2d>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4610      	mov	r0, r2
 8002546:	4619      	mov	r1, r3
 8002548:	f003 fc10 	bl	8005d6c <sqrt>
 800254c:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0)
 8002550:	f04f 0200 	mov.w	r2, #0
 8002554:	f04f 0300 	mov.w	r3, #0
 8002558:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800255c:	f7fe fa1c 	bl	8000998 <__aeabi_dcmpeq>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d119      	bne.n	800259a <MPU6050_Read_All+0x23a>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800256c:	4618      	mov	r0, r3
 800256e:	f7fd ff41 	bl	80003f4 <__aeabi_i2d>
 8002572:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002576:	f7fe f8d1 	bl	800071c <__aeabi_ddiv>
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	4610      	mov	r0, r2
 8002580:	4619      	mov	r1, r3
 8002582:	f003 fc19 	bl	8005db8 <atan>
 8002586:	a336      	add	r3, pc, #216	@ (adr r3, 8002660 <MPU6050_Read_All+0x300>)
 8002588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258c:	f7fd ff9c 	bl	80004c8 <__aeabi_dmul>
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8002598:	e005      	b.n	80025a6 <MPU6050_Read_All+0x246>
    }
    else
    {
        roll = 0.0;
 800259a:	f04f 0200 	mov.w	r2, #0
 800259e:	f04f 0300 	mov.w	r3, #0
 80025a2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ac:	425b      	negs	r3, r3
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fd ff20 	bl	80003f4 <__aeabi_i2d>
 80025b4:	4682      	mov	sl, r0
 80025b6:	468b      	mov	fp, r1
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fd ff18 	bl	80003f4 <__aeabi_i2d>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	4650      	mov	r0, sl
 80025ca:	4659      	mov	r1, fp
 80025cc:	f003 fbcc 	bl	8005d68 <atan2>
 80025d0:	a323      	add	r3, pc, #140	@ (adr r3, 8002660 <MPU6050_Read_All+0x300>)
 80025d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d6:	f7fd ff77 	bl	80004c8 <__aeabi_dmul>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 80025e2:	f04f 0200 	mov.w	r2, #0
 80025e6:	4b25      	ldr	r3, [pc, #148]	@ (800267c <MPU6050_Read_All+0x31c>)
 80025e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025ec:	f7fe f9de 	bl	80009ac <__aeabi_dcmplt>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00a      	beq.n	800260c <MPU6050_Read_All+0x2ac>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80025fc:	f04f 0200 	mov.w	r2, #0
 8002600:	4b1f      	ldr	r3, [pc, #124]	@ (8002680 <MPU6050_Read_All+0x320>)
 8002602:	f7fe f9f1 	bl	80009e8 <__aeabi_dcmpgt>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d114      	bne.n	8002636 <MPU6050_Read_All+0x2d6>
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	4b1b      	ldr	r3, [pc, #108]	@ (8002680 <MPU6050_Read_All+0x320>)
 8002612:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002616:	f7fe f9e7 	bl	80009e8 <__aeabi_dcmpgt>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d033      	beq.n	8002688 <MPU6050_Read_All+0x328>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	4b14      	ldr	r3, [pc, #80]	@ (800267c <MPU6050_Read_All+0x31c>)
 800262c:	f7fe f9be 	bl	80009ac <__aeabi_dcmplt>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d028      	beq.n	8002688 <MPU6050_Read_All+0x328>
    {
        KalmanY.angle = pitch;
 8002636:	4913      	ldr	r1, [pc, #76]	@ (8002684 <MPU6050_Read_All+0x324>)
 8002638:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800263c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8002640:	6839      	ldr	r1, [r7, #0]
 8002642:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002646:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 800264a:	e030      	b.n	80026ae <MPU6050_Read_All+0x34e>
 800264c:	f3af 8000 	nop.w
 8002650:	00000000 	.word	0x00000000
 8002654:	40cc2900 	.word	0x40cc2900
 8002658:	00000000 	.word	0x00000000
 800265c:	40606000 	.word	0x40606000
 8002660:	1a63c1f8 	.word	0x1a63c1f8
 8002664:	404ca5dc 	.word	0x404ca5dc
 8002668:	40d00000 	.word	0x40d00000
 800266c:	43aa0000 	.word	0x43aa0000
 8002670:	42121eb8 	.word	0x42121eb8
 8002674:	20000328 	.word	0x20000328
 8002678:	408f4000 	.word	0x408f4000
 800267c:	c0568000 	.word	0xc0568000
 8002680:	40568000 	.word	0x40568000
 8002684:	20000048 	.word	0x20000048
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800268e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002692:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002696:	e9cd 2300 	strd	r2, r3, [sp]
 800269a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800269e:	481c      	ldr	r0, [pc, #112]	@ (8002710 <MPU6050_Read_All+0x3b0>)
 80026a0:	f000 f83c 	bl	800271c <Kalman_getAngle>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	6839      	ldr	r1, [r7, #0]
 80026aa:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80026b4:	4690      	mov	r8, r2
 80026b6:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80026ba:	f04f 0200 	mov.w	r2, #0
 80026be:	4b15      	ldr	r3, [pc, #84]	@ (8002714 <MPU6050_Read_All+0x3b4>)
 80026c0:	4640      	mov	r0, r8
 80026c2:	4649      	mov	r1, r9
 80026c4:	f7fe f990 	bl	80009e8 <__aeabi_dcmpgt>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d008      	beq.n	80026e0 <MPU6050_Read_All+0x380>
        DataStruct->Gx = -DataStruct->Gx;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80026d4:	4614      	mov	r4, r2
 80026d6:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80026e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80026ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80026ee:	e9cd 2300 	strd	r2, r3, [sp]
 80026f2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80026f6:	4808      	ldr	r0, [pc, #32]	@ (8002718 <MPU6050_Read_All+0x3b8>)
 80026f8:	f000 f810 	bl	800271c <Kalman_getAngle>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	6839      	ldr	r1, [r7, #0]
 8002702:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
}
 8002706:	bf00      	nop
 8002708:	3740      	adds	r7, #64	@ 0x40
 800270a:	46bd      	mov	sp, r7
 800270c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002710:	20000048 	.word	0x20000048
 8002714:	40568000 	.word	0x40568000
 8002718:	20000000 	.word	0x20000000

0800271c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 800271c:	b5b0      	push	{r4, r5, r7, lr}
 800271e:	b092      	sub	sp, #72	@ 0x48
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800272e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8002732:	f7fd fd11 	bl	8000158 <__aeabi_dsub>
 8002736:	4602      	mov	r2, r0
 8002738:	460b      	mov	r3, r1
 800273a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += dt * rate;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002744:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002748:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800274c:	f7fd febc 	bl	80004c8 <__aeabi_dmul>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	4620      	mov	r0, r4
 8002756:	4629      	mov	r1, r5
 8002758:	f7fd fd00 	bl	800015c <__adddf3>
 800275c:	4602      	mov	r2, r0
 800275e:	460b      	mov	r3, r1
 8002760:	68f9      	ldr	r1, [r7, #12]
 8002762:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8002772:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002776:	f7fd fea7 	bl	80004c8 <__aeabi_dmul>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	4610      	mov	r0, r2
 8002780:	4619      	mov	r1, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002788:	f7fd fce6 	bl	8000158 <__aeabi_dsub>
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	4610      	mov	r0, r2
 8002792:	4619      	mov	r1, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800279a:	f7fd fcdd 	bl	8000158 <__aeabi_dsub>
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
 80027a2:	4610      	mov	r0, r2
 80027a4:	4619      	mov	r1, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ac:	f7fd fcd6 	bl	800015c <__adddf3>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	4610      	mov	r0, r2
 80027b6:	4619      	mov	r1, r3
 80027b8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80027bc:	f7fd fe84 	bl	80004c8 <__aeabi_dmul>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4620      	mov	r0, r4
 80027c6:	4629      	mov	r1, r5
 80027c8:	f7fd fcc8 	bl	800015c <__adddf3>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	68f9      	ldr	r1, [r7, #12]
 80027d2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80027e2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80027e6:	f7fd fe6f 	bl	80004c8 <__aeabi_dmul>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	4620      	mov	r0, r4
 80027f0:	4629      	mov	r1, r5
 80027f2:	f7fd fcb1 	bl	8000158 <__aeabi_dsub>
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	68f9      	ldr	r1, [r7, #12]
 80027fc:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800280c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002810:	f7fd fe5a 	bl	80004c8 <__aeabi_dmul>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	4620      	mov	r0, r4
 800281a:	4629      	mov	r1, r5
 800281c:	f7fd fc9c 	bl	8000158 <__aeabi_dsub>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	68f9      	ldr	r1, [r7, #12]
 8002826:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002836:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800283a:	f7fd fe45 	bl	80004c8 <__aeabi_dmul>
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
 8002842:	4620      	mov	r0, r4
 8002844:	4629      	mov	r1, r5
 8002846:	f7fd fc89 	bl	800015c <__adddf3>
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	68f9      	ldr	r1, [r7, #12]
 8002850:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002860:	f7fd fc7c 	bl	800015c <__adddf3>
 8002864:	4602      	mov	r2, r0
 8002866:	460b      	mov	r3, r1
 8002868:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8002872:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002876:	f7fd ff51 	bl	800071c <__aeabi_ddiv>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8002888:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800288c:	f7fd ff46 	bl	800071c <__aeabi_ddiv>
 8002890:	4602      	mov	r2, r0
 8002892:	460b      	mov	r3, r1
 8002894:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800289e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028a2:	f7fd fc59 	bl	8000158 <__aeabi_dsub>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    Kalman->angle += K[0] * y;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80028b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80028b8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80028bc:	f7fd fe04 	bl	80004c8 <__aeabi_dmul>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4620      	mov	r0, r4
 80028c6:	4629      	mov	r1, r5
 80028c8:	f7fd fc48 	bl	800015c <__adddf3>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	68f9      	ldr	r1, [r7, #12]
 80028d2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80028dc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80028e0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80028e4:	f7fd fdf0 	bl	80004c8 <__aeabi_dmul>
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	4620      	mov	r0, r4
 80028ee:	4629      	mov	r1, r5
 80028f0:	f7fd fc34 	bl	800015c <__adddf3>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	68f9      	ldr	r1, [r7, #12]
 80028fa:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002904:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    double P01_temp = Kalman->P[0][1];
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800290e:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8002918:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800291c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002920:	f7fd fdd2 	bl	80004c8 <__aeabi_dmul>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	4620      	mov	r0, r4
 800292a:	4629      	mov	r1, r5
 800292c:	f7fd fc14 	bl	8000158 <__aeabi_dsub>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	68f9      	ldr	r1, [r7, #12]
 8002936:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8002940:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002944:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002948:	f7fd fdbe 	bl	80004c8 <__aeabi_dmul>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4620      	mov	r0, r4
 8002952:	4629      	mov	r1, r5
 8002954:	f7fd fc00 	bl	8000158 <__aeabi_dsub>
 8002958:	4602      	mov	r2, r0
 800295a:	460b      	mov	r3, r1
 800295c:	68f9      	ldr	r1, [r7, #12]
 800295e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8002968:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800296c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002970:	f7fd fdaa 	bl	80004c8 <__aeabi_dmul>
 8002974:	4602      	mov	r2, r0
 8002976:	460b      	mov	r3, r1
 8002978:	4620      	mov	r0, r4
 800297a:	4629      	mov	r1, r5
 800297c:	f7fd fbec 	bl	8000158 <__aeabi_dsub>
 8002980:	4602      	mov	r2, r0
 8002982:	460b      	mov	r3, r1
 8002984:	68f9      	ldr	r1, [r7, #12]
 8002986:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8002990:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002994:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002998:	f7fd fd96 	bl	80004c8 <__aeabi_dmul>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4620      	mov	r0, r4
 80029a2:	4629      	mov	r1, r5
 80029a4:	f7fd fbd8 	bl	8000158 <__aeabi_dsub>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	68f9      	ldr	r1, [r7, #12]
 80029ae:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 80029b8:	4610      	mov	r0, r2
 80029ba:	4619      	mov	r1, r3
 80029bc:	3748      	adds	r7, #72	@ 0x48
 80029be:	46bd      	mov	sp, r7
 80029c0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080029c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80029ca:	4b15      	ldr	r3, [pc, #84]	@ (8002a20 <HAL_MspInit+0x5c>)
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	4a14      	ldr	r2, [pc, #80]	@ (8002a20 <HAL_MspInit+0x5c>)
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	6193      	str	r3, [r2, #24]
 80029d6:	4b12      	ldr	r3, [pc, #72]	@ (8002a20 <HAL_MspInit+0x5c>)
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	60bb      	str	r3, [r7, #8]
 80029e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002a20 <HAL_MspInit+0x5c>)
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	4a0e      	ldr	r2, [pc, #56]	@ (8002a20 <HAL_MspInit+0x5c>)
 80029e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029ec:	61d3      	str	r3, [r2, #28]
 80029ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002a20 <HAL_MspInit+0x5c>)
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029f6:	607b      	str	r3, [r7, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80029fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002a24 <HAL_MspInit+0x60>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	4a04      	ldr	r2, [pc, #16]	@ (8002a24 <HAL_MspInit+0x60>)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a16:	bf00      	nop
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr
 8002a20:	40021000 	.word	0x40021000
 8002a24:	40010000 	.word	0x40010000

08002a28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b08a      	sub	sp, #40	@ 0x28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a30:	f107 0314 	add.w	r3, r7, #20
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	605a      	str	r2, [r3, #4]
 8002a3a:	609a      	str	r2, [r3, #8]
 8002a3c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a1d      	ldr	r2, [pc, #116]	@ (8002ab8 <HAL_I2C_MspInit+0x90>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d132      	bne.n	8002aae <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a48:	4b1c      	ldr	r3, [pc, #112]	@ (8002abc <HAL_I2C_MspInit+0x94>)
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	4a1b      	ldr	r2, [pc, #108]	@ (8002abc <HAL_I2C_MspInit+0x94>)
 8002a4e:	f043 0308 	orr.w	r3, r3, #8
 8002a52:	6193      	str	r3, [r2, #24]
 8002a54:	4b19      	ldr	r3, [pc, #100]	@ (8002abc <HAL_I2C_MspInit+0x94>)
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	f003 0308 	and.w	r3, r3, #8
 8002a5c:	613b      	str	r3, [r7, #16]
 8002a5e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a60:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a66:	2312      	movs	r3, #18
 8002a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a6e:	f107 0314 	add.w	r3, r7, #20
 8002a72:	4619      	mov	r1, r3
 8002a74:	4812      	ldr	r0, [pc, #72]	@ (8002ac0 <HAL_I2C_MspInit+0x98>)
 8002a76:	f000 fb03 	bl	8003080 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002a7a:	4b12      	ldr	r3, [pc, #72]	@ (8002ac4 <HAL_I2C_MspInit+0x9c>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a82:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002a86:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8a:	f043 0302 	orr.w	r3, r3, #2
 8002a8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a90:	4a0c      	ldr	r2, [pc, #48]	@ (8002ac4 <HAL_I2C_MspInit+0x9c>)
 8002a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a94:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a96:	4b09      	ldr	r3, [pc, #36]	@ (8002abc <HAL_I2C_MspInit+0x94>)
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	4a08      	ldr	r2, [pc, #32]	@ (8002abc <HAL_I2C_MspInit+0x94>)
 8002a9c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002aa0:	61d3      	str	r3, [r2, #28]
 8002aa2:	4b06      	ldr	r3, [pc, #24]	@ (8002abc <HAL_I2C_MspInit+0x94>)
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002aae:	bf00      	nop
 8002ab0:	3728      	adds	r7, #40	@ 0x28
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40005400 	.word	0x40005400
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	40010c00 	.word	0x40010c00
 8002ac4:	40010000 	.word	0x40010000

08002ac8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8002b0c <HAL_TIM_Base_MspInit+0x44>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d113      	bne.n	8002b02 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ada:	4b0d      	ldr	r3, [pc, #52]	@ (8002b10 <HAL_TIM_Base_MspInit+0x48>)
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	4a0c      	ldr	r2, [pc, #48]	@ (8002b10 <HAL_TIM_Base_MspInit+0x48>)
 8002ae0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002ae4:	6193      	str	r3, [r2, #24]
 8002ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8002b10 <HAL_TIM_Base_MspInit+0x48>)
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002af2:	2200      	movs	r2, #0
 8002af4:	2100      	movs	r1, #0
 8002af6:	2019      	movs	r0, #25
 8002af8:	f000 fa8b 	bl	8003012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002afc:	2019      	movs	r0, #25
 8002afe:	f000 faa4 	bl	800304a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002b02:	bf00      	nop
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40012c00 	.word	0x40012c00
 8002b10:	40021000 	.word	0x40021000

08002b14 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a12      	ldr	r2, [pc, #72]	@ (8002b6c <HAL_TIM_PWM_MspInit+0x58>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d10c      	bne.n	8002b40 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b26:	4b12      	ldr	r3, [pc, #72]	@ (8002b70 <HAL_TIM_PWM_MspInit+0x5c>)
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	4a11      	ldr	r2, [pc, #68]	@ (8002b70 <HAL_TIM_PWM_MspInit+0x5c>)
 8002b2c:	f043 0302 	orr.w	r3, r3, #2
 8002b30:	61d3      	str	r3, [r2, #28]
 8002b32:	4b0f      	ldr	r3, [pc, #60]	@ (8002b70 <HAL_TIM_PWM_MspInit+0x5c>)
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002b3e:	e010      	b.n	8002b62 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a0b      	ldr	r2, [pc, #44]	@ (8002b74 <HAL_TIM_PWM_MspInit+0x60>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d10b      	bne.n	8002b62 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b4a:	4b09      	ldr	r3, [pc, #36]	@ (8002b70 <HAL_TIM_PWM_MspInit+0x5c>)
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	4a08      	ldr	r2, [pc, #32]	@ (8002b70 <HAL_TIM_PWM_MspInit+0x5c>)
 8002b50:	f043 0304 	orr.w	r3, r3, #4
 8002b54:	61d3      	str	r3, [r2, #28]
 8002b56:	4b06      	ldr	r3, [pc, #24]	@ (8002b70 <HAL_TIM_PWM_MspInit+0x5c>)
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	f003 0304 	and.w	r3, r3, #4
 8002b5e:	60bb      	str	r3, [r7, #8]
 8002b60:	68bb      	ldr	r3, [r7, #8]
}
 8002b62:	bf00      	nop
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr
 8002b6c:	40000400 	.word	0x40000400
 8002b70:	40021000 	.word	0x40021000
 8002b74:	40000800 	.word	0x40000800

08002b78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b08a      	sub	sp, #40	@ 0x28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b80:	f107 0314 	add.w	r3, r7, #20
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	605a      	str	r2, [r3, #4]
 8002b8a:	609a      	str	r2, [r3, #8]
 8002b8c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a27      	ldr	r2, [pc, #156]	@ (8002c30 <HAL_TIM_MspPostInit+0xb8>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d12a      	bne.n	8002bee <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b98:	4b26      	ldr	r3, [pc, #152]	@ (8002c34 <HAL_TIM_MspPostInit+0xbc>)
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	4a25      	ldr	r2, [pc, #148]	@ (8002c34 <HAL_TIM_MspPostInit+0xbc>)
 8002b9e:	f043 0308 	orr.w	r3, r3, #8
 8002ba2:	6193      	str	r3, [r2, #24]
 8002ba4:	4b23      	ldr	r3, [pc, #140]	@ (8002c34 <HAL_TIM_MspPostInit+0xbc>)
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	f003 0308 	and.w	r3, r3, #8
 8002bac:	613b      	str	r3, [r7, #16]
 8002bae:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002bb0:	2310      	movs	r3, #16
 8002bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bbc:	f107 0314 	add.w	r3, r7, #20
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	481d      	ldr	r0, [pc, #116]	@ (8002c38 <HAL_TIM_MspPostInit+0xc0>)
 8002bc4:	f000 fa5c 	bl	8003080 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002bc8:	4b1c      	ldr	r3, [pc, #112]	@ (8002c3c <HAL_TIM_MspPostInit+0xc4>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002bd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002bdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002be4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002be6:	4a15      	ldr	r2, [pc, #84]	@ (8002c3c <HAL_TIM_MspPostInit+0xc4>)
 8002be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bea:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002bec:	e01c      	b.n	8002c28 <HAL_TIM_MspPostInit+0xb0>
  else if(htim->Instance==TIM4)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a13      	ldr	r2, [pc, #76]	@ (8002c40 <HAL_TIM_MspPostInit+0xc8>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d117      	bne.n	8002c28 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8002c34 <HAL_TIM_MspPostInit+0xbc>)
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8002c34 <HAL_TIM_MspPostInit+0xbc>)
 8002bfe:	f043 0308 	orr.w	r3, r3, #8
 8002c02:	6193      	str	r3, [r2, #24]
 8002c04:	4b0b      	ldr	r3, [pc, #44]	@ (8002c34 <HAL_TIM_MspPostInit+0xbc>)
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c10:	23c0      	movs	r3, #192	@ 0xc0
 8002c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c14:	2302      	movs	r3, #2
 8002c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c1c:	f107 0314 	add.w	r3, r7, #20
 8002c20:	4619      	mov	r1, r3
 8002c22:	4805      	ldr	r0, [pc, #20]	@ (8002c38 <HAL_TIM_MspPostInit+0xc0>)
 8002c24:	f000 fa2c 	bl	8003080 <HAL_GPIO_Init>
}
 8002c28:	bf00      	nop
 8002c2a:	3728      	adds	r7, #40	@ 0x28
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40000400 	.word	0x40000400
 8002c34:	40021000 	.word	0x40021000
 8002c38:	40010c00 	.word	0x40010c00
 8002c3c:	40010000 	.word	0x40010000
 8002c40:	40000800 	.word	0x40000800

08002c44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b088      	sub	sp, #32
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c4c:	f107 0310 	add.w	r3, r7, #16
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	605a      	str	r2, [r3, #4]
 8002c56:	609a      	str	r2, [r3, #8]
 8002c58:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a1c      	ldr	r2, [pc, #112]	@ (8002cd0 <HAL_UART_MspInit+0x8c>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d131      	bne.n	8002cc8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c64:	4b1b      	ldr	r3, [pc, #108]	@ (8002cd4 <HAL_UART_MspInit+0x90>)
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	4a1a      	ldr	r2, [pc, #104]	@ (8002cd4 <HAL_UART_MspInit+0x90>)
 8002c6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c6e:	6193      	str	r3, [r2, #24]
 8002c70:	4b18      	ldr	r3, [pc, #96]	@ (8002cd4 <HAL_UART_MspInit+0x90>)
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c7c:	4b15      	ldr	r3, [pc, #84]	@ (8002cd4 <HAL_UART_MspInit+0x90>)
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	4a14      	ldr	r2, [pc, #80]	@ (8002cd4 <HAL_UART_MspInit+0x90>)
 8002c82:	f043 0304 	orr.w	r3, r3, #4
 8002c86:	6193      	str	r3, [r2, #24]
 8002c88:	4b12      	ldr	r3, [pc, #72]	@ (8002cd4 <HAL_UART_MspInit+0x90>)
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	60bb      	str	r3, [r7, #8]
 8002c92:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca2:	f107 0310 	add.w	r3, r7, #16
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	480b      	ldr	r0, [pc, #44]	@ (8002cd8 <HAL_UART_MspInit+0x94>)
 8002caa:	f000 f9e9 	bl	8003080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002cae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002cb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cbc:	f107 0310 	add.w	r3, r7, #16
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4805      	ldr	r0, [pc, #20]	@ (8002cd8 <HAL_UART_MspInit+0x94>)
 8002cc4:	f000 f9dc 	bl	8003080 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002cc8:	bf00      	nop
 8002cca:	3720      	adds	r7, #32
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40013800 	.word	0x40013800
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	40010800 	.word	0x40010800

08002cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ce0:	bf00      	nop
 8002ce2:	e7fd      	b.n	8002ce0 <NMI_Handler+0x4>

08002ce4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ce8:	bf00      	nop
 8002cea:	e7fd      	b.n	8002ce8 <HardFault_Handler+0x4>

08002cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cf0:	bf00      	nop
 8002cf2:	e7fd      	b.n	8002cf0 <MemManage_Handler+0x4>

08002cf4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cf8:	bf00      	nop
 8002cfa:	e7fd      	b.n	8002cf8 <BusFault_Handler+0x4>

08002cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d00:	bf00      	nop
 8002d02:	e7fd      	b.n	8002d00 <UsageFault_Handler+0x4>

08002d04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d08:	bf00      	nop
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bc80      	pop	{r7}
 8002d0e:	4770      	bx	lr

08002d10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d14:	bf00      	nop
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr

08002d1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d20:	bf00      	nop
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr

08002d28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d2c:	f000 f87e 	bl	8002e2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d30:	bf00      	nop
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d38:	4802      	ldr	r0, [pc, #8]	@ (8002d44 <TIM1_UP_IRQHandler+0x10>)
 8002d3a:	f002 f93b 	bl	8004fb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002d3e:	bf00      	nop
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20000194 	.word	0x20000194

08002d48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
     }
 8002d4c:	bf00      	nop
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr

08002d54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
     bl  SystemInit
 8002d54:	f7ff fff8 	bl	8002d48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d58:	480b      	ldr	r0, [pc, #44]	@ (8002d88 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002d5a:	490c      	ldr	r1, [pc, #48]	@ (8002d8c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002d5c:	4a0c      	ldr	r2, [pc, #48]	@ (8002d90 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002d5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d60:	e002      	b.n	8002d68 <LoopCopyDataInit>

08002d62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d66:	3304      	adds	r3, #4

08002d68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d6c:	d3f9      	bcc.n	8002d62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d6e:	4a09      	ldr	r2, [pc, #36]	@ (8002d94 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002d70:	4c09      	ldr	r4, [pc, #36]	@ (8002d98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d74:	e001      	b.n	8002d7a <LoopFillZerobss>

08002d76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d78:	3204      	adds	r2, #4

08002d7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d7c:	d3fb      	bcc.n	8002d76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d7e:	f002 ffcf 	bl	8005d20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d82:	f7fe feb1 	bl	8001ae8 <main>
  bx lr
 8002d86:	4770      	bx	lr
  ldr r0, =_sdata
 8002d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d8c:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8002d90:	080064f8 	.word	0x080064f8
  ldr r2, =_sbss
 8002d94:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8002d98:	20000468 	.word	0x20000468

08002d9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d9c:	e7fe      	b.n	8002d9c <ADC1_2_IRQHandler>
	...

08002da0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002da4:	4b08      	ldr	r3, [pc, #32]	@ (8002dc8 <HAL_Init+0x28>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a07      	ldr	r2, [pc, #28]	@ (8002dc8 <HAL_Init+0x28>)
 8002daa:	f043 0310 	orr.w	r3, r3, #16
 8002dae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002db0:	2003      	movs	r0, #3
 8002db2:	f000 f923 	bl	8002ffc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002db6:	200f      	movs	r0, #15
 8002db8:	f000 f808 	bl	8002dcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dbc:	f7ff fe02 	bl	80029c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40022000 	.word	0x40022000

08002dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dd4:	4b12      	ldr	r3, [pc, #72]	@ (8002e20 <HAL_InitTick+0x54>)
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	4b12      	ldr	r3, [pc, #72]	@ (8002e24 <HAL_InitTick+0x58>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	4619      	mov	r1, r3
 8002dde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002de2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 f93b 	bl	8003066 <HAL_SYSTICK_Config>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e00e      	b.n	8002e18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b0f      	cmp	r3, #15
 8002dfe:	d80a      	bhi.n	8002e16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e00:	2200      	movs	r2, #0
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	f04f 30ff 	mov.w	r0, #4294967295
 8002e08:	f000 f903 	bl	8003012 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e0c:	4a06      	ldr	r2, [pc, #24]	@ (8002e28 <HAL_InitTick+0x5c>)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	e000      	b.n	8002e18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	20000090 	.word	0x20000090
 8002e24:	20000098 	.word	0x20000098
 8002e28:	20000094 	.word	0x20000094

08002e2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e30:	4b05      	ldr	r3, [pc, #20]	@ (8002e48 <HAL_IncTick+0x1c>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	461a      	mov	r2, r3
 8002e36:	4b05      	ldr	r3, [pc, #20]	@ (8002e4c <HAL_IncTick+0x20>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	4a03      	ldr	r2, [pc, #12]	@ (8002e4c <HAL_IncTick+0x20>)
 8002e3e:	6013      	str	r3, [r2, #0]
}
 8002e40:	bf00      	nop
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bc80      	pop	{r7}
 8002e46:	4770      	bx	lr
 8002e48:	20000098 	.word	0x20000098
 8002e4c:	2000032c 	.word	0x2000032c

08002e50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  return uwTick;
 8002e54:	4b02      	ldr	r3, [pc, #8]	@ (8002e60 <HAL_GetTick+0x10>)
 8002e56:	681b      	ldr	r3, [r3, #0]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bc80      	pop	{r7}
 8002e5e:	4770      	bx	lr
 8002e60:	2000032c 	.word	0x2000032c

08002e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e74:	4b0c      	ldr	r3, [pc, #48]	@ (8002ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e80:	4013      	ands	r3, r2
 8002e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e96:	4a04      	ldr	r2, [pc, #16]	@ (8002ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	60d3      	str	r3, [r2, #12]
}
 8002e9c:	bf00      	nop
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bc80      	pop	{r7}
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	e000ed00 	.word	0xe000ed00

08002eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eb0:	4b04      	ldr	r3, [pc, #16]	@ (8002ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	0a1b      	lsrs	r3, r3, #8
 8002eb6:	f003 0307 	and.w	r3, r3, #7
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	e000ed00 	.word	0xe000ed00

08002ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	db0b      	blt.n	8002ef2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	f003 021f 	and.w	r2, r3, #31
 8002ee0:	4906      	ldr	r1, [pc, #24]	@ (8002efc <__NVIC_EnableIRQ+0x34>)
 8002ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee6:	095b      	lsrs	r3, r3, #5
 8002ee8:	2001      	movs	r0, #1
 8002eea:	fa00 f202 	lsl.w	r2, r0, r2
 8002eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bc80      	pop	{r7}
 8002efa:	4770      	bx	lr
 8002efc:	e000e100 	.word	0xe000e100

08002f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	6039      	str	r1, [r7, #0]
 8002f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	db0a      	blt.n	8002f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	490c      	ldr	r1, [pc, #48]	@ (8002f4c <__NVIC_SetPriority+0x4c>)
 8002f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1e:	0112      	lsls	r2, r2, #4
 8002f20:	b2d2      	uxtb	r2, r2
 8002f22:	440b      	add	r3, r1
 8002f24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f28:	e00a      	b.n	8002f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	4908      	ldr	r1, [pc, #32]	@ (8002f50 <__NVIC_SetPriority+0x50>)
 8002f30:	79fb      	ldrb	r3, [r7, #7]
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	3b04      	subs	r3, #4
 8002f38:	0112      	lsls	r2, r2, #4
 8002f3a:	b2d2      	uxtb	r2, r2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	761a      	strb	r2, [r3, #24]
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bc80      	pop	{r7}
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	e000e100 	.word	0xe000e100
 8002f50:	e000ed00 	.word	0xe000ed00

08002f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b089      	sub	sp, #36	@ 0x24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f1c3 0307 	rsb	r3, r3, #7
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	bf28      	it	cs
 8002f72:	2304      	movcs	r3, #4
 8002f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	3304      	adds	r3, #4
 8002f7a:	2b06      	cmp	r3, #6
 8002f7c:	d902      	bls.n	8002f84 <NVIC_EncodePriority+0x30>
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	3b03      	subs	r3, #3
 8002f82:	e000      	b.n	8002f86 <NVIC_EncodePriority+0x32>
 8002f84:	2300      	movs	r3, #0
 8002f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f88:	f04f 32ff 	mov.w	r2, #4294967295
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	43da      	mvns	r2, r3
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	401a      	ands	r2, r3
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa6:	43d9      	mvns	r1, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fac:	4313      	orrs	r3, r2
         );
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3724      	adds	r7, #36	@ 0x24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr

08002fb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fc8:	d301      	bcc.n	8002fce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e00f      	b.n	8002fee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fce:	4a0a      	ldr	r2, [pc, #40]	@ (8002ff8 <SysTick_Config+0x40>)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fd6:	210f      	movs	r1, #15
 8002fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fdc:	f7ff ff90 	bl	8002f00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fe0:	4b05      	ldr	r3, [pc, #20]	@ (8002ff8 <SysTick_Config+0x40>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fe6:	4b04      	ldr	r3, [pc, #16]	@ (8002ff8 <SysTick_Config+0x40>)
 8002fe8:	2207      	movs	r2, #7
 8002fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	e000e010 	.word	0xe000e010

08002ffc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f7ff ff2d 	bl	8002e64 <__NVIC_SetPriorityGrouping>
}
 800300a:	bf00      	nop
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003012:	b580      	push	{r7, lr}
 8003014:	b086      	sub	sp, #24
 8003016:	af00      	add	r7, sp, #0
 8003018:	4603      	mov	r3, r0
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	607a      	str	r2, [r7, #4]
 800301e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003020:	2300      	movs	r3, #0
 8003022:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003024:	f7ff ff42 	bl	8002eac <__NVIC_GetPriorityGrouping>
 8003028:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	68b9      	ldr	r1, [r7, #8]
 800302e:	6978      	ldr	r0, [r7, #20]
 8003030:	f7ff ff90 	bl	8002f54 <NVIC_EncodePriority>
 8003034:	4602      	mov	r2, r0
 8003036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800303a:	4611      	mov	r1, r2
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff ff5f 	bl	8002f00 <__NVIC_SetPriority>
}
 8003042:	bf00      	nop
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b082      	sub	sp, #8
 800304e:	af00      	add	r7, sp, #0
 8003050:	4603      	mov	r3, r0
 8003052:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff ff35 	bl	8002ec8 <__NVIC_EnableIRQ>
}
 800305e:	bf00      	nop
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b082      	sub	sp, #8
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7ff ffa2 	bl	8002fb8 <SysTick_Config>
 8003074:	4603      	mov	r3, r0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
	...

08003080 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003080:	b480      	push	{r7}
 8003082:	b08b      	sub	sp, #44	@ 0x2c
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800308a:	2300      	movs	r3, #0
 800308c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800308e:	2300      	movs	r3, #0
 8003090:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003092:	e169      	b.n	8003368 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003094:	2201      	movs	r2, #1
 8003096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	69fa      	ldr	r2, [r7, #28]
 80030a4:	4013      	ands	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	f040 8158 	bne.w	8003362 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	4a9a      	ldr	r2, [pc, #616]	@ (8003320 <HAL_GPIO_Init+0x2a0>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d05e      	beq.n	800317a <HAL_GPIO_Init+0xfa>
 80030bc:	4a98      	ldr	r2, [pc, #608]	@ (8003320 <HAL_GPIO_Init+0x2a0>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d875      	bhi.n	80031ae <HAL_GPIO_Init+0x12e>
 80030c2:	4a98      	ldr	r2, [pc, #608]	@ (8003324 <HAL_GPIO_Init+0x2a4>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d058      	beq.n	800317a <HAL_GPIO_Init+0xfa>
 80030c8:	4a96      	ldr	r2, [pc, #600]	@ (8003324 <HAL_GPIO_Init+0x2a4>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d86f      	bhi.n	80031ae <HAL_GPIO_Init+0x12e>
 80030ce:	4a96      	ldr	r2, [pc, #600]	@ (8003328 <HAL_GPIO_Init+0x2a8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d052      	beq.n	800317a <HAL_GPIO_Init+0xfa>
 80030d4:	4a94      	ldr	r2, [pc, #592]	@ (8003328 <HAL_GPIO_Init+0x2a8>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d869      	bhi.n	80031ae <HAL_GPIO_Init+0x12e>
 80030da:	4a94      	ldr	r2, [pc, #592]	@ (800332c <HAL_GPIO_Init+0x2ac>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d04c      	beq.n	800317a <HAL_GPIO_Init+0xfa>
 80030e0:	4a92      	ldr	r2, [pc, #584]	@ (800332c <HAL_GPIO_Init+0x2ac>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d863      	bhi.n	80031ae <HAL_GPIO_Init+0x12e>
 80030e6:	4a92      	ldr	r2, [pc, #584]	@ (8003330 <HAL_GPIO_Init+0x2b0>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d046      	beq.n	800317a <HAL_GPIO_Init+0xfa>
 80030ec:	4a90      	ldr	r2, [pc, #576]	@ (8003330 <HAL_GPIO_Init+0x2b0>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d85d      	bhi.n	80031ae <HAL_GPIO_Init+0x12e>
 80030f2:	2b12      	cmp	r3, #18
 80030f4:	d82a      	bhi.n	800314c <HAL_GPIO_Init+0xcc>
 80030f6:	2b12      	cmp	r3, #18
 80030f8:	d859      	bhi.n	80031ae <HAL_GPIO_Init+0x12e>
 80030fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003100 <HAL_GPIO_Init+0x80>)
 80030fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003100:	0800317b 	.word	0x0800317b
 8003104:	08003155 	.word	0x08003155
 8003108:	08003167 	.word	0x08003167
 800310c:	080031a9 	.word	0x080031a9
 8003110:	080031af 	.word	0x080031af
 8003114:	080031af 	.word	0x080031af
 8003118:	080031af 	.word	0x080031af
 800311c:	080031af 	.word	0x080031af
 8003120:	080031af 	.word	0x080031af
 8003124:	080031af 	.word	0x080031af
 8003128:	080031af 	.word	0x080031af
 800312c:	080031af 	.word	0x080031af
 8003130:	080031af 	.word	0x080031af
 8003134:	080031af 	.word	0x080031af
 8003138:	080031af 	.word	0x080031af
 800313c:	080031af 	.word	0x080031af
 8003140:	080031af 	.word	0x080031af
 8003144:	0800315d 	.word	0x0800315d
 8003148:	08003171 	.word	0x08003171
 800314c:	4a79      	ldr	r2, [pc, #484]	@ (8003334 <HAL_GPIO_Init+0x2b4>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d013      	beq.n	800317a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003152:	e02c      	b.n	80031ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	623b      	str	r3, [r7, #32]
          break;
 800315a:	e029      	b.n	80031b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	3304      	adds	r3, #4
 8003162:	623b      	str	r3, [r7, #32]
          break;
 8003164:	e024      	b.n	80031b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	3308      	adds	r3, #8
 800316c:	623b      	str	r3, [r7, #32]
          break;
 800316e:	e01f      	b.n	80031b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	330c      	adds	r3, #12
 8003176:	623b      	str	r3, [r7, #32]
          break;
 8003178:	e01a      	b.n	80031b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d102      	bne.n	8003188 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003182:	2304      	movs	r3, #4
 8003184:	623b      	str	r3, [r7, #32]
          break;
 8003186:	e013      	b.n	80031b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d105      	bne.n	800319c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003190:	2308      	movs	r3, #8
 8003192:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	69fa      	ldr	r2, [r7, #28]
 8003198:	611a      	str	r2, [r3, #16]
          break;
 800319a:	e009      	b.n	80031b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800319c:	2308      	movs	r3, #8
 800319e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	69fa      	ldr	r2, [r7, #28]
 80031a4:	615a      	str	r2, [r3, #20]
          break;
 80031a6:	e003      	b.n	80031b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80031a8:	2300      	movs	r3, #0
 80031aa:	623b      	str	r3, [r7, #32]
          break;
 80031ac:	e000      	b.n	80031b0 <HAL_GPIO_Init+0x130>
          break;
 80031ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	2bff      	cmp	r3, #255	@ 0xff
 80031b4:	d801      	bhi.n	80031ba <HAL_GPIO_Init+0x13a>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	e001      	b.n	80031be <HAL_GPIO_Init+0x13e>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	3304      	adds	r3, #4
 80031be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	2bff      	cmp	r3, #255	@ 0xff
 80031c4:	d802      	bhi.n	80031cc <HAL_GPIO_Init+0x14c>
 80031c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	e002      	b.n	80031d2 <HAL_GPIO_Init+0x152>
 80031cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ce:	3b08      	subs	r3, #8
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	210f      	movs	r1, #15
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	fa01 f303 	lsl.w	r3, r1, r3
 80031e0:	43db      	mvns	r3, r3
 80031e2:	401a      	ands	r2, r3
 80031e4:	6a39      	ldr	r1, [r7, #32]
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	fa01 f303 	lsl.w	r3, r1, r3
 80031ec:	431a      	orrs	r2, r3
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 80b1 	beq.w	8003362 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003200:	4b4d      	ldr	r3, [pc, #308]	@ (8003338 <HAL_GPIO_Init+0x2b8>)
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	4a4c      	ldr	r2, [pc, #304]	@ (8003338 <HAL_GPIO_Init+0x2b8>)
 8003206:	f043 0301 	orr.w	r3, r3, #1
 800320a:	6193      	str	r3, [r2, #24]
 800320c:	4b4a      	ldr	r3, [pc, #296]	@ (8003338 <HAL_GPIO_Init+0x2b8>)
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	60bb      	str	r3, [r7, #8]
 8003216:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003218:	4a48      	ldr	r2, [pc, #288]	@ (800333c <HAL_GPIO_Init+0x2bc>)
 800321a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321c:	089b      	lsrs	r3, r3, #2
 800321e:	3302      	adds	r3, #2
 8003220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003224:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003228:	f003 0303 	and.w	r3, r3, #3
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	220f      	movs	r2, #15
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	4013      	ands	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a40      	ldr	r2, [pc, #256]	@ (8003340 <HAL_GPIO_Init+0x2c0>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d013      	beq.n	800326c <HAL_GPIO_Init+0x1ec>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a3f      	ldr	r2, [pc, #252]	@ (8003344 <HAL_GPIO_Init+0x2c4>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d00d      	beq.n	8003268 <HAL_GPIO_Init+0x1e8>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a3e      	ldr	r2, [pc, #248]	@ (8003348 <HAL_GPIO_Init+0x2c8>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d007      	beq.n	8003264 <HAL_GPIO_Init+0x1e4>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a3d      	ldr	r2, [pc, #244]	@ (800334c <HAL_GPIO_Init+0x2cc>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d101      	bne.n	8003260 <HAL_GPIO_Init+0x1e0>
 800325c:	2303      	movs	r3, #3
 800325e:	e006      	b.n	800326e <HAL_GPIO_Init+0x1ee>
 8003260:	2304      	movs	r3, #4
 8003262:	e004      	b.n	800326e <HAL_GPIO_Init+0x1ee>
 8003264:	2302      	movs	r3, #2
 8003266:	e002      	b.n	800326e <HAL_GPIO_Init+0x1ee>
 8003268:	2301      	movs	r3, #1
 800326a:	e000      	b.n	800326e <HAL_GPIO_Init+0x1ee>
 800326c:	2300      	movs	r3, #0
 800326e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003270:	f002 0203 	and.w	r2, r2, #3
 8003274:	0092      	lsls	r2, r2, #2
 8003276:	4093      	lsls	r3, r2
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	4313      	orrs	r3, r2
 800327c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800327e:	492f      	ldr	r1, [pc, #188]	@ (800333c <HAL_GPIO_Init+0x2bc>)
 8003280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003282:	089b      	lsrs	r3, r3, #2
 8003284:	3302      	adds	r3, #2
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d006      	beq.n	80032a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003298:	4b2d      	ldr	r3, [pc, #180]	@ (8003350 <HAL_GPIO_Init+0x2d0>)
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	492c      	ldr	r1, [pc, #176]	@ (8003350 <HAL_GPIO_Init+0x2d0>)
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	608b      	str	r3, [r1, #8]
 80032a4:	e006      	b.n	80032b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032a6:	4b2a      	ldr	r3, [pc, #168]	@ (8003350 <HAL_GPIO_Init+0x2d0>)
 80032a8:	689a      	ldr	r2, [r3, #8]
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	43db      	mvns	r3, r3
 80032ae:	4928      	ldr	r1, [pc, #160]	@ (8003350 <HAL_GPIO_Init+0x2d0>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d006      	beq.n	80032ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80032c0:	4b23      	ldr	r3, [pc, #140]	@ (8003350 <HAL_GPIO_Init+0x2d0>)
 80032c2:	68da      	ldr	r2, [r3, #12]
 80032c4:	4922      	ldr	r1, [pc, #136]	@ (8003350 <HAL_GPIO_Init+0x2d0>)
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	60cb      	str	r3, [r1, #12]
 80032cc:	e006      	b.n	80032dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032ce:	4b20      	ldr	r3, [pc, #128]	@ (8003350 <HAL_GPIO_Init+0x2d0>)
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	43db      	mvns	r3, r3
 80032d6:	491e      	ldr	r1, [pc, #120]	@ (8003350 <HAL_GPIO_Init+0x2d0>)
 80032d8:	4013      	ands	r3, r2
 80032da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d006      	beq.n	80032f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80032e8:	4b19      	ldr	r3, [pc, #100]	@ (8003350 <HAL_GPIO_Init+0x2d0>)
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	4918      	ldr	r1, [pc, #96]	@ (8003350 <HAL_GPIO_Init+0x2d0>)
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	604b      	str	r3, [r1, #4]
 80032f4:	e006      	b.n	8003304 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80032f6:	4b16      	ldr	r3, [pc, #88]	@ (8003350 <HAL_GPIO_Init+0x2d0>)
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	43db      	mvns	r3, r3
 80032fe:	4914      	ldr	r1, [pc, #80]	@ (8003350 <HAL_GPIO_Init+0x2d0>)
 8003300:	4013      	ands	r3, r2
 8003302:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d021      	beq.n	8003354 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003310:	4b0f      	ldr	r3, [pc, #60]	@ (8003350 <HAL_GPIO_Init+0x2d0>)
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	490e      	ldr	r1, [pc, #56]	@ (8003350 <HAL_GPIO_Init+0x2d0>)
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	4313      	orrs	r3, r2
 800331a:	600b      	str	r3, [r1, #0]
 800331c:	e021      	b.n	8003362 <HAL_GPIO_Init+0x2e2>
 800331e:	bf00      	nop
 8003320:	10320000 	.word	0x10320000
 8003324:	10310000 	.word	0x10310000
 8003328:	10220000 	.word	0x10220000
 800332c:	10210000 	.word	0x10210000
 8003330:	10120000 	.word	0x10120000
 8003334:	10110000 	.word	0x10110000
 8003338:	40021000 	.word	0x40021000
 800333c:	40010000 	.word	0x40010000
 8003340:	40010800 	.word	0x40010800
 8003344:	40010c00 	.word	0x40010c00
 8003348:	40011000 	.word	0x40011000
 800334c:	40011400 	.word	0x40011400
 8003350:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003354:	4b0b      	ldr	r3, [pc, #44]	@ (8003384 <HAL_GPIO_Init+0x304>)
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	43db      	mvns	r3, r3
 800335c:	4909      	ldr	r1, [pc, #36]	@ (8003384 <HAL_GPIO_Init+0x304>)
 800335e:	4013      	ands	r3, r2
 8003360:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003364:	3301      	adds	r3, #1
 8003366:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336e:	fa22 f303 	lsr.w	r3, r2, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	f47f ae8e 	bne.w	8003094 <HAL_GPIO_Init+0x14>
  }
}
 8003378:	bf00      	nop
 800337a:	bf00      	nop
 800337c:	372c      	adds	r7, #44	@ 0x2c
 800337e:	46bd      	mov	sp, r7
 8003380:	bc80      	pop	{r7}
 8003382:	4770      	bx	lr
 8003384:	40010400 	.word	0x40010400

08003388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	460b      	mov	r3, r1
 8003392:	807b      	strh	r3, [r7, #2]
 8003394:	4613      	mov	r3, r2
 8003396:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003398:	787b      	ldrb	r3, [r7, #1]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800339e:	887a      	ldrh	r2, [r7, #2]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80033a4:	e003      	b.n	80033ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033a6:	887b      	ldrh	r3, [r7, #2]
 80033a8:	041a      	lsls	r2, r3, #16
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	611a      	str	r2, [r3, #16]
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bc80      	pop	{r7}
 80033b6:	4770      	bx	lr

080033b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e12b      	b.n	8003622 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d106      	bne.n	80033e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7ff fb22 	bl	8002a28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2224      	movs	r2, #36	@ 0x24
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 0201 	bic.w	r2, r2, #1
 80033fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800340a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800341a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800341c:	f001 fbf0 	bl	8004c00 <HAL_RCC_GetPCLK1Freq>
 8003420:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	4a81      	ldr	r2, [pc, #516]	@ (800362c <HAL_I2C_Init+0x274>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d807      	bhi.n	800343c <HAL_I2C_Init+0x84>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	4a80      	ldr	r2, [pc, #512]	@ (8003630 <HAL_I2C_Init+0x278>)
 8003430:	4293      	cmp	r3, r2
 8003432:	bf94      	ite	ls
 8003434:	2301      	movls	r3, #1
 8003436:	2300      	movhi	r3, #0
 8003438:	b2db      	uxtb	r3, r3
 800343a:	e006      	b.n	800344a <HAL_I2C_Init+0x92>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	4a7d      	ldr	r2, [pc, #500]	@ (8003634 <HAL_I2C_Init+0x27c>)
 8003440:	4293      	cmp	r3, r2
 8003442:	bf94      	ite	ls
 8003444:	2301      	movls	r3, #1
 8003446:	2300      	movhi	r3, #0
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e0e7      	b.n	8003622 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	4a78      	ldr	r2, [pc, #480]	@ (8003638 <HAL_I2C_Init+0x280>)
 8003456:	fba2 2303 	umull	r2, r3, r2, r3
 800345a:	0c9b      	lsrs	r3, r3, #18
 800345c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	430a      	orrs	r2, r1
 8003470:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	4a6a      	ldr	r2, [pc, #424]	@ (800362c <HAL_I2C_Init+0x274>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d802      	bhi.n	800348c <HAL_I2C_Init+0xd4>
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	3301      	adds	r3, #1
 800348a:	e009      	b.n	80034a0 <HAL_I2C_Init+0xe8>
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003492:	fb02 f303 	mul.w	r3, r2, r3
 8003496:	4a69      	ldr	r2, [pc, #420]	@ (800363c <HAL_I2C_Init+0x284>)
 8003498:	fba2 2303 	umull	r2, r3, r2, r3
 800349c:	099b      	lsrs	r3, r3, #6
 800349e:	3301      	adds	r3, #1
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6812      	ldr	r2, [r2, #0]
 80034a4:	430b      	orrs	r3, r1
 80034a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80034b2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	495c      	ldr	r1, [pc, #368]	@ (800362c <HAL_I2C_Init+0x274>)
 80034bc:	428b      	cmp	r3, r1
 80034be:	d819      	bhi.n	80034f4 <HAL_I2C_Init+0x13c>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	1e59      	subs	r1, r3, #1
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80034ce:	1c59      	adds	r1, r3, #1
 80034d0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80034d4:	400b      	ands	r3, r1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00a      	beq.n	80034f0 <HAL_I2C_Init+0x138>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	1e59      	subs	r1, r3, #1
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80034e8:	3301      	adds	r3, #1
 80034ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ee:	e051      	b.n	8003594 <HAL_I2C_Init+0x1dc>
 80034f0:	2304      	movs	r3, #4
 80034f2:	e04f      	b.n	8003594 <HAL_I2C_Init+0x1dc>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d111      	bne.n	8003520 <HAL_I2C_Init+0x168>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	1e58      	subs	r0, r3, #1
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6859      	ldr	r1, [r3, #4]
 8003504:	460b      	mov	r3, r1
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	440b      	add	r3, r1
 800350a:	fbb0 f3f3 	udiv	r3, r0, r3
 800350e:	3301      	adds	r3, #1
 8003510:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003514:	2b00      	cmp	r3, #0
 8003516:	bf0c      	ite	eq
 8003518:	2301      	moveq	r3, #1
 800351a:	2300      	movne	r3, #0
 800351c:	b2db      	uxtb	r3, r3
 800351e:	e012      	b.n	8003546 <HAL_I2C_Init+0x18e>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	1e58      	subs	r0, r3, #1
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6859      	ldr	r1, [r3, #4]
 8003528:	460b      	mov	r3, r1
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	440b      	add	r3, r1
 800352e:	0099      	lsls	r1, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	fbb0 f3f3 	udiv	r3, r0, r3
 8003536:	3301      	adds	r3, #1
 8003538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800353c:	2b00      	cmp	r3, #0
 800353e:	bf0c      	ite	eq
 8003540:	2301      	moveq	r3, #1
 8003542:	2300      	movne	r3, #0
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <HAL_I2C_Init+0x196>
 800354a:	2301      	movs	r3, #1
 800354c:	e022      	b.n	8003594 <HAL_I2C_Init+0x1dc>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10e      	bne.n	8003574 <HAL_I2C_Init+0x1bc>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	1e58      	subs	r0, r3, #1
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6859      	ldr	r1, [r3, #4]
 800355e:	460b      	mov	r3, r1
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	440b      	add	r3, r1
 8003564:	fbb0 f3f3 	udiv	r3, r0, r3
 8003568:	3301      	adds	r3, #1
 800356a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800356e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003572:	e00f      	b.n	8003594 <HAL_I2C_Init+0x1dc>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	1e58      	subs	r0, r3, #1
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6859      	ldr	r1, [r3, #4]
 800357c:	460b      	mov	r3, r1
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	0099      	lsls	r1, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	fbb0 f3f3 	udiv	r3, r0, r3
 800358a:	3301      	adds	r3, #1
 800358c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003590:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	6809      	ldr	r1, [r1, #0]
 8003598:	4313      	orrs	r3, r2
 800359a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69da      	ldr	r2, [r3, #28]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80035c2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6911      	ldr	r1, [r2, #16]
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	68d2      	ldr	r2, [r2, #12]
 80035ce:	4311      	orrs	r1, r2
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	6812      	ldr	r2, [r2, #0]
 80035d4:	430b      	orrs	r3, r1
 80035d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	695a      	ldr	r2, [r3, #20]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0201 	orr.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2220      	movs	r2, #32
 800360e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	000186a0 	.word	0x000186a0
 8003630:	001e847f 	.word	0x001e847f
 8003634:	003d08ff 	.word	0x003d08ff
 8003638:	431bde83 	.word	0x431bde83
 800363c:	10624dd3 	.word	0x10624dd3

08003640 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b088      	sub	sp, #32
 8003644:	af02      	add	r7, sp, #8
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	4608      	mov	r0, r1
 800364a:	4611      	mov	r1, r2
 800364c:	461a      	mov	r2, r3
 800364e:	4603      	mov	r3, r0
 8003650:	817b      	strh	r3, [r7, #10]
 8003652:	460b      	mov	r3, r1
 8003654:	813b      	strh	r3, [r7, #8]
 8003656:	4613      	mov	r3, r2
 8003658:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800365a:	f7ff fbf9 	bl	8002e50 <HAL_GetTick>
 800365e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b20      	cmp	r3, #32
 800366a:	f040 80d9 	bne.w	8003820 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	2319      	movs	r3, #25
 8003674:	2201      	movs	r2, #1
 8003676:	496d      	ldr	r1, [pc, #436]	@ (800382c <HAL_I2C_Mem_Write+0x1ec>)
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f000 fcc1 	bl	8004000 <I2C_WaitOnFlagUntilTimeout>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003684:	2302      	movs	r3, #2
 8003686:	e0cc      	b.n	8003822 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800368e:	2b01      	cmp	r3, #1
 8003690:	d101      	bne.n	8003696 <HAL_I2C_Mem_Write+0x56>
 8003692:	2302      	movs	r3, #2
 8003694:	e0c5      	b.n	8003822 <HAL_I2C_Mem_Write+0x1e2>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d007      	beq.n	80036bc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f042 0201 	orr.w	r2, r2, #1
 80036ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2221      	movs	r2, #33	@ 0x21
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2240      	movs	r2, #64	@ 0x40
 80036d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6a3a      	ldr	r2, [r7, #32]
 80036e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80036ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4a4d      	ldr	r2, [pc, #308]	@ (8003830 <HAL_I2C_Mem_Write+0x1f0>)
 80036fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036fe:	88f8      	ldrh	r0, [r7, #6]
 8003700:	893a      	ldrh	r2, [r7, #8]
 8003702:	8979      	ldrh	r1, [r7, #10]
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	9301      	str	r3, [sp, #4]
 8003708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	4603      	mov	r3, r0
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f000 faf8 	bl	8003d04 <I2C_RequestMemoryWrite>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d052      	beq.n	80037c0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e081      	b.n	8003822 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f000 fd86 	bl	8004234 <I2C_WaitOnTXEFlagUntilTimeout>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00d      	beq.n	800374a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003732:	2b04      	cmp	r3, #4
 8003734:	d107      	bne.n	8003746 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003744:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e06b      	b.n	8003822 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374e:	781a      	ldrb	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003770:	b29b      	uxth	r3, r3
 8003772:	3b01      	subs	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b04      	cmp	r3, #4
 8003786:	d11b      	bne.n	80037c0 <HAL_I2C_Mem_Write+0x180>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800378c:	2b00      	cmp	r3, #0
 800378e:	d017      	beq.n	80037c0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003794:	781a      	ldrb	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a0:	1c5a      	adds	r2, r3, #1
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037aa:	3b01      	subs	r3, #1
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1aa      	bne.n	800371e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f000 fd79 	bl	80042c4 <I2C_WaitOnBTFFlagUntilTimeout>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00d      	beq.n	80037f4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037dc:	2b04      	cmp	r3, #4
 80037de:	d107      	bne.n	80037f0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037ee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e016      	b.n	8003822 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003802:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2220      	movs	r2, #32
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800381c:	2300      	movs	r3, #0
 800381e:	e000      	b.n	8003822 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003820:	2302      	movs	r3, #2
  }
}
 8003822:	4618      	mov	r0, r3
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	00100002 	.word	0x00100002
 8003830:	ffff0000 	.word	0xffff0000

08003834 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b08c      	sub	sp, #48	@ 0x30
 8003838:	af02      	add	r7, sp, #8
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	4608      	mov	r0, r1
 800383e:	4611      	mov	r1, r2
 8003840:	461a      	mov	r2, r3
 8003842:	4603      	mov	r3, r0
 8003844:	817b      	strh	r3, [r7, #10]
 8003846:	460b      	mov	r3, r1
 8003848:	813b      	strh	r3, [r7, #8]
 800384a:	4613      	mov	r3, r2
 800384c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800384e:	2300      	movs	r3, #0
 8003850:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003852:	f7ff fafd 	bl	8002e50 <HAL_GetTick>
 8003856:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b20      	cmp	r3, #32
 8003862:	f040 8244 	bne.w	8003cee <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	2319      	movs	r3, #25
 800386c:	2201      	movs	r2, #1
 800386e:	4982      	ldr	r1, [pc, #520]	@ (8003a78 <HAL_I2C_Mem_Read+0x244>)
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f000 fbc5 	bl	8004000 <I2C_WaitOnFlagUntilTimeout>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800387c:	2302      	movs	r3, #2
 800387e:	e237      	b.n	8003cf0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003886:	2b01      	cmp	r3, #1
 8003888:	d101      	bne.n	800388e <HAL_I2C_Mem_Read+0x5a>
 800388a:	2302      	movs	r3, #2
 800388c:	e230      	b.n	8003cf0 <HAL_I2C_Mem_Read+0x4bc>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d007      	beq.n	80038b4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0201 	orr.w	r2, r2, #1
 80038b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2222      	movs	r2, #34	@ 0x22
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2240      	movs	r2, #64	@ 0x40
 80038d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80038e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	4a62      	ldr	r2, [pc, #392]	@ (8003a7c <HAL_I2C_Mem_Read+0x248>)
 80038f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038f6:	88f8      	ldrh	r0, [r7, #6]
 80038f8:	893a      	ldrh	r2, [r7, #8]
 80038fa:	8979      	ldrh	r1, [r7, #10]
 80038fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fe:	9301      	str	r3, [sp, #4]
 8003900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003902:	9300      	str	r3, [sp, #0]
 8003904:	4603      	mov	r3, r0
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 fa92 	bl	8003e30 <I2C_RequestMemoryRead>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e1ec      	b.n	8003cf0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800391a:	2b00      	cmp	r3, #0
 800391c:	d113      	bne.n	8003946 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800391e:	2300      	movs	r3, #0
 8003920:	61fb      	str	r3, [r7, #28]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	61fb      	str	r3, [r7, #28]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	61fb      	str	r3, [r7, #28]
 8003932:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	e1c0      	b.n	8003cc8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800394a:	2b01      	cmp	r3, #1
 800394c:	d11e      	bne.n	800398c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800395c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800395e:	b672      	cpsid	i
}
 8003960:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003962:	2300      	movs	r3, #0
 8003964:	61bb      	str	r3, [r7, #24]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	61bb      	str	r3, [r7, #24]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	61bb      	str	r3, [r7, #24]
 8003976:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003986:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003988:	b662      	cpsie	i
}
 800398a:	e035      	b.n	80039f8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003990:	2b02      	cmp	r3, #2
 8003992:	d11e      	bne.n	80039d2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80039a4:	b672      	cpsid	i
}
 80039a6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039a8:	2300      	movs	r3, #0
 80039aa:	617b      	str	r3, [r7, #20]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	617b      	str	r3, [r7, #20]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	617b      	str	r3, [r7, #20]
 80039bc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80039ce:	b662      	cpsie	i
}
 80039d0:	e012      	b.n	80039f8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80039e0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039e2:	2300      	movs	r3, #0
 80039e4:	613b      	str	r3, [r7, #16]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	613b      	str	r3, [r7, #16]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	613b      	str	r3, [r7, #16]
 80039f6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80039f8:	e166      	b.n	8003cc8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039fe:	2b03      	cmp	r3, #3
 8003a00:	f200 811f 	bhi.w	8003c42 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d123      	bne.n	8003a54 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a0e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f000 fc9f 	bl	8004354 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e167      	b.n	8003cf0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	691a      	ldr	r2, [r3, #16]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a52:	e139      	b.n	8003cc8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d152      	bne.n	8003b02 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a62:	2200      	movs	r2, #0
 8003a64:	4906      	ldr	r1, [pc, #24]	@ (8003a80 <HAL_I2C_Mem_Read+0x24c>)
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 faca 	bl	8004000 <I2C_WaitOnFlagUntilTimeout>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d008      	beq.n	8003a84 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e13c      	b.n	8003cf0 <HAL_I2C_Mem_Read+0x4bc>
 8003a76:	bf00      	nop
 8003a78:	00100002 	.word	0x00100002
 8003a7c:	ffff0000 	.word	0xffff0000
 8003a80:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003a84:	b672      	cpsid	i
}
 8003a86:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	691a      	ldr	r2, [r3, #16]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aaa:	1c5a      	adds	r2, r3, #1
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003aca:	b662      	cpsie	i
}
 8003acc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	691a      	ldr	r2, [r3, #16]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad8:	b2d2      	uxtb	r2, r2
 8003ada:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae0:	1c5a      	adds	r2, r3, #1
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aea:	3b01      	subs	r3, #1
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b00:	e0e2      	b.n	8003cc8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b08:	2200      	movs	r2, #0
 8003b0a:	497b      	ldr	r1, [pc, #492]	@ (8003cf8 <HAL_I2C_Mem_Read+0x4c4>)
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f000 fa77 	bl	8004000 <I2C_WaitOnFlagUntilTimeout>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e0e9      	b.n	8003cf0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b2a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b2c:	b672      	cpsid	i
}
 8003b2e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691a      	ldr	r2, [r3, #16]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b42:	1c5a      	adds	r2, r3, #1
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b62:	4b66      	ldr	r3, [pc, #408]	@ (8003cfc <HAL_I2C_Mem_Read+0x4c8>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	08db      	lsrs	r3, r3, #3
 8003b68:	4a65      	ldr	r2, [pc, #404]	@ (8003d00 <HAL_I2C_Mem_Read+0x4cc>)
 8003b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6e:	0a1a      	lsrs	r2, r3, #8
 8003b70:	4613      	mov	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4413      	add	r3, r2
 8003b76:	00da      	lsls	r2, r3, #3
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003b82:	6a3b      	ldr	r3, [r7, #32]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d118      	bne.n	8003bba <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2220      	movs	r2, #32
 8003b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba2:	f043 0220 	orr.w	r2, r3, #32
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003baa:	b662      	cpsie	i
}
 8003bac:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e09a      	b.n	8003cf0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b04      	cmp	r3, #4
 8003bc6:	d1d9      	bne.n	8003b7c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691a      	ldr	r2, [r3, #16]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be2:	b2d2      	uxtb	r2, r2
 8003be4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bea:	1c5a      	adds	r2, r3, #1
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	3b01      	subs	r3, #1
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003c0a:	b662      	cpsie	i
}
 8003c0c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	691a      	ldr	r2, [r3, #16]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c20:	1c5a      	adds	r2, r3, #1
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c40:	e042      	b.n	8003cc8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c44:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f000 fb84 	bl	8004354 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e04c      	b.n	8003cf0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	691a      	ldr	r2, [r3, #16]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c72:	3b01      	subs	r3, #1
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	f003 0304 	and.w	r3, r3, #4
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d118      	bne.n	8003cc8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	691a      	ldr	r2, [r3, #16]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca0:	b2d2      	uxtb	r2, r2
 8003ca2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca8:	1c5a      	adds	r2, r3, #1
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f47f ae94 	bne.w	80039fa <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003cea:	2300      	movs	r3, #0
 8003cec:	e000      	b.n	8003cf0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003cee:	2302      	movs	r3, #2
  }
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3728      	adds	r7, #40	@ 0x28
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	00010004 	.word	0x00010004
 8003cfc:	20000090 	.word	0x20000090
 8003d00:	14f8b589 	.word	0x14f8b589

08003d04 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b088      	sub	sp, #32
 8003d08:	af02      	add	r7, sp, #8
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	4608      	mov	r0, r1
 8003d0e:	4611      	mov	r1, r2
 8003d10:	461a      	mov	r2, r3
 8003d12:	4603      	mov	r3, r0
 8003d14:	817b      	strh	r3, [r7, #10]
 8003d16:	460b      	mov	r3, r1
 8003d18:	813b      	strh	r3, [r7, #8]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d30:	9300      	str	r3, [sp, #0]
 8003d32:	6a3b      	ldr	r3, [r7, #32]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f000 f960 	bl	8004000 <I2C_WaitOnFlagUntilTimeout>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00d      	beq.n	8003d62 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d54:	d103      	bne.n	8003d5e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d5c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e05f      	b.n	8003e22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d62:	897b      	ldrh	r3, [r7, #10]
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	461a      	mov	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d74:	6a3a      	ldr	r2, [r7, #32]
 8003d76:	492d      	ldr	r1, [pc, #180]	@ (8003e2c <I2C_RequestMemoryWrite+0x128>)
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f000 f9bb 	bl	80040f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e04c      	b.n	8003e22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d88:	2300      	movs	r3, #0
 8003d8a:	617b      	str	r3, [r7, #20]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	617b      	str	r3, [r7, #20]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	617b      	str	r3, [r7, #20]
 8003d9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003da0:	6a39      	ldr	r1, [r7, #32]
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f000 fa46 	bl	8004234 <I2C_WaitOnTXEFlagUntilTimeout>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00d      	beq.n	8003dca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	d107      	bne.n	8003dc6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dc4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e02b      	b.n	8003e22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dca:	88fb      	ldrh	r3, [r7, #6]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d105      	bne.n	8003ddc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dd0:	893b      	ldrh	r3, [r7, #8]
 8003dd2:	b2da      	uxtb	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	611a      	str	r2, [r3, #16]
 8003dda:	e021      	b.n	8003e20 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ddc:	893b      	ldrh	r3, [r7, #8]
 8003dde:	0a1b      	lsrs	r3, r3, #8
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dec:	6a39      	ldr	r1, [r7, #32]
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 fa20 	bl	8004234 <I2C_WaitOnTXEFlagUntilTimeout>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00d      	beq.n	8003e16 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	d107      	bne.n	8003e12 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e005      	b.n	8003e22 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e16:	893b      	ldrh	r3, [r7, #8]
 8003e18:	b2da      	uxtb	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3718      	adds	r7, #24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	00010002 	.word	0x00010002

08003e30 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b088      	sub	sp, #32
 8003e34:	af02      	add	r7, sp, #8
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	4608      	mov	r0, r1
 8003e3a:	4611      	mov	r1, r2
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	4603      	mov	r3, r0
 8003e40:	817b      	strh	r3, [r7, #10]
 8003e42:	460b      	mov	r3, r1
 8003e44:	813b      	strh	r3, [r7, #8]
 8003e46:	4613      	mov	r3, r2
 8003e48:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e58:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f000 f8c2 	bl	8004000 <I2C_WaitOnFlagUntilTimeout>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00d      	beq.n	8003e9e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e90:	d103      	bne.n	8003e9a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e98:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e0aa      	b.n	8003ff4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e9e:	897b      	ldrh	r3, [r7, #10]
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003eac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb0:	6a3a      	ldr	r2, [r7, #32]
 8003eb2:	4952      	ldr	r1, [pc, #328]	@ (8003ffc <I2C_RequestMemoryRead+0x1cc>)
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 f91d 	bl	80040f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e097      	b.n	8003ff4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	617b      	str	r3, [r7, #20]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	617b      	str	r3, [r7, #20]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	617b      	str	r3, [r7, #20]
 8003ed8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003edc:	6a39      	ldr	r1, [r7, #32]
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 f9a8 	bl	8004234 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00d      	beq.n	8003f06 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d107      	bne.n	8003f02 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e076      	b.n	8003ff4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f06:	88fb      	ldrh	r3, [r7, #6]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d105      	bne.n	8003f18 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f0c:	893b      	ldrh	r3, [r7, #8]
 8003f0e:	b2da      	uxtb	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	611a      	str	r2, [r3, #16]
 8003f16:	e021      	b.n	8003f5c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f18:	893b      	ldrh	r3, [r7, #8]
 8003f1a:	0a1b      	lsrs	r3, r3, #8
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	b2da      	uxtb	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f28:	6a39      	ldr	r1, [r7, #32]
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 f982 	bl	8004234 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00d      	beq.n	8003f52 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	d107      	bne.n	8003f4e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e050      	b.n	8003ff4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f52:	893b      	ldrh	r3, [r7, #8]
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f5e:	6a39      	ldr	r1, [r7, #32]
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f000 f967 	bl	8004234 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00d      	beq.n	8003f88 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f70:	2b04      	cmp	r3, #4
 8003f72:	d107      	bne.n	8003f84 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f82:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e035      	b.n	8003ff4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f96:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f000 f82b 	bl	8004000 <I2C_WaitOnFlagUntilTimeout>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00d      	beq.n	8003fcc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fbe:	d103      	bne.n	8003fc8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fc6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e013      	b.n	8003ff4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003fcc:	897b      	ldrh	r3, [r7, #10]
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	f043 0301 	orr.w	r3, r3, #1
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fde:	6a3a      	ldr	r2, [r7, #32]
 8003fe0:	4906      	ldr	r1, [pc, #24]	@ (8003ffc <I2C_RequestMemoryRead+0x1cc>)
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f000 f886 	bl	80040f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e000      	b.n	8003ff4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3718      	adds	r7, #24
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	00010002 	.word	0x00010002

08004000 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	603b      	str	r3, [r7, #0]
 800400c:	4613      	mov	r3, r2
 800400e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004010:	e048      	b.n	80040a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004018:	d044      	beq.n	80040a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800401a:	f7fe ff19 	bl	8002e50 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	429a      	cmp	r2, r3
 8004028:	d302      	bcc.n	8004030 <I2C_WaitOnFlagUntilTimeout+0x30>
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d139      	bne.n	80040a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	0c1b      	lsrs	r3, r3, #16
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b01      	cmp	r3, #1
 8004038:	d10d      	bne.n	8004056 <I2C_WaitOnFlagUntilTimeout+0x56>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	43da      	mvns	r2, r3
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	4013      	ands	r3, r2
 8004046:	b29b      	uxth	r3, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	bf0c      	ite	eq
 800404c:	2301      	moveq	r3, #1
 800404e:	2300      	movne	r3, #0
 8004050:	b2db      	uxtb	r3, r3
 8004052:	461a      	mov	r2, r3
 8004054:	e00c      	b.n	8004070 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	43da      	mvns	r2, r3
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	4013      	ands	r3, r2
 8004062:	b29b      	uxth	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	bf0c      	ite	eq
 8004068:	2301      	moveq	r3, #1
 800406a:	2300      	movne	r3, #0
 800406c:	b2db      	uxtb	r3, r3
 800406e:	461a      	mov	r2, r3
 8004070:	79fb      	ldrb	r3, [r7, #7]
 8004072:	429a      	cmp	r2, r3
 8004074:	d116      	bne.n	80040a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2220      	movs	r2, #32
 8004080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004090:	f043 0220 	orr.w	r2, r3, #32
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e023      	b.n	80040ec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	0c1b      	lsrs	r3, r3, #16
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d10d      	bne.n	80040ca <I2C_WaitOnFlagUntilTimeout+0xca>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	43da      	mvns	r2, r3
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	4013      	ands	r3, r2
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	bf0c      	ite	eq
 80040c0:	2301      	moveq	r3, #1
 80040c2:	2300      	movne	r3, #0
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	461a      	mov	r2, r3
 80040c8:	e00c      	b.n	80040e4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	43da      	mvns	r2, r3
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	4013      	ands	r3, r2
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	bf0c      	ite	eq
 80040dc:	2301      	moveq	r3, #1
 80040de:	2300      	movne	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	461a      	mov	r2, r3
 80040e4:	79fb      	ldrb	r3, [r7, #7]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d093      	beq.n	8004012 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
 8004100:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004102:	e071      	b.n	80041e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800410e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004112:	d123      	bne.n	800415c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004122:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800412c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2220      	movs	r2, #32
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004148:	f043 0204 	orr.w	r2, r3, #4
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e067      	b.n	800422c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004162:	d041      	beq.n	80041e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004164:	f7fe fe74 	bl	8002e50 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	429a      	cmp	r2, r3
 8004172:	d302      	bcc.n	800417a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d136      	bne.n	80041e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	0c1b      	lsrs	r3, r3, #16
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b01      	cmp	r3, #1
 8004182:	d10c      	bne.n	800419e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	43da      	mvns	r2, r3
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	4013      	ands	r3, r2
 8004190:	b29b      	uxth	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	bf14      	ite	ne
 8004196:	2301      	movne	r3, #1
 8004198:	2300      	moveq	r3, #0
 800419a:	b2db      	uxtb	r3, r3
 800419c:	e00b      	b.n	80041b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	43da      	mvns	r2, r3
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	4013      	ands	r3, r2
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	bf14      	ite	ne
 80041b0:	2301      	movne	r3, #1
 80041b2:	2300      	moveq	r3, #0
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d016      	beq.n	80041e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2220      	movs	r2, #32
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d4:	f043 0220 	orr.w	r2, r3, #32
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e021      	b.n	800422c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	0c1b      	lsrs	r3, r3, #16
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d10c      	bne.n	800420c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	43da      	mvns	r2, r3
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	4013      	ands	r3, r2
 80041fe:	b29b      	uxth	r3, r3
 8004200:	2b00      	cmp	r3, #0
 8004202:	bf14      	ite	ne
 8004204:	2301      	movne	r3, #1
 8004206:	2300      	moveq	r3, #0
 8004208:	b2db      	uxtb	r3, r3
 800420a:	e00b      	b.n	8004224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	43da      	mvns	r2, r3
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	4013      	ands	r3, r2
 8004218:	b29b      	uxth	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	bf14      	ite	ne
 800421e:	2301      	movne	r3, #1
 8004220:	2300      	moveq	r3, #0
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b00      	cmp	r3, #0
 8004226:	f47f af6d 	bne.w	8004104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004240:	e034      	b.n	80042ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 f8e3 	bl	800440e <I2C_IsAcknowledgeFailed>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e034      	b.n	80042bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004258:	d028      	beq.n	80042ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800425a:	f7fe fdf9 	bl	8002e50 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	429a      	cmp	r2, r3
 8004268:	d302      	bcc.n	8004270 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d11d      	bne.n	80042ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800427a:	2b80      	cmp	r3, #128	@ 0x80
 800427c:	d016      	beq.n	80042ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2220      	movs	r2, #32
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004298:	f043 0220 	orr.w	r2, r3, #32
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e007      	b.n	80042bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042b6:	2b80      	cmp	r3, #128	@ 0x80
 80042b8:	d1c3      	bne.n	8004242 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042d0:	e034      	b.n	800433c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f000 f89b 	bl	800440e <I2C_IsAcknowledgeFailed>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e034      	b.n	800434c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e8:	d028      	beq.n	800433c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ea:	f7fe fdb1 	bl	8002e50 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d302      	bcc.n	8004300 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d11d      	bne.n	800433c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	f003 0304 	and.w	r3, r3, #4
 800430a:	2b04      	cmp	r3, #4
 800430c:	d016      	beq.n	800433c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2220      	movs	r2, #32
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004328:	f043 0220 	orr.w	r2, r3, #32
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e007      	b.n	800434c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	f003 0304 	and.w	r3, r3, #4
 8004346:	2b04      	cmp	r3, #4
 8004348:	d1c3      	bne.n	80042d2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004360:	e049      	b.n	80043f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	f003 0310 	and.w	r3, r3, #16
 800436c:	2b10      	cmp	r3, #16
 800436e:	d119      	bne.n	80043a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f06f 0210 	mvn.w	r2, #16
 8004378:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2220      	movs	r2, #32
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e030      	b.n	8004406 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043a4:	f7fe fd54 	bl	8002e50 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d302      	bcc.n	80043ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d11d      	bne.n	80043f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043c4:	2b40      	cmp	r3, #64	@ 0x40
 80043c6:	d016      	beq.n	80043f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2220      	movs	r2, #32
 80043d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e2:	f043 0220 	orr.w	r2, r3, #32
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e007      	b.n	8004406 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004400:	2b40      	cmp	r3, #64	@ 0x40
 8004402:	d1ae      	bne.n	8004362 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004420:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004424:	d11b      	bne.n	800445e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800442e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2220      	movs	r2, #32
 800443a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444a:	f043 0204 	orr.w	r2, r3, #4
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e000      	b.n	8004460 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	bc80      	pop	{r7}
 8004468:	4770      	bx	lr
	...

0800446c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e272      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 8087 	beq.w	800459a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800448c:	4b92      	ldr	r3, [pc, #584]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f003 030c 	and.w	r3, r3, #12
 8004494:	2b04      	cmp	r3, #4
 8004496:	d00c      	beq.n	80044b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004498:	4b8f      	ldr	r3, [pc, #572]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f003 030c 	and.w	r3, r3, #12
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d112      	bne.n	80044ca <HAL_RCC_OscConfig+0x5e>
 80044a4:	4b8c      	ldr	r3, [pc, #560]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044b0:	d10b      	bne.n	80044ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b2:	4b89      	ldr	r3, [pc, #548]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d06c      	beq.n	8004598 <HAL_RCC_OscConfig+0x12c>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d168      	bne.n	8004598 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e24c      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044d2:	d106      	bne.n	80044e2 <HAL_RCC_OscConfig+0x76>
 80044d4:	4b80      	ldr	r3, [pc, #512]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a7f      	ldr	r2, [pc, #508]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80044da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044de:	6013      	str	r3, [r2, #0]
 80044e0:	e02e      	b.n	8004540 <HAL_RCC_OscConfig+0xd4>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10c      	bne.n	8004504 <HAL_RCC_OscConfig+0x98>
 80044ea:	4b7b      	ldr	r3, [pc, #492]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a7a      	ldr	r2, [pc, #488]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80044f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044f4:	6013      	str	r3, [r2, #0]
 80044f6:	4b78      	ldr	r3, [pc, #480]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a77      	ldr	r2, [pc, #476]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80044fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004500:	6013      	str	r3, [r2, #0]
 8004502:	e01d      	b.n	8004540 <HAL_RCC_OscConfig+0xd4>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800450c:	d10c      	bne.n	8004528 <HAL_RCC_OscConfig+0xbc>
 800450e:	4b72      	ldr	r3, [pc, #456]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a71      	ldr	r2, [pc, #452]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 8004514:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	4b6f      	ldr	r3, [pc, #444]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a6e      	ldr	r2, [pc, #440]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 8004520:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004524:	6013      	str	r3, [r2, #0]
 8004526:	e00b      	b.n	8004540 <HAL_RCC_OscConfig+0xd4>
 8004528:	4b6b      	ldr	r3, [pc, #428]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a6a      	ldr	r2, [pc, #424]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 800452e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004532:	6013      	str	r3, [r2, #0]
 8004534:	4b68      	ldr	r3, [pc, #416]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a67      	ldr	r2, [pc, #412]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 800453a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800453e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d013      	beq.n	8004570 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004548:	f7fe fc82 	bl	8002e50 <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004550:	f7fe fc7e 	bl	8002e50 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b64      	cmp	r3, #100	@ 0x64
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e200      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004562:	4b5d      	ldr	r3, [pc, #372]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0f0      	beq.n	8004550 <HAL_RCC_OscConfig+0xe4>
 800456e:	e014      	b.n	800459a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004570:	f7fe fc6e 	bl	8002e50 <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004578:	f7fe fc6a 	bl	8002e50 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b64      	cmp	r3, #100	@ 0x64
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e1ec      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800458a:	4b53      	ldr	r3, [pc, #332]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1f0      	bne.n	8004578 <HAL_RCC_OscConfig+0x10c>
 8004596:	e000      	b.n	800459a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d063      	beq.n	800466e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045a6:	4b4c      	ldr	r3, [pc, #304]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f003 030c 	and.w	r3, r3, #12
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00b      	beq.n	80045ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80045b2:	4b49      	ldr	r3, [pc, #292]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f003 030c 	and.w	r3, r3, #12
 80045ba:	2b08      	cmp	r3, #8
 80045bc:	d11c      	bne.n	80045f8 <HAL_RCC_OscConfig+0x18c>
 80045be:	4b46      	ldr	r3, [pc, #280]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d116      	bne.n	80045f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ca:	4b43      	ldr	r3, [pc, #268]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d005      	beq.n	80045e2 <HAL_RCC_OscConfig+0x176>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d001      	beq.n	80045e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e1c0      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045e2:	4b3d      	ldr	r3, [pc, #244]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	4939      	ldr	r1, [pc, #228]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045f6:	e03a      	b.n	800466e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d020      	beq.n	8004642 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004600:	4b36      	ldr	r3, [pc, #216]	@ (80046dc <HAL_RCC_OscConfig+0x270>)
 8004602:	2201      	movs	r2, #1
 8004604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004606:	f7fe fc23 	bl	8002e50 <HAL_GetTick>
 800460a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800460c:	e008      	b.n	8004620 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800460e:	f7fe fc1f 	bl	8002e50 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d901      	bls.n	8004620 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e1a1      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004620:	4b2d      	ldr	r3, [pc, #180]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d0f0      	beq.n	800460e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800462c:	4b2a      	ldr	r3, [pc, #168]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	00db      	lsls	r3, r3, #3
 800463a:	4927      	ldr	r1, [pc, #156]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 800463c:	4313      	orrs	r3, r2
 800463e:	600b      	str	r3, [r1, #0]
 8004640:	e015      	b.n	800466e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004642:	4b26      	ldr	r3, [pc, #152]	@ (80046dc <HAL_RCC_OscConfig+0x270>)
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004648:	f7fe fc02 	bl	8002e50 <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004650:	f7fe fbfe 	bl	8002e50 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e180      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004662:	4b1d      	ldr	r3, [pc, #116]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1f0      	bne.n	8004650 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0308 	and.w	r3, r3, #8
 8004676:	2b00      	cmp	r3, #0
 8004678:	d03a      	beq.n	80046f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d019      	beq.n	80046b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004682:	4b17      	ldr	r3, [pc, #92]	@ (80046e0 <HAL_RCC_OscConfig+0x274>)
 8004684:	2201      	movs	r2, #1
 8004686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004688:	f7fe fbe2 	bl	8002e50 <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800468e:	e008      	b.n	80046a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004690:	f7fe fbde 	bl	8002e50 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e160      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046a2:	4b0d      	ldr	r3, [pc, #52]	@ (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80046a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0f0      	beq.n	8004690 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80046ae:	2001      	movs	r0, #1
 80046b0:	f000 face 	bl	8004c50 <RCC_Delay>
 80046b4:	e01c      	b.n	80046f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046b6:	4b0a      	ldr	r3, [pc, #40]	@ (80046e0 <HAL_RCC_OscConfig+0x274>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046bc:	f7fe fbc8 	bl	8002e50 <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046c2:	e00f      	b.n	80046e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046c4:	f7fe fbc4 	bl	8002e50 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d908      	bls.n	80046e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e146      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
 80046d6:	bf00      	nop
 80046d8:	40021000 	.word	0x40021000
 80046dc:	42420000 	.word	0x42420000
 80046e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046e4:	4b92      	ldr	r3, [pc, #584]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80046e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1e9      	bne.n	80046c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 80a6 	beq.w	800484a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046fe:	2300      	movs	r3, #0
 8004700:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004702:	4b8b      	ldr	r3, [pc, #556]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10d      	bne.n	800472a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800470e:	4b88      	ldr	r3, [pc, #544]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	4a87      	ldr	r2, [pc, #540]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 8004714:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004718:	61d3      	str	r3, [r2, #28]
 800471a:	4b85      	ldr	r3, [pc, #532]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004722:	60bb      	str	r3, [r7, #8]
 8004724:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004726:	2301      	movs	r3, #1
 8004728:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800472a:	4b82      	ldr	r3, [pc, #520]	@ (8004934 <HAL_RCC_OscConfig+0x4c8>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004732:	2b00      	cmp	r3, #0
 8004734:	d118      	bne.n	8004768 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004736:	4b7f      	ldr	r3, [pc, #508]	@ (8004934 <HAL_RCC_OscConfig+0x4c8>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a7e      	ldr	r2, [pc, #504]	@ (8004934 <HAL_RCC_OscConfig+0x4c8>)
 800473c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004740:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004742:	f7fe fb85 	bl	8002e50 <HAL_GetTick>
 8004746:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004748:	e008      	b.n	800475c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800474a:	f7fe fb81 	bl	8002e50 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	2b64      	cmp	r3, #100	@ 0x64
 8004756:	d901      	bls.n	800475c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e103      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800475c:	4b75      	ldr	r3, [pc, #468]	@ (8004934 <HAL_RCC_OscConfig+0x4c8>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0f0      	beq.n	800474a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d106      	bne.n	800477e <HAL_RCC_OscConfig+0x312>
 8004770:	4b6f      	ldr	r3, [pc, #444]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	4a6e      	ldr	r2, [pc, #440]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 8004776:	f043 0301 	orr.w	r3, r3, #1
 800477a:	6213      	str	r3, [r2, #32]
 800477c:	e02d      	b.n	80047da <HAL_RCC_OscConfig+0x36e>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10c      	bne.n	80047a0 <HAL_RCC_OscConfig+0x334>
 8004786:	4b6a      	ldr	r3, [pc, #424]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	4a69      	ldr	r2, [pc, #420]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 800478c:	f023 0301 	bic.w	r3, r3, #1
 8004790:	6213      	str	r3, [r2, #32]
 8004792:	4b67      	ldr	r3, [pc, #412]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	4a66      	ldr	r2, [pc, #408]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 8004798:	f023 0304 	bic.w	r3, r3, #4
 800479c:	6213      	str	r3, [r2, #32]
 800479e:	e01c      	b.n	80047da <HAL_RCC_OscConfig+0x36e>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	2b05      	cmp	r3, #5
 80047a6:	d10c      	bne.n	80047c2 <HAL_RCC_OscConfig+0x356>
 80047a8:	4b61      	ldr	r3, [pc, #388]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	4a60      	ldr	r2, [pc, #384]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80047ae:	f043 0304 	orr.w	r3, r3, #4
 80047b2:	6213      	str	r3, [r2, #32]
 80047b4:	4b5e      	ldr	r3, [pc, #376]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	4a5d      	ldr	r2, [pc, #372]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80047ba:	f043 0301 	orr.w	r3, r3, #1
 80047be:	6213      	str	r3, [r2, #32]
 80047c0:	e00b      	b.n	80047da <HAL_RCC_OscConfig+0x36e>
 80047c2:	4b5b      	ldr	r3, [pc, #364]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	4a5a      	ldr	r2, [pc, #360]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80047c8:	f023 0301 	bic.w	r3, r3, #1
 80047cc:	6213      	str	r3, [r2, #32]
 80047ce:	4b58      	ldr	r3, [pc, #352]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	4a57      	ldr	r2, [pc, #348]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80047d4:	f023 0304 	bic.w	r3, r3, #4
 80047d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d015      	beq.n	800480e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047e2:	f7fe fb35 	bl	8002e50 <HAL_GetTick>
 80047e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e8:	e00a      	b.n	8004800 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ea:	f7fe fb31 	bl	8002e50 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e0b1      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004800:	4b4b      	ldr	r3, [pc, #300]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d0ee      	beq.n	80047ea <HAL_RCC_OscConfig+0x37e>
 800480c:	e014      	b.n	8004838 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800480e:	f7fe fb1f 	bl	8002e50 <HAL_GetTick>
 8004812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004814:	e00a      	b.n	800482c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004816:	f7fe fb1b 	bl	8002e50 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004824:	4293      	cmp	r3, r2
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e09b      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800482c:	4b40      	ldr	r3, [pc, #256]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 800482e:	6a1b      	ldr	r3, [r3, #32]
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1ee      	bne.n	8004816 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004838:	7dfb      	ldrb	r3, [r7, #23]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d105      	bne.n	800484a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800483e:	4b3c      	ldr	r3, [pc, #240]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 8004840:	69db      	ldr	r3, [r3, #28]
 8004842:	4a3b      	ldr	r2, [pc, #236]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 8004844:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004848:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	2b00      	cmp	r3, #0
 8004850:	f000 8087 	beq.w	8004962 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004854:	4b36      	ldr	r3, [pc, #216]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f003 030c 	and.w	r3, r3, #12
 800485c:	2b08      	cmp	r3, #8
 800485e:	d061      	beq.n	8004924 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	69db      	ldr	r3, [r3, #28]
 8004864:	2b02      	cmp	r3, #2
 8004866:	d146      	bne.n	80048f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004868:	4b33      	ldr	r3, [pc, #204]	@ (8004938 <HAL_RCC_OscConfig+0x4cc>)
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486e:	f7fe faef 	bl	8002e50 <HAL_GetTick>
 8004872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004874:	e008      	b.n	8004888 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004876:	f7fe faeb 	bl	8002e50 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d901      	bls.n	8004888 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e06d      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004888:	4b29      	ldr	r3, [pc, #164]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1f0      	bne.n	8004876 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800489c:	d108      	bne.n	80048b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800489e:	4b24      	ldr	r3, [pc, #144]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	4921      	ldr	r1, [pc, #132]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048b0:	4b1f      	ldr	r3, [pc, #124]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a19      	ldr	r1, [r3, #32]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c0:	430b      	orrs	r3, r1
 80048c2:	491b      	ldr	r1, [pc, #108]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004938 <HAL_RCC_OscConfig+0x4cc>)
 80048ca:	2201      	movs	r2, #1
 80048cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ce:	f7fe fabf 	bl	8002e50 <HAL_GetTick>
 80048d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048d4:	e008      	b.n	80048e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d6:	f7fe fabb 	bl	8002e50 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d901      	bls.n	80048e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e03d      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048e8:	4b11      	ldr	r3, [pc, #68]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d0f0      	beq.n	80048d6 <HAL_RCC_OscConfig+0x46a>
 80048f4:	e035      	b.n	8004962 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048f6:	4b10      	ldr	r3, [pc, #64]	@ (8004938 <HAL_RCC_OscConfig+0x4cc>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048fc:	f7fe faa8 	bl	8002e50 <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004904:	f7fe faa4 	bl	8002e50 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e026      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004916:	4b06      	ldr	r3, [pc, #24]	@ (8004930 <HAL_RCC_OscConfig+0x4c4>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1f0      	bne.n	8004904 <HAL_RCC_OscConfig+0x498>
 8004922:	e01e      	b.n	8004962 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	69db      	ldr	r3, [r3, #28]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d107      	bne.n	800493c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e019      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
 8004930:	40021000 	.word	0x40021000
 8004934:	40007000 	.word	0x40007000
 8004938:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800493c:	4b0b      	ldr	r3, [pc, #44]	@ (800496c <HAL_RCC_OscConfig+0x500>)
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	429a      	cmp	r2, r3
 800494e:	d106      	bne.n	800495e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800495a:	429a      	cmp	r2, r3
 800495c:	d001      	beq.n	8004962 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e000      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3718      	adds	r7, #24
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	40021000 	.word	0x40021000

08004970 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d101      	bne.n	8004984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e0d0      	b.n	8004b26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004984:	4b6a      	ldr	r3, [pc, #424]	@ (8004b30 <HAL_RCC_ClockConfig+0x1c0>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	429a      	cmp	r2, r3
 8004990:	d910      	bls.n	80049b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004992:	4b67      	ldr	r3, [pc, #412]	@ (8004b30 <HAL_RCC_ClockConfig+0x1c0>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f023 0207 	bic.w	r2, r3, #7
 800499a:	4965      	ldr	r1, [pc, #404]	@ (8004b30 <HAL_RCC_ClockConfig+0x1c0>)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	4313      	orrs	r3, r2
 80049a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049a2:	4b63      	ldr	r3, [pc, #396]	@ (8004b30 <HAL_RCC_ClockConfig+0x1c0>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d001      	beq.n	80049b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e0b8      	b.n	8004b26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d020      	beq.n	8004a02 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0304 	and.w	r3, r3, #4
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d005      	beq.n	80049d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049cc:	4b59      	ldr	r3, [pc, #356]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	4a58      	ldr	r2, [pc, #352]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 80049d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80049d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0308 	and.w	r3, r3, #8
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d005      	beq.n	80049f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049e4:	4b53      	ldr	r3, [pc, #332]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	4a52      	ldr	r2, [pc, #328]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 80049ea:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80049ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049f0:	4b50      	ldr	r3, [pc, #320]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	494d      	ldr	r1, [pc, #308]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d040      	beq.n	8004a90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d107      	bne.n	8004a26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a16:	4b47      	ldr	r3, [pc, #284]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d115      	bne.n	8004a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e07f      	b.n	8004b26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d107      	bne.n	8004a3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a2e:	4b41      	ldr	r3, [pc, #260]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d109      	bne.n	8004a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e073      	b.n	8004b26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a3e:	4b3d      	ldr	r3, [pc, #244]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e06b      	b.n	8004b26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a4e:	4b39      	ldr	r3, [pc, #228]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f023 0203 	bic.w	r2, r3, #3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	4936      	ldr	r1, [pc, #216]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a60:	f7fe f9f6 	bl	8002e50 <HAL_GetTick>
 8004a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a66:	e00a      	b.n	8004a7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a68:	f7fe f9f2 	bl	8002e50 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e053      	b.n	8004b26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a7e:	4b2d      	ldr	r3, [pc, #180]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f003 020c 	and.w	r2, r3, #12
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d1eb      	bne.n	8004a68 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a90:	4b27      	ldr	r3, [pc, #156]	@ (8004b30 <HAL_RCC_ClockConfig+0x1c0>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0307 	and.w	r3, r3, #7
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d210      	bcs.n	8004ac0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a9e:	4b24      	ldr	r3, [pc, #144]	@ (8004b30 <HAL_RCC_ClockConfig+0x1c0>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f023 0207 	bic.w	r2, r3, #7
 8004aa6:	4922      	ldr	r1, [pc, #136]	@ (8004b30 <HAL_RCC_ClockConfig+0x1c0>)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aae:	4b20      	ldr	r3, [pc, #128]	@ (8004b30 <HAL_RCC_ClockConfig+0x1c0>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0307 	and.w	r3, r3, #7
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d001      	beq.n	8004ac0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e032      	b.n	8004b26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0304 	and.w	r3, r3, #4
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d008      	beq.n	8004ade <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004acc:	4b19      	ldr	r3, [pc, #100]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	4916      	ldr	r1, [pc, #88]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0308 	and.w	r3, r3, #8
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d009      	beq.n	8004afe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004aea:	4b12      	ldr	r3, [pc, #72]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	00db      	lsls	r3, r3, #3
 8004af8:	490e      	ldr	r1, [pc, #56]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004afe:	f000 f821 	bl	8004b44 <HAL_RCC_GetSysClockFreq>
 8004b02:	4602      	mov	r2, r0
 8004b04:	4b0b      	ldr	r3, [pc, #44]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	091b      	lsrs	r3, r3, #4
 8004b0a:	f003 030f 	and.w	r3, r3, #15
 8004b0e:	490a      	ldr	r1, [pc, #40]	@ (8004b38 <HAL_RCC_ClockConfig+0x1c8>)
 8004b10:	5ccb      	ldrb	r3, [r1, r3]
 8004b12:	fa22 f303 	lsr.w	r3, r2, r3
 8004b16:	4a09      	ldr	r2, [pc, #36]	@ (8004b3c <HAL_RCC_ClockConfig+0x1cc>)
 8004b18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b1a:	4b09      	ldr	r3, [pc, #36]	@ (8004b40 <HAL_RCC_ClockConfig+0x1d0>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fe f954 	bl	8002dcc <HAL_InitTick>

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	40022000 	.word	0x40022000
 8004b34:	40021000 	.word	0x40021000
 8004b38:	08006450 	.word	0x08006450
 8004b3c:	20000090 	.word	0x20000090
 8004b40:	20000094 	.word	0x20000094

08004b44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60fb      	str	r3, [r7, #12]
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60bb      	str	r3, [r7, #8]
 8004b52:	2300      	movs	r3, #0
 8004b54:	617b      	str	r3, [r7, #20]
 8004b56:	2300      	movs	r3, #0
 8004b58:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f003 030c 	and.w	r3, r3, #12
 8004b6a:	2b04      	cmp	r3, #4
 8004b6c:	d002      	beq.n	8004b74 <HAL_RCC_GetSysClockFreq+0x30>
 8004b6e:	2b08      	cmp	r3, #8
 8004b70:	d003      	beq.n	8004b7a <HAL_RCC_GetSysClockFreq+0x36>
 8004b72:	e027      	b.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b74:	4b19      	ldr	r3, [pc, #100]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x98>)
 8004b76:	613b      	str	r3, [r7, #16]
      break;
 8004b78:	e027      	b.n	8004bca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	0c9b      	lsrs	r3, r3, #18
 8004b7e:	f003 030f 	and.w	r3, r3, #15
 8004b82:	4a17      	ldr	r2, [pc, #92]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b84:	5cd3      	ldrb	r3, [r2, r3]
 8004b86:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d010      	beq.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b92:	4b11      	ldr	r3, [pc, #68]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	0c5b      	lsrs	r3, r3, #17
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	4a11      	ldr	r2, [pc, #68]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b9e:	5cd3      	ldrb	r3, [r2, r3]
 8004ba0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x98>)
 8004ba6:	fb03 f202 	mul.w	r2, r3, r2
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb0:	617b      	str	r3, [r7, #20]
 8004bb2:	e004      	b.n	8004bbe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a0c      	ldr	r2, [pc, #48]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004bb8:	fb02 f303 	mul.w	r3, r2, r3
 8004bbc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	613b      	str	r3, [r7, #16]
      break;
 8004bc2:	e002      	b.n	8004bca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004bc4:	4b05      	ldr	r3, [pc, #20]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x98>)
 8004bc6:	613b      	str	r3, [r7, #16]
      break;
 8004bc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bca:	693b      	ldr	r3, [r7, #16]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	371c      	adds	r7, #28
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bc80      	pop	{r7}
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	40021000 	.word	0x40021000
 8004bdc:	007a1200 	.word	0x007a1200
 8004be0:	08006468 	.word	0x08006468
 8004be4:	08006478 	.word	0x08006478
 8004be8:	003d0900 	.word	0x003d0900

08004bec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bec:	b480      	push	{r7}
 8004bee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bf0:	4b02      	ldr	r3, [pc, #8]	@ (8004bfc <HAL_RCC_GetHCLKFreq+0x10>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bc80      	pop	{r7}
 8004bfa:	4770      	bx	lr
 8004bfc:	20000090 	.word	0x20000090

08004c00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c04:	f7ff fff2 	bl	8004bec <HAL_RCC_GetHCLKFreq>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	4b05      	ldr	r3, [pc, #20]	@ (8004c20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	0a1b      	lsrs	r3, r3, #8
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	4903      	ldr	r1, [pc, #12]	@ (8004c24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c16:	5ccb      	ldrb	r3, [r1, r3]
 8004c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	40021000 	.word	0x40021000
 8004c24:	08006460 	.word	0x08006460

08004c28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c2c:	f7ff ffde 	bl	8004bec <HAL_RCC_GetHCLKFreq>
 8004c30:	4602      	mov	r2, r0
 8004c32:	4b05      	ldr	r3, [pc, #20]	@ (8004c48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	0adb      	lsrs	r3, r3, #11
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	4903      	ldr	r1, [pc, #12]	@ (8004c4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c3e:	5ccb      	ldrb	r3, [r1, r3]
 8004c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	40021000 	.word	0x40021000
 8004c4c:	08006460 	.word	0x08006460

08004c50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c58:	4b0a      	ldr	r3, [pc, #40]	@ (8004c84 <RCC_Delay+0x34>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a0a      	ldr	r2, [pc, #40]	@ (8004c88 <RCC_Delay+0x38>)
 8004c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c62:	0a5b      	lsrs	r3, r3, #9
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	fb02 f303 	mul.w	r3, r2, r3
 8004c6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c6c:	bf00      	nop
  }
  while (Delay --);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	1e5a      	subs	r2, r3, #1
 8004c72:	60fa      	str	r2, [r7, #12]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1f9      	bne.n	8004c6c <RCC_Delay+0x1c>
}
 8004c78:	bf00      	nop
 8004c7a:	bf00      	nop
 8004c7c:	3714      	adds	r7, #20
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bc80      	pop	{r7}
 8004c82:	4770      	bx	lr
 8004c84:	20000090 	.word	0x20000090
 8004c88:	10624dd3 	.word	0x10624dd3

08004c8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e041      	b.n	8004d22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d106      	bne.n	8004cb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7fd ff08 	bl	8002ac8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2202      	movs	r2, #2
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	3304      	adds	r3, #4
 8004cc8:	4619      	mov	r1, r3
 8004cca:	4610      	mov	r0, r2
 8004ccc:	f000 fc28 	bl	8005520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
	...

08004d2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d001      	beq.n	8004d44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e03a      	b.n	8004dba <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2202      	movs	r2, #2
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68da      	ldr	r2, [r3, #12]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f042 0201 	orr.w	r2, r2, #1
 8004d5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a18      	ldr	r2, [pc, #96]	@ (8004dc4 <HAL_TIM_Base_Start_IT+0x98>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d00e      	beq.n	8004d84 <HAL_TIM_Base_Start_IT+0x58>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d6e:	d009      	beq.n	8004d84 <HAL_TIM_Base_Start_IT+0x58>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a14      	ldr	r2, [pc, #80]	@ (8004dc8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d004      	beq.n	8004d84 <HAL_TIM_Base_Start_IT+0x58>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a13      	ldr	r2, [pc, #76]	@ (8004dcc <HAL_TIM_Base_Start_IT+0xa0>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d111      	bne.n	8004da8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 0307 	and.w	r3, r3, #7
 8004d8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2b06      	cmp	r3, #6
 8004d94:	d010      	beq.n	8004db8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f042 0201 	orr.w	r2, r2, #1
 8004da4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004da6:	e007      	b.n	8004db8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 0201 	orr.w	r2, r2, #1
 8004db6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bc80      	pop	{r7}
 8004dc2:	4770      	bx	lr
 8004dc4:	40012c00 	.word	0x40012c00
 8004dc8:	40000400 	.word	0x40000400
 8004dcc:	40000800 	.word	0x40000800

08004dd0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e041      	b.n	8004e66 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d106      	bne.n	8004dfc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7fd fe8c 	bl	8002b14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	3304      	adds	r3, #4
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4610      	mov	r0, r2
 8004e10:	f000 fb86 	bl	8005520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
	...

08004e70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d109      	bne.n	8004e94 <HAL_TIM_PWM_Start+0x24>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	bf14      	ite	ne
 8004e8c:	2301      	movne	r3, #1
 8004e8e:	2300      	moveq	r3, #0
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	e022      	b.n	8004eda <HAL_TIM_PWM_Start+0x6a>
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	d109      	bne.n	8004eae <HAL_TIM_PWM_Start+0x3e>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	bf14      	ite	ne
 8004ea6:	2301      	movne	r3, #1
 8004ea8:	2300      	moveq	r3, #0
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	e015      	b.n	8004eda <HAL_TIM_PWM_Start+0x6a>
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2b08      	cmp	r3, #8
 8004eb2:	d109      	bne.n	8004ec8 <HAL_TIM_PWM_Start+0x58>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	bf14      	ite	ne
 8004ec0:	2301      	movne	r3, #1
 8004ec2:	2300      	moveq	r3, #0
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	e008      	b.n	8004eda <HAL_TIM_PWM_Start+0x6a>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	bf14      	ite	ne
 8004ed4:	2301      	movne	r3, #1
 8004ed6:	2300      	moveq	r3, #0
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e05e      	b.n	8004fa0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d104      	bne.n	8004ef2 <HAL_TIM_PWM_Start+0x82>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2202      	movs	r2, #2
 8004eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ef0:	e013      	b.n	8004f1a <HAL_TIM_PWM_Start+0xaa>
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b04      	cmp	r3, #4
 8004ef6:	d104      	bne.n	8004f02 <HAL_TIM_PWM_Start+0x92>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2202      	movs	r2, #2
 8004efc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f00:	e00b      	b.n	8004f1a <HAL_TIM_PWM_Start+0xaa>
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d104      	bne.n	8004f12 <HAL_TIM_PWM_Start+0xa2>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f10:	e003      	b.n	8004f1a <HAL_TIM_PWM_Start+0xaa>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2202      	movs	r2, #2
 8004f16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	6839      	ldr	r1, [r7, #0]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 fd7c 	bl	8005a20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a1e      	ldr	r2, [pc, #120]	@ (8004fa8 <HAL_TIM_PWM_Start+0x138>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d107      	bne.n	8004f42 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f40:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a18      	ldr	r2, [pc, #96]	@ (8004fa8 <HAL_TIM_PWM_Start+0x138>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d00e      	beq.n	8004f6a <HAL_TIM_PWM_Start+0xfa>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f54:	d009      	beq.n	8004f6a <HAL_TIM_PWM_Start+0xfa>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a14      	ldr	r2, [pc, #80]	@ (8004fac <HAL_TIM_PWM_Start+0x13c>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d004      	beq.n	8004f6a <HAL_TIM_PWM_Start+0xfa>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a12      	ldr	r2, [pc, #72]	@ (8004fb0 <HAL_TIM_PWM_Start+0x140>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d111      	bne.n	8004f8e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f003 0307 	and.w	r3, r3, #7
 8004f74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2b06      	cmp	r3, #6
 8004f7a:	d010      	beq.n	8004f9e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f042 0201 	orr.w	r2, r2, #1
 8004f8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f8c:	e007      	b.n	8004f9e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f042 0201 	orr.w	r2, r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	40012c00 	.word	0x40012c00
 8004fac:	40000400 	.word	0x40000400
 8004fb0:	40000800 	.word	0x40000800

08004fb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d122      	bne.n	8005010 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	f003 0302 	and.w	r3, r3, #2
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d11b      	bne.n	8005010 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f06f 0202 	mvn.w	r2, #2
 8004fe0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	f003 0303 	and.w	r3, r3, #3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d003      	beq.n	8004ffe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 fa76 	bl	80054e8 <HAL_TIM_IC_CaptureCallback>
 8004ffc:	e005      	b.n	800500a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 fa69 	bl	80054d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 fa78 	bl	80054fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	f003 0304 	and.w	r3, r3, #4
 800501a:	2b04      	cmp	r3, #4
 800501c:	d122      	bne.n	8005064 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f003 0304 	and.w	r3, r3, #4
 8005028:	2b04      	cmp	r3, #4
 800502a:	d11b      	bne.n	8005064 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f06f 0204 	mvn.w	r2, #4
 8005034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2202      	movs	r2, #2
 800503a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005046:	2b00      	cmp	r3, #0
 8005048:	d003      	beq.n	8005052 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 fa4c 	bl	80054e8 <HAL_TIM_IC_CaptureCallback>
 8005050:	e005      	b.n	800505e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 fa3f 	bl	80054d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 fa4e 	bl	80054fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	f003 0308 	and.w	r3, r3, #8
 800506e:	2b08      	cmp	r3, #8
 8005070:	d122      	bne.n	80050b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	f003 0308 	and.w	r3, r3, #8
 800507c:	2b08      	cmp	r3, #8
 800507e:	d11b      	bne.n	80050b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f06f 0208 	mvn.w	r2, #8
 8005088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2204      	movs	r2, #4
 800508e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	f003 0303 	and.w	r3, r3, #3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 fa22 	bl	80054e8 <HAL_TIM_IC_CaptureCallback>
 80050a4:	e005      	b.n	80050b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 fa15 	bl	80054d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 fa24 	bl	80054fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	f003 0310 	and.w	r3, r3, #16
 80050c2:	2b10      	cmp	r3, #16
 80050c4:	d122      	bne.n	800510c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	f003 0310 	and.w	r3, r3, #16
 80050d0:	2b10      	cmp	r3, #16
 80050d2:	d11b      	bne.n	800510c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f06f 0210 	mvn.w	r2, #16
 80050dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2208      	movs	r2, #8
 80050e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	69db      	ldr	r3, [r3, #28]
 80050ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f9f8 	bl	80054e8 <HAL_TIM_IC_CaptureCallback>
 80050f8:	e005      	b.n	8005106 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f9eb 	bl	80054d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 f9fa 	bl	80054fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b01      	cmp	r3, #1
 8005118:	d10e      	bne.n	8005138 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f003 0301 	and.w	r3, r3, #1
 8005124:	2b01      	cmp	r3, #1
 8005126:	d107      	bne.n	8005138 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f06f 0201 	mvn.w	r2, #1
 8005130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7fc ff3a 	bl	8001fac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005142:	2b80      	cmp	r3, #128	@ 0x80
 8005144:	d10e      	bne.n	8005164 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005150:	2b80      	cmp	r3, #128	@ 0x80
 8005152:	d107      	bne.n	8005164 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800515c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 fce9 	bl	8005b36 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800516e:	2b40      	cmp	r3, #64	@ 0x40
 8005170:	d10e      	bne.n	8005190 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800517c:	2b40      	cmp	r3, #64	@ 0x40
 800517e:	d107      	bne.n	8005190 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f9be 	bl	800550c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	f003 0320 	and.w	r3, r3, #32
 800519a:	2b20      	cmp	r3, #32
 800519c:	d10e      	bne.n	80051bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	f003 0320 	and.w	r3, r3, #32
 80051a8:	2b20      	cmp	r3, #32
 80051aa:	d107      	bne.n	80051bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f06f 0220 	mvn.w	r2, #32
 80051b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 fcb4 	bl	8005b24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051bc:	bf00      	nop
 80051be:	3708      	adds	r7, #8
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051d0:	2300      	movs	r3, #0
 80051d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d101      	bne.n	80051e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051de:	2302      	movs	r3, #2
 80051e0:	e0ae      	b.n	8005340 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b0c      	cmp	r3, #12
 80051ee:	f200 809f 	bhi.w	8005330 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80051f2:	a201      	add	r2, pc, #4	@ (adr r2, 80051f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f8:	0800522d 	.word	0x0800522d
 80051fc:	08005331 	.word	0x08005331
 8005200:	08005331 	.word	0x08005331
 8005204:	08005331 	.word	0x08005331
 8005208:	0800526d 	.word	0x0800526d
 800520c:	08005331 	.word	0x08005331
 8005210:	08005331 	.word	0x08005331
 8005214:	08005331 	.word	0x08005331
 8005218:	080052af 	.word	0x080052af
 800521c:	08005331 	.word	0x08005331
 8005220:	08005331 	.word	0x08005331
 8005224:	08005331 	.word	0x08005331
 8005228:	080052ef 	.word	0x080052ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68b9      	ldr	r1, [r7, #8]
 8005232:	4618      	mov	r0, r3
 8005234:	f000 f9d6 	bl	80055e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	699a      	ldr	r2, [r3, #24]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f042 0208 	orr.w	r2, r2, #8
 8005246:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	699a      	ldr	r2, [r3, #24]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f022 0204 	bic.w	r2, r2, #4
 8005256:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6999      	ldr	r1, [r3, #24]
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	691a      	ldr	r2, [r3, #16]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	619a      	str	r2, [r3, #24]
      break;
 800526a:	e064      	b.n	8005336 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68b9      	ldr	r1, [r7, #8]
 8005272:	4618      	mov	r0, r3
 8005274:	f000 fa1c 	bl	80056b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	699a      	ldr	r2, [r3, #24]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005286:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	699a      	ldr	r2, [r3, #24]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005296:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6999      	ldr	r1, [r3, #24]
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	021a      	lsls	r2, r3, #8
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	430a      	orrs	r2, r1
 80052aa:	619a      	str	r2, [r3, #24]
      break;
 80052ac:	e043      	b.n	8005336 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68b9      	ldr	r1, [r7, #8]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f000 fa65 	bl	8005784 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	69da      	ldr	r2, [r3, #28]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f042 0208 	orr.w	r2, r2, #8
 80052c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	69da      	ldr	r2, [r3, #28]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f022 0204 	bic.w	r2, r2, #4
 80052d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	69d9      	ldr	r1, [r3, #28]
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	691a      	ldr	r2, [r3, #16]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	430a      	orrs	r2, r1
 80052ea:	61da      	str	r2, [r3, #28]
      break;
 80052ec:	e023      	b.n	8005336 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68b9      	ldr	r1, [r7, #8]
 80052f4:	4618      	mov	r0, r3
 80052f6:	f000 faaf 	bl	8005858 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	69da      	ldr	r2, [r3, #28]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005308:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	69da      	ldr	r2, [r3, #28]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005318:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	69d9      	ldr	r1, [r3, #28]
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	021a      	lsls	r2, r3, #8
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	430a      	orrs	r2, r1
 800532c:	61da      	str	r2, [r3, #28]
      break;
 800532e:	e002      	b.n	8005336 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	75fb      	strb	r3, [r7, #23]
      break;
 8005334:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800533e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005340:	4618      	mov	r0, r3
 8005342:	3718      	adds	r7, #24
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005352:	2300      	movs	r3, #0
 8005354:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800535c:	2b01      	cmp	r3, #1
 800535e:	d101      	bne.n	8005364 <HAL_TIM_ConfigClockSource+0x1c>
 8005360:	2302      	movs	r3, #2
 8005362:	e0b4      	b.n	80054ce <HAL_TIM_ConfigClockSource+0x186>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005382:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800538a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800539c:	d03e      	beq.n	800541c <HAL_TIM_ConfigClockSource+0xd4>
 800539e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053a2:	f200 8087 	bhi.w	80054b4 <HAL_TIM_ConfigClockSource+0x16c>
 80053a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053aa:	f000 8086 	beq.w	80054ba <HAL_TIM_ConfigClockSource+0x172>
 80053ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053b2:	d87f      	bhi.n	80054b4 <HAL_TIM_ConfigClockSource+0x16c>
 80053b4:	2b70      	cmp	r3, #112	@ 0x70
 80053b6:	d01a      	beq.n	80053ee <HAL_TIM_ConfigClockSource+0xa6>
 80053b8:	2b70      	cmp	r3, #112	@ 0x70
 80053ba:	d87b      	bhi.n	80054b4 <HAL_TIM_ConfigClockSource+0x16c>
 80053bc:	2b60      	cmp	r3, #96	@ 0x60
 80053be:	d050      	beq.n	8005462 <HAL_TIM_ConfigClockSource+0x11a>
 80053c0:	2b60      	cmp	r3, #96	@ 0x60
 80053c2:	d877      	bhi.n	80054b4 <HAL_TIM_ConfigClockSource+0x16c>
 80053c4:	2b50      	cmp	r3, #80	@ 0x50
 80053c6:	d03c      	beq.n	8005442 <HAL_TIM_ConfigClockSource+0xfa>
 80053c8:	2b50      	cmp	r3, #80	@ 0x50
 80053ca:	d873      	bhi.n	80054b4 <HAL_TIM_ConfigClockSource+0x16c>
 80053cc:	2b40      	cmp	r3, #64	@ 0x40
 80053ce:	d058      	beq.n	8005482 <HAL_TIM_ConfigClockSource+0x13a>
 80053d0:	2b40      	cmp	r3, #64	@ 0x40
 80053d2:	d86f      	bhi.n	80054b4 <HAL_TIM_ConfigClockSource+0x16c>
 80053d4:	2b30      	cmp	r3, #48	@ 0x30
 80053d6:	d064      	beq.n	80054a2 <HAL_TIM_ConfigClockSource+0x15a>
 80053d8:	2b30      	cmp	r3, #48	@ 0x30
 80053da:	d86b      	bhi.n	80054b4 <HAL_TIM_ConfigClockSource+0x16c>
 80053dc:	2b20      	cmp	r3, #32
 80053de:	d060      	beq.n	80054a2 <HAL_TIM_ConfigClockSource+0x15a>
 80053e0:	2b20      	cmp	r3, #32
 80053e2:	d867      	bhi.n	80054b4 <HAL_TIM_ConfigClockSource+0x16c>
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d05c      	beq.n	80054a2 <HAL_TIM_ConfigClockSource+0x15a>
 80053e8:	2b10      	cmp	r3, #16
 80053ea:	d05a      	beq.n	80054a2 <HAL_TIM_ConfigClockSource+0x15a>
 80053ec:	e062      	b.n	80054b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053fe:	f000 faf0 	bl	80059e2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005410:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	609a      	str	r2, [r3, #8]
      break;
 800541a:	e04f      	b.n	80054bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800542c:	f000 fad9 	bl	80059e2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689a      	ldr	r2, [r3, #8]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800543e:	609a      	str	r2, [r3, #8]
      break;
 8005440:	e03c      	b.n	80054bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800544e:	461a      	mov	r2, r3
 8005450:	f000 fa50 	bl	80058f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2150      	movs	r1, #80	@ 0x50
 800545a:	4618      	mov	r0, r3
 800545c:	f000 faa7 	bl	80059ae <TIM_ITRx_SetConfig>
      break;
 8005460:	e02c      	b.n	80054bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800546e:	461a      	mov	r2, r3
 8005470:	f000 fa6e 	bl	8005950 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2160      	movs	r1, #96	@ 0x60
 800547a:	4618      	mov	r0, r3
 800547c:	f000 fa97 	bl	80059ae <TIM_ITRx_SetConfig>
      break;
 8005480:	e01c      	b.n	80054bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800548e:	461a      	mov	r2, r3
 8005490:	f000 fa30 	bl	80058f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2140      	movs	r1, #64	@ 0x40
 800549a:	4618      	mov	r0, r3
 800549c:	f000 fa87 	bl	80059ae <TIM_ITRx_SetConfig>
      break;
 80054a0:	e00c      	b.n	80054bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4619      	mov	r1, r3
 80054ac:	4610      	mov	r0, r2
 80054ae:	f000 fa7e 	bl	80059ae <TIM_ITRx_SetConfig>
      break;
 80054b2:	e003      	b.n	80054bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	73fb      	strb	r3, [r7, #15]
      break;
 80054b8:	e000      	b.n	80054bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80054ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80054cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bc80      	pop	{r7}
 80054e6:	4770      	bx	lr

080054e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bc80      	pop	{r7}
 80054f8:	4770      	bx	lr

080054fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b083      	sub	sp, #12
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005502:	bf00      	nop
 8005504:	370c      	adds	r7, #12
 8005506:	46bd      	mov	sp, r7
 8005508:	bc80      	pop	{r7}
 800550a:	4770      	bx	lr

0800550c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	bc80      	pop	{r7}
 800551c:	4770      	bx	lr
	...

08005520 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a29      	ldr	r2, [pc, #164]	@ (80055d8 <TIM_Base_SetConfig+0xb8>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d00b      	beq.n	8005550 <TIM_Base_SetConfig+0x30>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800553e:	d007      	beq.n	8005550 <TIM_Base_SetConfig+0x30>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a26      	ldr	r2, [pc, #152]	@ (80055dc <TIM_Base_SetConfig+0xbc>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d003      	beq.n	8005550 <TIM_Base_SetConfig+0x30>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a25      	ldr	r2, [pc, #148]	@ (80055e0 <TIM_Base_SetConfig+0xc0>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d108      	bne.n	8005562 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005556:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	4313      	orrs	r3, r2
 8005560:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a1c      	ldr	r2, [pc, #112]	@ (80055d8 <TIM_Base_SetConfig+0xb8>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d00b      	beq.n	8005582 <TIM_Base_SetConfig+0x62>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005570:	d007      	beq.n	8005582 <TIM_Base_SetConfig+0x62>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a19      	ldr	r2, [pc, #100]	@ (80055dc <TIM_Base_SetConfig+0xbc>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d003      	beq.n	8005582 <TIM_Base_SetConfig+0x62>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a18      	ldr	r2, [pc, #96]	@ (80055e0 <TIM_Base_SetConfig+0xc0>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d108      	bne.n	8005594 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005588:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	4313      	orrs	r3, r2
 8005592:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	4313      	orrs	r3, r2
 80055a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	689a      	ldr	r2, [r3, #8]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a07      	ldr	r2, [pc, #28]	@ (80055d8 <TIM_Base_SetConfig+0xb8>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d103      	bne.n	80055c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	691a      	ldr	r2, [r3, #16]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	615a      	str	r2, [r3, #20]
}
 80055ce:	bf00      	nop
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bc80      	pop	{r7}
 80055d6:	4770      	bx	lr
 80055d8:	40012c00 	.word	0x40012c00
 80055dc:	40000400 	.word	0x40000400
 80055e0:	40000800 	.word	0x40000800

080055e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b087      	sub	sp, #28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	f023 0201 	bic.w	r2, r3, #1
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f023 0303 	bic.w	r3, r3, #3
 800561a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	4313      	orrs	r3, r2
 8005624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f023 0302 	bic.w	r3, r3, #2
 800562c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	4313      	orrs	r3, r2
 8005636:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a1c      	ldr	r2, [pc, #112]	@ (80056ac <TIM_OC1_SetConfig+0xc8>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d10c      	bne.n	800565a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	f023 0308 	bic.w	r3, r3, #8
 8005646:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	4313      	orrs	r3, r2
 8005650:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f023 0304 	bic.w	r3, r3, #4
 8005658:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a13      	ldr	r2, [pc, #76]	@ (80056ac <TIM_OC1_SetConfig+0xc8>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d111      	bne.n	8005686 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005668:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005670:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	4313      	orrs	r3, r2
 800567a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	4313      	orrs	r3, r2
 8005684:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	685a      	ldr	r2, [r3, #4]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	621a      	str	r2, [r3, #32]
}
 80056a0:	bf00      	nop
 80056a2:	371c      	adds	r7, #28
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bc80      	pop	{r7}
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	40012c00 	.word	0x40012c00

080056b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b087      	sub	sp, #28
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a1b      	ldr	r3, [r3, #32]
 80056c4:	f023 0210 	bic.w	r2, r3, #16
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	021b      	lsls	r3, r3, #8
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f023 0320 	bic.w	r3, r3, #32
 80056fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	011b      	lsls	r3, r3, #4
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	4313      	orrs	r3, r2
 8005706:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a1d      	ldr	r2, [pc, #116]	@ (8005780 <TIM_OC2_SetConfig+0xd0>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d10d      	bne.n	800572c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005716:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	011b      	lsls	r3, r3, #4
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	4313      	orrs	r3, r2
 8005722:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800572a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a14      	ldr	r2, [pc, #80]	@ (8005780 <TIM_OC2_SetConfig+0xd0>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d113      	bne.n	800575c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800573a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005742:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	695b      	ldr	r3, [r3, #20]
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	4313      	orrs	r3, r2
 800574e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	4313      	orrs	r3, r2
 800575a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	621a      	str	r2, [r3, #32]
}
 8005776:	bf00      	nop
 8005778:	371c      	adds	r7, #28
 800577a:	46bd      	mov	sp, r7
 800577c:	bc80      	pop	{r7}
 800577e:	4770      	bx	lr
 8005780:	40012c00 	.word	0x40012c00

08005784 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005784:	b480      	push	{r7}
 8005786:	b087      	sub	sp, #28
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a1b      	ldr	r3, [r3, #32]
 8005798:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f023 0303 	bic.w	r3, r3, #3
 80057ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	021b      	lsls	r3, r3, #8
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a1d      	ldr	r2, [pc, #116]	@ (8005854 <TIM_OC3_SetConfig+0xd0>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d10d      	bne.n	80057fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80057e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	021b      	lsls	r3, r3, #8
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80057fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a14      	ldr	r2, [pc, #80]	@ (8005854 <TIM_OC3_SetConfig+0xd0>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d113      	bne.n	800582e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800580c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005814:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	011b      	lsls	r3, r3, #4
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	4313      	orrs	r3, r2
 8005820:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	011b      	lsls	r3, r3, #4
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	4313      	orrs	r3, r2
 800582c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	685a      	ldr	r2, [r3, #4]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	621a      	str	r2, [r3, #32]
}
 8005848:	bf00      	nop
 800584a:	371c      	adds	r7, #28
 800584c:	46bd      	mov	sp, r7
 800584e:	bc80      	pop	{r7}
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	40012c00 	.word	0x40012c00

08005858 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005858:	b480      	push	{r7}
 800585a:	b087      	sub	sp, #28
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a1b      	ldr	r3, [r3, #32]
 800586c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	69db      	ldr	r3, [r3, #28]
 800587e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800588e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	021b      	lsls	r3, r3, #8
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	4313      	orrs	r3, r2
 800589a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	031b      	lsls	r3, r3, #12
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a0f      	ldr	r2, [pc, #60]	@ (80058f0 <TIM_OC4_SetConfig+0x98>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d109      	bne.n	80058cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	695b      	ldr	r3, [r3, #20]
 80058c4:	019b      	lsls	r3, r3, #6
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685a      	ldr	r2, [r3, #4]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	621a      	str	r2, [r3, #32]
}
 80058e6:	bf00      	nop
 80058e8:	371c      	adds	r7, #28
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bc80      	pop	{r7}
 80058ee:	4770      	bx	lr
 80058f0:	40012c00 	.word	0x40012c00

080058f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b087      	sub	sp, #28
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6a1b      	ldr	r3, [r3, #32]
 8005904:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	f023 0201 	bic.w	r2, r3, #1
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	699b      	ldr	r3, [r3, #24]
 8005916:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800591e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	011b      	lsls	r3, r3, #4
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	4313      	orrs	r3, r2
 8005928:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	f023 030a 	bic.w	r3, r3, #10
 8005930:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	4313      	orrs	r3, r2
 8005938:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	621a      	str	r2, [r3, #32]
}
 8005946:	bf00      	nop
 8005948:	371c      	adds	r7, #28
 800594a:	46bd      	mov	sp, r7
 800594c:	bc80      	pop	{r7}
 800594e:	4770      	bx	lr

08005950 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005950:	b480      	push	{r7}
 8005952:	b087      	sub	sp, #28
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6a1b      	ldr	r3, [r3, #32]
 8005960:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	f023 0210 	bic.w	r2, r3, #16
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800597a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	031b      	lsls	r3, r3, #12
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	4313      	orrs	r3, r2
 8005984:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800598c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	011b      	lsls	r3, r3, #4
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	4313      	orrs	r3, r2
 8005996:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	621a      	str	r2, [r3, #32]
}
 80059a4:	bf00      	nop
 80059a6:	371c      	adds	r7, #28
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bc80      	pop	{r7}
 80059ac:	4770      	bx	lr

080059ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b085      	sub	sp, #20
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
 80059b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059c6:	683a      	ldr	r2, [r7, #0]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	f043 0307 	orr.w	r3, r3, #7
 80059d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	609a      	str	r2, [r3, #8]
}
 80059d8:	bf00      	nop
 80059da:	3714      	adds	r7, #20
 80059dc:	46bd      	mov	sp, r7
 80059de:	bc80      	pop	{r7}
 80059e0:	4770      	bx	lr

080059e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b087      	sub	sp, #28
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	60f8      	str	r0, [r7, #12]
 80059ea:	60b9      	str	r1, [r7, #8]
 80059ec:	607a      	str	r2, [r7, #4]
 80059ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	021a      	lsls	r2, r3, #8
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	431a      	orrs	r2, r3
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	609a      	str	r2, [r3, #8]
}
 8005a16:	bf00      	nop
 8005a18:	371c      	adds	r7, #28
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bc80      	pop	{r7}
 8005a1e:	4770      	bx	lr

08005a20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b087      	sub	sp, #28
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	f003 031f 	and.w	r3, r3, #31
 8005a32:	2201      	movs	r2, #1
 8005a34:	fa02 f303 	lsl.w	r3, r2, r3
 8005a38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6a1a      	ldr	r2, [r3, #32]
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	43db      	mvns	r3, r3
 8005a42:	401a      	ands	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6a1a      	ldr	r2, [r3, #32]
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	f003 031f 	and.w	r3, r3, #31
 8005a52:	6879      	ldr	r1, [r7, #4]
 8005a54:	fa01 f303 	lsl.w	r3, r1, r3
 8005a58:	431a      	orrs	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	621a      	str	r2, [r3, #32]
}
 8005a5e:	bf00      	nop
 8005a60:	371c      	adds	r7, #28
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bc80      	pop	{r7}
 8005a66:	4770      	bx	lr

08005a68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d101      	bne.n	8005a80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	e046      	b.n	8005b0e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a16      	ldr	r2, [pc, #88]	@ (8005b18 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d00e      	beq.n	8005ae2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005acc:	d009      	beq.n	8005ae2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a12      	ldr	r2, [pc, #72]	@ (8005b1c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d004      	beq.n	8005ae2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a10      	ldr	r2, [pc, #64]	@ (8005b20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d10c      	bne.n	8005afc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ae8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3714      	adds	r7, #20
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bc80      	pop	{r7}
 8005b16:	4770      	bx	lr
 8005b18:	40012c00 	.word	0x40012c00
 8005b1c:	40000400 	.word	0x40000400
 8005b20:	40000800 	.word	0x40000800

08005b24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bc80      	pop	{r7}
 8005b34:	4770      	bx	lr

08005b36 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b36:	b480      	push	{r7}
 8005b38:	b083      	sub	sp, #12
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b3e:	bf00      	nop
 8005b40:	370c      	adds	r7, #12
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bc80      	pop	{r7}
 8005b46:	4770      	bx	lr

08005b48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d101      	bne.n	8005b5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e042      	b.n	8005be0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d106      	bne.n	8005b74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f7fd f868 	bl	8002c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2224      	movs	r2, #36	@ 0x24
 8005b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68da      	ldr	r2, [r3, #12]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 f82b 	bl	8005be8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	691a      	ldr	r2, [r3, #16]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ba0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	695a      	ldr	r2, [r3, #20]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005bb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68da      	ldr	r2, [r3, #12]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005bc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2220      	movs	r2, #32
 8005bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2220      	movs	r2, #32
 8005bd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	68da      	ldr	r2, [r3, #12]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	430a      	orrs	r2, r1
 8005c04:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	689a      	ldr	r2, [r3, #8]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	431a      	orrs	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005c22:	f023 030c 	bic.w	r3, r3, #12
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	6812      	ldr	r2, [r2, #0]
 8005c2a:	68b9      	ldr	r1, [r7, #8]
 8005c2c:	430b      	orrs	r3, r1
 8005c2e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	699a      	ldr	r2, [r3, #24]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a2c      	ldr	r2, [pc, #176]	@ (8005cfc <UART_SetConfig+0x114>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d103      	bne.n	8005c58 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005c50:	f7fe ffea 	bl	8004c28 <HAL_RCC_GetPCLK2Freq>
 8005c54:	60f8      	str	r0, [r7, #12]
 8005c56:	e002      	b.n	8005c5e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005c58:	f7fe ffd2 	bl	8004c00 <HAL_RCC_GetPCLK1Freq>
 8005c5c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	4613      	mov	r3, r2
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	4413      	add	r3, r2
 8005c66:	009a      	lsls	r2, r3, #2
 8005c68:	441a      	add	r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c74:	4a22      	ldr	r2, [pc, #136]	@ (8005d00 <UART_SetConfig+0x118>)
 8005c76:	fba2 2303 	umull	r2, r3, r2, r3
 8005c7a:	095b      	lsrs	r3, r3, #5
 8005c7c:	0119      	lsls	r1, r3, #4
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	4613      	mov	r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4413      	add	r3, r2
 8005c86:	009a      	lsls	r2, r3, #2
 8005c88:	441a      	add	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c94:	4b1a      	ldr	r3, [pc, #104]	@ (8005d00 <UART_SetConfig+0x118>)
 8005c96:	fba3 0302 	umull	r0, r3, r3, r2
 8005c9a:	095b      	lsrs	r3, r3, #5
 8005c9c:	2064      	movs	r0, #100	@ 0x64
 8005c9e:	fb00 f303 	mul.w	r3, r0, r3
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	011b      	lsls	r3, r3, #4
 8005ca6:	3332      	adds	r3, #50	@ 0x32
 8005ca8:	4a15      	ldr	r2, [pc, #84]	@ (8005d00 <UART_SetConfig+0x118>)
 8005caa:	fba2 2303 	umull	r2, r3, r2, r3
 8005cae:	095b      	lsrs	r3, r3, #5
 8005cb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005cb4:	4419      	add	r1, r3
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4413      	add	r3, r2
 8005cbe:	009a      	lsls	r2, r3, #2
 8005cc0:	441a      	add	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8005d00 <UART_SetConfig+0x118>)
 8005cce:	fba3 0302 	umull	r0, r3, r3, r2
 8005cd2:	095b      	lsrs	r3, r3, #5
 8005cd4:	2064      	movs	r0, #100	@ 0x64
 8005cd6:	fb00 f303 	mul.w	r3, r0, r3
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	011b      	lsls	r3, r3, #4
 8005cde:	3332      	adds	r3, #50	@ 0x32
 8005ce0:	4a07      	ldr	r2, [pc, #28]	@ (8005d00 <UART_SetConfig+0x118>)
 8005ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce6:	095b      	lsrs	r3, r3, #5
 8005ce8:	f003 020f 	and.w	r2, r3, #15
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	440a      	add	r2, r1
 8005cf2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005cf4:	bf00      	nop
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	40013800 	.word	0x40013800
 8005d00:	51eb851f 	.word	0x51eb851f

08005d04 <memset>:
 8005d04:	4603      	mov	r3, r0
 8005d06:	4402      	add	r2, r0
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d100      	bne.n	8005d0e <memset+0xa>
 8005d0c:	4770      	bx	lr
 8005d0e:	f803 1b01 	strb.w	r1, [r3], #1
 8005d12:	e7f9      	b.n	8005d08 <memset+0x4>

08005d14 <__errno>:
 8005d14:	4b01      	ldr	r3, [pc, #4]	@ (8005d1c <__errno+0x8>)
 8005d16:	6818      	ldr	r0, [r3, #0]
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	2000009c 	.word	0x2000009c

08005d20 <__libc_init_array>:
 8005d20:	b570      	push	{r4, r5, r6, lr}
 8005d22:	2600      	movs	r6, #0
 8005d24:	4d0c      	ldr	r5, [pc, #48]	@ (8005d58 <__libc_init_array+0x38>)
 8005d26:	4c0d      	ldr	r4, [pc, #52]	@ (8005d5c <__libc_init_array+0x3c>)
 8005d28:	1b64      	subs	r4, r4, r5
 8005d2a:	10a4      	asrs	r4, r4, #2
 8005d2c:	42a6      	cmp	r6, r4
 8005d2e:	d109      	bne.n	8005d44 <__libc_init_array+0x24>
 8005d30:	f000 fb80 	bl	8006434 <_init>
 8005d34:	2600      	movs	r6, #0
 8005d36:	4d0a      	ldr	r5, [pc, #40]	@ (8005d60 <__libc_init_array+0x40>)
 8005d38:	4c0a      	ldr	r4, [pc, #40]	@ (8005d64 <__libc_init_array+0x44>)
 8005d3a:	1b64      	subs	r4, r4, r5
 8005d3c:	10a4      	asrs	r4, r4, #2
 8005d3e:	42a6      	cmp	r6, r4
 8005d40:	d105      	bne.n	8005d4e <__libc_init_array+0x2e>
 8005d42:	bd70      	pop	{r4, r5, r6, pc}
 8005d44:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d48:	4798      	blx	r3
 8005d4a:	3601      	adds	r6, #1
 8005d4c:	e7ee      	b.n	8005d2c <__libc_init_array+0xc>
 8005d4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d52:	4798      	blx	r3
 8005d54:	3601      	adds	r6, #1
 8005d56:	e7f2      	b.n	8005d3e <__libc_init_array+0x1e>
 8005d58:	080064f0 	.word	0x080064f0
 8005d5c:	080064f0 	.word	0x080064f0
 8005d60:	080064f0 	.word	0x080064f0
 8005d64:	080064f4 	.word	0x080064f4

08005d68 <atan2>:
 8005d68:	f000 ba92 	b.w	8006290 <__ieee754_atan2>

08005d6c <sqrt>:
 8005d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d6e:	4606      	mov	r6, r0
 8005d70:	460f      	mov	r7, r1
 8005d72:	f000 f9b5 	bl	80060e0 <__ieee754_sqrt>
 8005d76:	4632      	mov	r2, r6
 8005d78:	4604      	mov	r4, r0
 8005d7a:	460d      	mov	r5, r1
 8005d7c:	463b      	mov	r3, r7
 8005d7e:	4630      	mov	r0, r6
 8005d80:	4639      	mov	r1, r7
 8005d82:	f7fa fe3b 	bl	80009fc <__aeabi_dcmpun>
 8005d86:	b990      	cbnz	r0, 8005dae <sqrt+0x42>
 8005d88:	2200      	movs	r2, #0
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	4630      	mov	r0, r6
 8005d8e:	4639      	mov	r1, r7
 8005d90:	f7fa fe0c 	bl	80009ac <__aeabi_dcmplt>
 8005d94:	b158      	cbz	r0, 8005dae <sqrt+0x42>
 8005d96:	f7ff ffbd 	bl	8005d14 <__errno>
 8005d9a:	2321      	movs	r3, #33	@ 0x21
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	6003      	str	r3, [r0, #0]
 8005da0:	2300      	movs	r3, #0
 8005da2:	4610      	mov	r0, r2
 8005da4:	4619      	mov	r1, r3
 8005da6:	f7fa fcb9 	bl	800071c <__aeabi_ddiv>
 8005daa:	4604      	mov	r4, r0
 8005dac:	460d      	mov	r5, r1
 8005dae:	4620      	mov	r0, r4
 8005db0:	4629      	mov	r1, r5
 8005db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005db4:	0000      	movs	r0, r0
	...

08005db8 <atan>:
 8005db8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dbc:	4bbc      	ldr	r3, [pc, #752]	@ (80060b0 <atan+0x2f8>)
 8005dbe:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8005dc2:	429e      	cmp	r6, r3
 8005dc4:	4604      	mov	r4, r0
 8005dc6:	460d      	mov	r5, r1
 8005dc8:	468b      	mov	fp, r1
 8005dca:	d918      	bls.n	8005dfe <atan+0x46>
 8005dcc:	4bb9      	ldr	r3, [pc, #740]	@ (80060b4 <atan+0x2fc>)
 8005dce:	429e      	cmp	r6, r3
 8005dd0:	d801      	bhi.n	8005dd6 <atan+0x1e>
 8005dd2:	d109      	bne.n	8005de8 <atan+0x30>
 8005dd4:	b140      	cbz	r0, 8005de8 <atan+0x30>
 8005dd6:	4622      	mov	r2, r4
 8005dd8:	462b      	mov	r3, r5
 8005dda:	4620      	mov	r0, r4
 8005ddc:	4629      	mov	r1, r5
 8005dde:	f7fa f9bd 	bl	800015c <__adddf3>
 8005de2:	4604      	mov	r4, r0
 8005de4:	460d      	mov	r5, r1
 8005de6:	e006      	b.n	8005df6 <atan+0x3e>
 8005de8:	f1bb 0f00 	cmp.w	fp, #0
 8005dec:	f340 8123 	ble.w	8006036 <atan+0x27e>
 8005df0:	a593      	add	r5, pc, #588	@ (adr r5, 8006040 <atan+0x288>)
 8005df2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005df6:	4620      	mov	r0, r4
 8005df8:	4629      	mov	r1, r5
 8005dfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dfe:	4bae      	ldr	r3, [pc, #696]	@ (80060b8 <atan+0x300>)
 8005e00:	429e      	cmp	r6, r3
 8005e02:	d811      	bhi.n	8005e28 <atan+0x70>
 8005e04:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8005e08:	429e      	cmp	r6, r3
 8005e0a:	d80a      	bhi.n	8005e22 <atan+0x6a>
 8005e0c:	a38e      	add	r3, pc, #568	@ (adr r3, 8006048 <atan+0x290>)
 8005e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e12:	f7fa f9a3 	bl	800015c <__adddf3>
 8005e16:	2200      	movs	r2, #0
 8005e18:	4ba8      	ldr	r3, [pc, #672]	@ (80060bc <atan+0x304>)
 8005e1a:	f7fa fde5 	bl	80009e8 <__aeabi_dcmpgt>
 8005e1e:	2800      	cmp	r0, #0
 8005e20:	d1e9      	bne.n	8005df6 <atan+0x3e>
 8005e22:	f04f 3aff 	mov.w	sl, #4294967295
 8005e26:	e027      	b.n	8005e78 <atan+0xc0>
 8005e28:	f000 f956 	bl	80060d8 <fabs>
 8005e2c:	4ba4      	ldr	r3, [pc, #656]	@ (80060c0 <atan+0x308>)
 8005e2e:	4604      	mov	r4, r0
 8005e30:	429e      	cmp	r6, r3
 8005e32:	460d      	mov	r5, r1
 8005e34:	f200 80b8 	bhi.w	8005fa8 <atan+0x1f0>
 8005e38:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8005e3c:	429e      	cmp	r6, r3
 8005e3e:	f200 809c 	bhi.w	8005f7a <atan+0x1c2>
 8005e42:	4602      	mov	r2, r0
 8005e44:	460b      	mov	r3, r1
 8005e46:	f7fa f989 	bl	800015c <__adddf3>
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	4b9b      	ldr	r3, [pc, #620]	@ (80060bc <atan+0x304>)
 8005e4e:	f7fa f983 	bl	8000158 <__aeabi_dsub>
 8005e52:	2200      	movs	r2, #0
 8005e54:	4606      	mov	r6, r0
 8005e56:	460f      	mov	r7, r1
 8005e58:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	4629      	mov	r1, r5
 8005e60:	f7fa f97c 	bl	800015c <__adddf3>
 8005e64:	4602      	mov	r2, r0
 8005e66:	460b      	mov	r3, r1
 8005e68:	4630      	mov	r0, r6
 8005e6a:	4639      	mov	r1, r7
 8005e6c:	f7fa fc56 	bl	800071c <__aeabi_ddiv>
 8005e70:	f04f 0a00 	mov.w	sl, #0
 8005e74:	4604      	mov	r4, r0
 8005e76:	460d      	mov	r5, r1
 8005e78:	4622      	mov	r2, r4
 8005e7a:	462b      	mov	r3, r5
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	4629      	mov	r1, r5
 8005e80:	f7fa fb22 	bl	80004c8 <__aeabi_dmul>
 8005e84:	4602      	mov	r2, r0
 8005e86:	460b      	mov	r3, r1
 8005e88:	4680      	mov	r8, r0
 8005e8a:	4689      	mov	r9, r1
 8005e8c:	f7fa fb1c 	bl	80004c8 <__aeabi_dmul>
 8005e90:	a36f      	add	r3, pc, #444	@ (adr r3, 8006050 <atan+0x298>)
 8005e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e96:	4606      	mov	r6, r0
 8005e98:	460f      	mov	r7, r1
 8005e9a:	f7fa fb15 	bl	80004c8 <__aeabi_dmul>
 8005e9e:	a36e      	add	r3, pc, #440	@ (adr r3, 8006058 <atan+0x2a0>)
 8005ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea4:	f7fa f95a 	bl	800015c <__adddf3>
 8005ea8:	4632      	mov	r2, r6
 8005eaa:	463b      	mov	r3, r7
 8005eac:	f7fa fb0c 	bl	80004c8 <__aeabi_dmul>
 8005eb0:	a36b      	add	r3, pc, #428	@ (adr r3, 8006060 <atan+0x2a8>)
 8005eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb6:	f7fa f951 	bl	800015c <__adddf3>
 8005eba:	4632      	mov	r2, r6
 8005ebc:	463b      	mov	r3, r7
 8005ebe:	f7fa fb03 	bl	80004c8 <__aeabi_dmul>
 8005ec2:	a369      	add	r3, pc, #420	@ (adr r3, 8006068 <atan+0x2b0>)
 8005ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec8:	f7fa f948 	bl	800015c <__adddf3>
 8005ecc:	4632      	mov	r2, r6
 8005ece:	463b      	mov	r3, r7
 8005ed0:	f7fa fafa 	bl	80004c8 <__aeabi_dmul>
 8005ed4:	a366      	add	r3, pc, #408	@ (adr r3, 8006070 <atan+0x2b8>)
 8005ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eda:	f7fa f93f 	bl	800015c <__adddf3>
 8005ede:	4632      	mov	r2, r6
 8005ee0:	463b      	mov	r3, r7
 8005ee2:	f7fa faf1 	bl	80004c8 <__aeabi_dmul>
 8005ee6:	a364      	add	r3, pc, #400	@ (adr r3, 8006078 <atan+0x2c0>)
 8005ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eec:	f7fa f936 	bl	800015c <__adddf3>
 8005ef0:	4642      	mov	r2, r8
 8005ef2:	464b      	mov	r3, r9
 8005ef4:	f7fa fae8 	bl	80004c8 <__aeabi_dmul>
 8005ef8:	a361      	add	r3, pc, #388	@ (adr r3, 8006080 <atan+0x2c8>)
 8005efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efe:	4680      	mov	r8, r0
 8005f00:	4689      	mov	r9, r1
 8005f02:	4630      	mov	r0, r6
 8005f04:	4639      	mov	r1, r7
 8005f06:	f7fa fadf 	bl	80004c8 <__aeabi_dmul>
 8005f0a:	a35f      	add	r3, pc, #380	@ (adr r3, 8006088 <atan+0x2d0>)
 8005f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f10:	f7fa f922 	bl	8000158 <__aeabi_dsub>
 8005f14:	4632      	mov	r2, r6
 8005f16:	463b      	mov	r3, r7
 8005f18:	f7fa fad6 	bl	80004c8 <__aeabi_dmul>
 8005f1c:	a35c      	add	r3, pc, #368	@ (adr r3, 8006090 <atan+0x2d8>)
 8005f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f22:	f7fa f919 	bl	8000158 <__aeabi_dsub>
 8005f26:	4632      	mov	r2, r6
 8005f28:	463b      	mov	r3, r7
 8005f2a:	f7fa facd 	bl	80004c8 <__aeabi_dmul>
 8005f2e:	a35a      	add	r3, pc, #360	@ (adr r3, 8006098 <atan+0x2e0>)
 8005f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f34:	f7fa f910 	bl	8000158 <__aeabi_dsub>
 8005f38:	4632      	mov	r2, r6
 8005f3a:	463b      	mov	r3, r7
 8005f3c:	f7fa fac4 	bl	80004c8 <__aeabi_dmul>
 8005f40:	a357      	add	r3, pc, #348	@ (adr r3, 80060a0 <atan+0x2e8>)
 8005f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f46:	f7fa f907 	bl	8000158 <__aeabi_dsub>
 8005f4a:	4632      	mov	r2, r6
 8005f4c:	463b      	mov	r3, r7
 8005f4e:	f7fa fabb 	bl	80004c8 <__aeabi_dmul>
 8005f52:	4602      	mov	r2, r0
 8005f54:	460b      	mov	r3, r1
 8005f56:	4640      	mov	r0, r8
 8005f58:	4649      	mov	r1, r9
 8005f5a:	f7fa f8ff 	bl	800015c <__adddf3>
 8005f5e:	4622      	mov	r2, r4
 8005f60:	462b      	mov	r3, r5
 8005f62:	f7fa fab1 	bl	80004c8 <__aeabi_dmul>
 8005f66:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	d144      	bne.n	8005ffa <atan+0x242>
 8005f70:	4620      	mov	r0, r4
 8005f72:	4629      	mov	r1, r5
 8005f74:	f7fa f8f0 	bl	8000158 <__aeabi_dsub>
 8005f78:	e733      	b.n	8005de2 <atan+0x2a>
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	4b4f      	ldr	r3, [pc, #316]	@ (80060bc <atan+0x304>)
 8005f7e:	f7fa f8eb 	bl	8000158 <__aeabi_dsub>
 8005f82:	2200      	movs	r2, #0
 8005f84:	4606      	mov	r6, r0
 8005f86:	460f      	mov	r7, r1
 8005f88:	4620      	mov	r0, r4
 8005f8a:	4629      	mov	r1, r5
 8005f8c:	4b4b      	ldr	r3, [pc, #300]	@ (80060bc <atan+0x304>)
 8005f8e:	f7fa f8e5 	bl	800015c <__adddf3>
 8005f92:	4602      	mov	r2, r0
 8005f94:	460b      	mov	r3, r1
 8005f96:	4630      	mov	r0, r6
 8005f98:	4639      	mov	r1, r7
 8005f9a:	f7fa fbbf 	bl	800071c <__aeabi_ddiv>
 8005f9e:	f04f 0a01 	mov.w	sl, #1
 8005fa2:	4604      	mov	r4, r0
 8005fa4:	460d      	mov	r5, r1
 8005fa6:	e767      	b.n	8005e78 <atan+0xc0>
 8005fa8:	4b46      	ldr	r3, [pc, #280]	@ (80060c4 <atan+0x30c>)
 8005faa:	429e      	cmp	r6, r3
 8005fac:	d21a      	bcs.n	8005fe4 <atan+0x22c>
 8005fae:	2200      	movs	r2, #0
 8005fb0:	4b45      	ldr	r3, [pc, #276]	@ (80060c8 <atan+0x310>)
 8005fb2:	f7fa f8d1 	bl	8000158 <__aeabi_dsub>
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	4606      	mov	r6, r0
 8005fba:	460f      	mov	r7, r1
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	4629      	mov	r1, r5
 8005fc0:	4b41      	ldr	r3, [pc, #260]	@ (80060c8 <atan+0x310>)
 8005fc2:	f7fa fa81 	bl	80004c8 <__aeabi_dmul>
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	4b3c      	ldr	r3, [pc, #240]	@ (80060bc <atan+0x304>)
 8005fca:	f7fa f8c7 	bl	800015c <__adddf3>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	4630      	mov	r0, r6
 8005fd4:	4639      	mov	r1, r7
 8005fd6:	f7fa fba1 	bl	800071c <__aeabi_ddiv>
 8005fda:	f04f 0a02 	mov.w	sl, #2
 8005fde:	4604      	mov	r4, r0
 8005fe0:	460d      	mov	r5, r1
 8005fe2:	e749      	b.n	8005e78 <atan+0xc0>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	2000      	movs	r0, #0
 8005fea:	4938      	ldr	r1, [pc, #224]	@ (80060cc <atan+0x314>)
 8005fec:	f7fa fb96 	bl	800071c <__aeabi_ddiv>
 8005ff0:	f04f 0a03 	mov.w	sl, #3
 8005ff4:	4604      	mov	r4, r0
 8005ff6:	460d      	mov	r5, r1
 8005ff8:	e73e      	b.n	8005e78 <atan+0xc0>
 8005ffa:	4b35      	ldr	r3, [pc, #212]	@ (80060d0 <atan+0x318>)
 8005ffc:	4e35      	ldr	r6, [pc, #212]	@ (80060d4 <atan+0x31c>)
 8005ffe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006006:	f7fa f8a7 	bl	8000158 <__aeabi_dsub>
 800600a:	4622      	mov	r2, r4
 800600c:	462b      	mov	r3, r5
 800600e:	f7fa f8a3 	bl	8000158 <__aeabi_dsub>
 8006012:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006016:	4602      	mov	r2, r0
 8006018:	460b      	mov	r3, r1
 800601a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800601e:	f7fa f89b 	bl	8000158 <__aeabi_dsub>
 8006022:	f1bb 0f00 	cmp.w	fp, #0
 8006026:	4604      	mov	r4, r0
 8006028:	460d      	mov	r5, r1
 800602a:	f6bf aee4 	bge.w	8005df6 <atan+0x3e>
 800602e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006032:	461d      	mov	r5, r3
 8006034:	e6df      	b.n	8005df6 <atan+0x3e>
 8006036:	a51c      	add	r5, pc, #112	@ (adr r5, 80060a8 <atan+0x2f0>)
 8006038:	e9d5 4500 	ldrd	r4, r5, [r5]
 800603c:	e6db      	b.n	8005df6 <atan+0x3e>
 800603e:	bf00      	nop
 8006040:	54442d18 	.word	0x54442d18
 8006044:	3ff921fb 	.word	0x3ff921fb
 8006048:	8800759c 	.word	0x8800759c
 800604c:	7e37e43c 	.word	0x7e37e43c
 8006050:	e322da11 	.word	0xe322da11
 8006054:	3f90ad3a 	.word	0x3f90ad3a
 8006058:	24760deb 	.word	0x24760deb
 800605c:	3fa97b4b 	.word	0x3fa97b4b
 8006060:	a0d03d51 	.word	0xa0d03d51
 8006064:	3fb10d66 	.word	0x3fb10d66
 8006068:	c54c206e 	.word	0xc54c206e
 800606c:	3fb745cd 	.word	0x3fb745cd
 8006070:	920083ff 	.word	0x920083ff
 8006074:	3fc24924 	.word	0x3fc24924
 8006078:	5555550d 	.word	0x5555550d
 800607c:	3fd55555 	.word	0x3fd55555
 8006080:	2c6a6c2f 	.word	0x2c6a6c2f
 8006084:	bfa2b444 	.word	0xbfa2b444
 8006088:	52defd9a 	.word	0x52defd9a
 800608c:	3fadde2d 	.word	0x3fadde2d
 8006090:	af749a6d 	.word	0xaf749a6d
 8006094:	3fb3b0f2 	.word	0x3fb3b0f2
 8006098:	fe231671 	.word	0xfe231671
 800609c:	3fbc71c6 	.word	0x3fbc71c6
 80060a0:	9998ebc4 	.word	0x9998ebc4
 80060a4:	3fc99999 	.word	0x3fc99999
 80060a8:	54442d18 	.word	0x54442d18
 80060ac:	bff921fb 	.word	0xbff921fb
 80060b0:	440fffff 	.word	0x440fffff
 80060b4:	7ff00000 	.word	0x7ff00000
 80060b8:	3fdbffff 	.word	0x3fdbffff
 80060bc:	3ff00000 	.word	0x3ff00000
 80060c0:	3ff2ffff 	.word	0x3ff2ffff
 80060c4:	40038000 	.word	0x40038000
 80060c8:	3ff80000 	.word	0x3ff80000
 80060cc:	bff00000 	.word	0xbff00000
 80060d0:	08006480 	.word	0x08006480
 80060d4:	080064a0 	.word	0x080064a0

080060d8 <fabs>:
 80060d8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80060dc:	4619      	mov	r1, r3
 80060de:	4770      	bx	lr

080060e0 <__ieee754_sqrt>:
 80060e0:	4a67      	ldr	r2, [pc, #412]	@ (8006280 <__ieee754_sqrt+0x1a0>)
 80060e2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060e6:	438a      	bics	r2, r1
 80060e8:	4606      	mov	r6, r0
 80060ea:	460f      	mov	r7, r1
 80060ec:	460b      	mov	r3, r1
 80060ee:	4604      	mov	r4, r0
 80060f0:	d10e      	bne.n	8006110 <__ieee754_sqrt+0x30>
 80060f2:	4602      	mov	r2, r0
 80060f4:	f7fa f9e8 	bl	80004c8 <__aeabi_dmul>
 80060f8:	4602      	mov	r2, r0
 80060fa:	460b      	mov	r3, r1
 80060fc:	4630      	mov	r0, r6
 80060fe:	4639      	mov	r1, r7
 8006100:	f7fa f82c 	bl	800015c <__adddf3>
 8006104:	4606      	mov	r6, r0
 8006106:	460f      	mov	r7, r1
 8006108:	4630      	mov	r0, r6
 800610a:	4639      	mov	r1, r7
 800610c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006110:	2900      	cmp	r1, #0
 8006112:	dc0c      	bgt.n	800612e <__ieee754_sqrt+0x4e>
 8006114:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8006118:	4302      	orrs	r2, r0
 800611a:	d0f5      	beq.n	8006108 <__ieee754_sqrt+0x28>
 800611c:	b189      	cbz	r1, 8006142 <__ieee754_sqrt+0x62>
 800611e:	4602      	mov	r2, r0
 8006120:	f7fa f81a 	bl	8000158 <__aeabi_dsub>
 8006124:	4602      	mov	r2, r0
 8006126:	460b      	mov	r3, r1
 8006128:	f7fa faf8 	bl	800071c <__aeabi_ddiv>
 800612c:	e7ea      	b.n	8006104 <__ieee754_sqrt+0x24>
 800612e:	150a      	asrs	r2, r1, #20
 8006130:	d115      	bne.n	800615e <__ieee754_sqrt+0x7e>
 8006132:	2100      	movs	r1, #0
 8006134:	e009      	b.n	800614a <__ieee754_sqrt+0x6a>
 8006136:	0ae3      	lsrs	r3, r4, #11
 8006138:	3a15      	subs	r2, #21
 800613a:	0564      	lsls	r4, r4, #21
 800613c:	2b00      	cmp	r3, #0
 800613e:	d0fa      	beq.n	8006136 <__ieee754_sqrt+0x56>
 8006140:	e7f7      	b.n	8006132 <__ieee754_sqrt+0x52>
 8006142:	460a      	mov	r2, r1
 8006144:	e7fa      	b.n	800613c <__ieee754_sqrt+0x5c>
 8006146:	005b      	lsls	r3, r3, #1
 8006148:	3101      	adds	r1, #1
 800614a:	02d8      	lsls	r0, r3, #11
 800614c:	d5fb      	bpl.n	8006146 <__ieee754_sqrt+0x66>
 800614e:	1e48      	subs	r0, r1, #1
 8006150:	1a12      	subs	r2, r2, r0
 8006152:	f1c1 0020 	rsb	r0, r1, #32
 8006156:	fa24 f000 	lsr.w	r0, r4, r0
 800615a:	4303      	orrs	r3, r0
 800615c:	408c      	lsls	r4, r1
 800615e:	2600      	movs	r6, #0
 8006160:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8006164:	2116      	movs	r1, #22
 8006166:	07d2      	lsls	r2, r2, #31
 8006168:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800616c:	4632      	mov	r2, r6
 800616e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006172:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006176:	bf5c      	itt	pl
 8006178:	005b      	lslpl	r3, r3, #1
 800617a:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800617e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006182:	bf58      	it	pl
 8006184:	0064      	lslpl	r4, r4, #1
 8006186:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800618a:	107f      	asrs	r7, r7, #1
 800618c:	0064      	lsls	r4, r4, #1
 800618e:	1815      	adds	r5, r2, r0
 8006190:	429d      	cmp	r5, r3
 8006192:	bfde      	ittt	le
 8006194:	182a      	addle	r2, r5, r0
 8006196:	1b5b      	suble	r3, r3, r5
 8006198:	1836      	addle	r6, r6, r0
 800619a:	0fe5      	lsrs	r5, r4, #31
 800619c:	3901      	subs	r1, #1
 800619e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80061a2:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80061a6:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80061aa:	d1f0      	bne.n	800618e <__ieee754_sqrt+0xae>
 80061ac:	460d      	mov	r5, r1
 80061ae:	f04f 0a20 	mov.w	sl, #32
 80061b2:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80061b6:	429a      	cmp	r2, r3
 80061b8:	eb01 0c00 	add.w	ip, r1, r0
 80061bc:	db02      	blt.n	80061c4 <__ieee754_sqrt+0xe4>
 80061be:	d113      	bne.n	80061e8 <__ieee754_sqrt+0x108>
 80061c0:	45a4      	cmp	ip, r4
 80061c2:	d811      	bhi.n	80061e8 <__ieee754_sqrt+0x108>
 80061c4:	f1bc 0f00 	cmp.w	ip, #0
 80061c8:	eb0c 0100 	add.w	r1, ip, r0
 80061cc:	da42      	bge.n	8006254 <__ieee754_sqrt+0x174>
 80061ce:	2900      	cmp	r1, #0
 80061d0:	db40      	blt.n	8006254 <__ieee754_sqrt+0x174>
 80061d2:	f102 0e01 	add.w	lr, r2, #1
 80061d6:	1a9b      	subs	r3, r3, r2
 80061d8:	4672      	mov	r2, lr
 80061da:	45a4      	cmp	ip, r4
 80061dc:	bf88      	it	hi
 80061de:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80061e2:	eba4 040c 	sub.w	r4, r4, ip
 80061e6:	4405      	add	r5, r0
 80061e8:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 80061ec:	f1ba 0a01 	subs.w	sl, sl, #1
 80061f0:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 80061f4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80061f8:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80061fc:	d1db      	bne.n	80061b6 <__ieee754_sqrt+0xd6>
 80061fe:	431c      	orrs	r4, r3
 8006200:	d01a      	beq.n	8006238 <__ieee754_sqrt+0x158>
 8006202:	4c20      	ldr	r4, [pc, #128]	@ (8006284 <__ieee754_sqrt+0x1a4>)
 8006204:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8006288 <__ieee754_sqrt+0x1a8>
 8006208:	e9d4 0100 	ldrd	r0, r1, [r4]
 800620c:	e9db 2300 	ldrd	r2, r3, [fp]
 8006210:	f7f9 ffa2 	bl	8000158 <__aeabi_dsub>
 8006214:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006218:	4602      	mov	r2, r0
 800621a:	460b      	mov	r3, r1
 800621c:	4640      	mov	r0, r8
 800621e:	4649      	mov	r1, r9
 8006220:	f7fa fbce 	bl	80009c0 <__aeabi_dcmple>
 8006224:	b140      	cbz	r0, 8006238 <__ieee754_sqrt+0x158>
 8006226:	e9d4 0100 	ldrd	r0, r1, [r4]
 800622a:	e9db 2300 	ldrd	r2, r3, [fp]
 800622e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006232:	d111      	bne.n	8006258 <__ieee754_sqrt+0x178>
 8006234:	4655      	mov	r5, sl
 8006236:	3601      	adds	r6, #1
 8006238:	1072      	asrs	r2, r6, #1
 800623a:	086b      	lsrs	r3, r5, #1
 800623c:	07f1      	lsls	r1, r6, #31
 800623e:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8006242:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8006246:	bf48      	it	mi
 8006248:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800624c:	4618      	mov	r0, r3
 800624e:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8006252:	e757      	b.n	8006104 <__ieee754_sqrt+0x24>
 8006254:	4696      	mov	lr, r2
 8006256:	e7be      	b.n	80061d6 <__ieee754_sqrt+0xf6>
 8006258:	f7f9 ff80 	bl	800015c <__adddf3>
 800625c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006260:	4602      	mov	r2, r0
 8006262:	460b      	mov	r3, r1
 8006264:	4640      	mov	r0, r8
 8006266:	4649      	mov	r1, r9
 8006268:	f7fa fba0 	bl	80009ac <__aeabi_dcmplt>
 800626c:	b120      	cbz	r0, 8006278 <__ieee754_sqrt+0x198>
 800626e:	1ca8      	adds	r0, r5, #2
 8006270:	bf08      	it	eq
 8006272:	3601      	addeq	r6, #1
 8006274:	3502      	adds	r5, #2
 8006276:	e7df      	b.n	8006238 <__ieee754_sqrt+0x158>
 8006278:	1c6b      	adds	r3, r5, #1
 800627a:	f023 0501 	bic.w	r5, r3, #1
 800627e:	e7db      	b.n	8006238 <__ieee754_sqrt+0x158>
 8006280:	7ff00000 	.word	0x7ff00000
 8006284:	200000f8 	.word	0x200000f8
 8006288:	200000f0 	.word	0x200000f0
 800628c:	00000000 	.word	0x00000000

08006290 <__ieee754_atan2>:
 8006290:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006294:	4617      	mov	r7, r2
 8006296:	4690      	mov	r8, r2
 8006298:	4699      	mov	r9, r3
 800629a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800629e:	427b      	negs	r3, r7
 80062a0:	f8df a184 	ldr.w	sl, [pc, #388]	@ 8006428 <__ieee754_atan2+0x198>
 80062a4:	433b      	orrs	r3, r7
 80062a6:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80062aa:	4553      	cmp	r3, sl
 80062ac:	4604      	mov	r4, r0
 80062ae:	460d      	mov	r5, r1
 80062b0:	d809      	bhi.n	80062c6 <__ieee754_atan2+0x36>
 80062b2:	4246      	negs	r6, r0
 80062b4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80062b8:	4306      	orrs	r6, r0
 80062ba:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 80062be:	4556      	cmp	r6, sl
 80062c0:	468e      	mov	lr, r1
 80062c2:	4683      	mov	fp, r0
 80062c4:	d908      	bls.n	80062d8 <__ieee754_atan2+0x48>
 80062c6:	4642      	mov	r2, r8
 80062c8:	464b      	mov	r3, r9
 80062ca:	4620      	mov	r0, r4
 80062cc:	4629      	mov	r1, r5
 80062ce:	f7f9 ff45 	bl	800015c <__adddf3>
 80062d2:	4604      	mov	r4, r0
 80062d4:	460d      	mov	r5, r1
 80062d6:	e016      	b.n	8006306 <__ieee754_atan2+0x76>
 80062d8:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 80062dc:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 80062e0:	433e      	orrs	r6, r7
 80062e2:	d103      	bne.n	80062ec <__ieee754_atan2+0x5c>
 80062e4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e8:	f7ff bd66 	b.w	8005db8 <atan>
 80062ec:	ea4f 76a9 	mov.w	r6, r9, asr #30
 80062f0:	f006 0602 	and.w	r6, r6, #2
 80062f4:	ea53 0b0b 	orrs.w	fp, r3, fp
 80062f8:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 80062fc:	d107      	bne.n	800630e <__ieee754_atan2+0x7e>
 80062fe:	2e02      	cmp	r6, #2
 8006300:	d064      	beq.n	80063cc <__ieee754_atan2+0x13c>
 8006302:	2e03      	cmp	r6, #3
 8006304:	d066      	beq.n	80063d4 <__ieee754_atan2+0x144>
 8006306:	4620      	mov	r0, r4
 8006308:	4629      	mov	r1, r5
 800630a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800630e:	4317      	orrs	r7, r2
 8006310:	d106      	bne.n	8006320 <__ieee754_atan2+0x90>
 8006312:	f1be 0f00 	cmp.w	lr, #0
 8006316:	da68      	bge.n	80063ea <__ieee754_atan2+0x15a>
 8006318:	a537      	add	r5, pc, #220	@ (adr r5, 80063f8 <__ieee754_atan2+0x168>)
 800631a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800631e:	e7f2      	b.n	8006306 <__ieee754_atan2+0x76>
 8006320:	4552      	cmp	r2, sl
 8006322:	d10f      	bne.n	8006344 <__ieee754_atan2+0xb4>
 8006324:	4293      	cmp	r3, r2
 8006326:	f106 36ff 	add.w	r6, r6, #4294967295
 800632a:	d107      	bne.n	800633c <__ieee754_atan2+0xac>
 800632c:	2e02      	cmp	r6, #2
 800632e:	d855      	bhi.n	80063dc <__ieee754_atan2+0x14c>
 8006330:	4b3e      	ldr	r3, [pc, #248]	@ (800642c <__ieee754_atan2+0x19c>)
 8006332:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006336:	e9d3 4500 	ldrd	r4, r5, [r3]
 800633a:	e7e4      	b.n	8006306 <__ieee754_atan2+0x76>
 800633c:	2e02      	cmp	r6, #2
 800633e:	d851      	bhi.n	80063e4 <__ieee754_atan2+0x154>
 8006340:	4b3b      	ldr	r3, [pc, #236]	@ (8006430 <__ieee754_atan2+0x1a0>)
 8006342:	e7f6      	b.n	8006332 <__ieee754_atan2+0xa2>
 8006344:	4553      	cmp	r3, sl
 8006346:	d0e4      	beq.n	8006312 <__ieee754_atan2+0x82>
 8006348:	1a9b      	subs	r3, r3, r2
 800634a:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800634e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006352:	da21      	bge.n	8006398 <__ieee754_atan2+0x108>
 8006354:	f1b9 0f00 	cmp.w	r9, #0
 8006358:	da01      	bge.n	800635e <__ieee754_atan2+0xce>
 800635a:	323c      	adds	r2, #60	@ 0x3c
 800635c:	db20      	blt.n	80063a0 <__ieee754_atan2+0x110>
 800635e:	4642      	mov	r2, r8
 8006360:	464b      	mov	r3, r9
 8006362:	4620      	mov	r0, r4
 8006364:	4629      	mov	r1, r5
 8006366:	f7fa f9d9 	bl	800071c <__aeabi_ddiv>
 800636a:	f7ff feb5 	bl	80060d8 <fabs>
 800636e:	f7ff fd23 	bl	8005db8 <atan>
 8006372:	4604      	mov	r4, r0
 8006374:	460d      	mov	r5, r1
 8006376:	2e01      	cmp	r6, #1
 8006378:	d015      	beq.n	80063a6 <__ieee754_atan2+0x116>
 800637a:	2e02      	cmp	r6, #2
 800637c:	d017      	beq.n	80063ae <__ieee754_atan2+0x11e>
 800637e:	2e00      	cmp	r6, #0
 8006380:	d0c1      	beq.n	8006306 <__ieee754_atan2+0x76>
 8006382:	a31f      	add	r3, pc, #124	@ (adr r3, 8006400 <__ieee754_atan2+0x170>)
 8006384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006388:	4620      	mov	r0, r4
 800638a:	4629      	mov	r1, r5
 800638c:	f7f9 fee4 	bl	8000158 <__aeabi_dsub>
 8006390:	a31d      	add	r3, pc, #116	@ (adr r3, 8006408 <__ieee754_atan2+0x178>)
 8006392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006396:	e016      	b.n	80063c6 <__ieee754_atan2+0x136>
 8006398:	a51d      	add	r5, pc, #116	@ (adr r5, 8006410 <__ieee754_atan2+0x180>)
 800639a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800639e:	e7ea      	b.n	8006376 <__ieee754_atan2+0xe6>
 80063a0:	2400      	movs	r4, #0
 80063a2:	2500      	movs	r5, #0
 80063a4:	e7e7      	b.n	8006376 <__ieee754_atan2+0xe6>
 80063a6:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 80063aa:	461d      	mov	r5, r3
 80063ac:	e7ab      	b.n	8006306 <__ieee754_atan2+0x76>
 80063ae:	a314      	add	r3, pc, #80	@ (adr r3, 8006400 <__ieee754_atan2+0x170>)
 80063b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b4:	4620      	mov	r0, r4
 80063b6:	4629      	mov	r1, r5
 80063b8:	f7f9 fece 	bl	8000158 <__aeabi_dsub>
 80063bc:	4602      	mov	r2, r0
 80063be:	460b      	mov	r3, r1
 80063c0:	a111      	add	r1, pc, #68	@ (adr r1, 8006408 <__ieee754_atan2+0x178>)
 80063c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063c6:	f7f9 fec7 	bl	8000158 <__aeabi_dsub>
 80063ca:	e782      	b.n	80062d2 <__ieee754_atan2+0x42>
 80063cc:	a50e      	add	r5, pc, #56	@ (adr r5, 8006408 <__ieee754_atan2+0x178>)
 80063ce:	e9d5 4500 	ldrd	r4, r5, [r5]
 80063d2:	e798      	b.n	8006306 <__ieee754_atan2+0x76>
 80063d4:	a510      	add	r5, pc, #64	@ (adr r5, 8006418 <__ieee754_atan2+0x188>)
 80063d6:	e9d5 4500 	ldrd	r4, r5, [r5]
 80063da:	e794      	b.n	8006306 <__ieee754_atan2+0x76>
 80063dc:	a510      	add	r5, pc, #64	@ (adr r5, 8006420 <__ieee754_atan2+0x190>)
 80063de:	e9d5 4500 	ldrd	r4, r5, [r5]
 80063e2:	e790      	b.n	8006306 <__ieee754_atan2+0x76>
 80063e4:	2400      	movs	r4, #0
 80063e6:	2500      	movs	r5, #0
 80063e8:	e78d      	b.n	8006306 <__ieee754_atan2+0x76>
 80063ea:	a509      	add	r5, pc, #36	@ (adr r5, 8006410 <__ieee754_atan2+0x180>)
 80063ec:	e9d5 4500 	ldrd	r4, r5, [r5]
 80063f0:	e789      	b.n	8006306 <__ieee754_atan2+0x76>
 80063f2:	bf00      	nop
 80063f4:	f3af 8000 	nop.w
 80063f8:	54442d18 	.word	0x54442d18
 80063fc:	bff921fb 	.word	0xbff921fb
 8006400:	33145c07 	.word	0x33145c07
 8006404:	3ca1a626 	.word	0x3ca1a626
 8006408:	54442d18 	.word	0x54442d18
 800640c:	400921fb 	.word	0x400921fb
 8006410:	54442d18 	.word	0x54442d18
 8006414:	3ff921fb 	.word	0x3ff921fb
 8006418:	54442d18 	.word	0x54442d18
 800641c:	c00921fb 	.word	0xc00921fb
 8006420:	54442d18 	.word	0x54442d18
 8006424:	3fe921fb 	.word	0x3fe921fb
 8006428:	7ff00000 	.word	0x7ff00000
 800642c:	080064d8 	.word	0x080064d8
 8006430:	080064c0 	.word	0x080064c0

08006434 <_init>:
 8006434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006436:	bf00      	nop
 8006438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800643a:	bc08      	pop	{r3}
 800643c:	469e      	mov	lr, r3
 800643e:	4770      	bx	lr

08006440 <_fini>:
 8006440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006442:	bf00      	nop
 8006444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006446:	bc08      	pop	{r3}
 8006448:	469e      	mov	lr, r3
 800644a:	4770      	bx	lr
