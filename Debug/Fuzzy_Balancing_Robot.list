
Fuzzy_Balancing_Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028f0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080029fc  080029fc  000039fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a28  08002a28  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a28  08002a28  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a28  08002a28  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a28  08002a28  00003a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a2c  08002a2c  00003a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002a30  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  2000000c  08002a3c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08002a3c  00004158  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ddc1  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c05  00000000  00000000  00011df6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  00013a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b49  00000000  00000000  00014828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001651b  00000000  00000000  00015371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010222  00000000  00000000  0002b88c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088d35  00000000  00000000  0003baae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c47e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cd0  00000000  00000000  000c4828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000c84f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080029e4 	.word	0x080029e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080029e4 	.word	0x080029e4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fbcc 	bl	80008ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f838 	bl	80001c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f986 	bl	8000468 <MX_GPIO_Init>
  MX_TIM3_Init();
 800015c:	f000 f8f6 	bl	800034c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000160:	f000 f958 	bl	8000414 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000164:	f000 f8a0 	bl	80002a8 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000168:	f000 f870 	bl	800024c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800016c:	2100      	movs	r1, #0
 800016e:	4813      	ldr	r0, [pc, #76]	@ (80001bc <main+0x70>)
 8000170:	f001 fcba 	bl	8001ae8 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8000174:	2200      	movs	r2, #0
 8000176:	2140      	movs	r1, #64	@ 0x40
 8000178:	4811      	ldr	r0, [pc, #68]	@ (80001c0 <main+0x74>)
 800017a:	f000 feab 	bl	8000ed4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 800017e:	2201      	movs	r2, #1
 8000180:	2180      	movs	r1, #128	@ 0x80
 8000182:	480f      	ldr	r0, [pc, #60]	@ (80001c0 <main+0x74>)
 8000184:	f000 fea6 	bl	8000ed4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8000188:	2200      	movs	r2, #0
 800018a:	2140      	movs	r1, #64	@ 0x40
 800018c:	480d      	ldr	r0, [pc, #52]	@ (80001c4 <main+0x78>)
 800018e:	f000 fea1 	bl	8000ed4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8000192:	2201      	movs	r2, #1
 8000194:	2180      	movs	r1, #128	@ 0x80
 8000196:	480b      	ldr	r0, [pc, #44]	@ (80001c4 <main+0x78>)
 8000198:	f000 fe9c 	bl	8000ed4 <HAL_GPIO_WritePin>
	  htim3.Instance->CCR1 = htim3.Instance->ARR - 100;
 800019c:	4b07      	ldr	r3, [pc, #28]	@ (80001bc <main+0x70>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80001a2:	4b06      	ldr	r3, [pc, #24]	@ (80001bc <main+0x70>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	3a64      	subs	r2, #100	@ 0x64
 80001a8:	635a      	str	r2, [r3, #52]	@ 0x34
	  htim3.Instance->CCR2 = htim3.Instance->ARR - 100;
 80001aa:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <main+0x70>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80001b0:	4b02      	ldr	r3, [pc, #8]	@ (80001bc <main+0x70>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	3a64      	subs	r2, #100	@ 0x64
 80001b6:	639a      	str	r2, [r3, #56]	@ 0x38
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 80001b8:	bf00      	nop
 80001ba:	e7db      	b.n	8000174 <main+0x28>
 80001bc:	200000c4 	.word	0x200000c4
 80001c0:	40010c00 	.word	0x40010c00
 80001c4:	40010800 	.word	0x40010800

080001c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b090      	sub	sp, #64	@ 0x40
 80001cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ce:	f107 0318 	add.w	r3, r7, #24
 80001d2:	2228      	movs	r2, #40	@ 0x28
 80001d4:	2100      	movs	r1, #0
 80001d6:	4618      	mov	r0, r3
 80001d8:	f002 fbd8 	bl	800298c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]
 80001e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ea:	2302      	movs	r3, #2
 80001ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ee:	2301      	movs	r3, #1
 80001f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001f2:	2310      	movs	r3, #16
 80001f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001f6:	2302      	movs	r3, #2
 80001f8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001fa:	2300      	movs	r3, #0
 80001fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001fe:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000202:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000204:	f107 0318 	add.w	r3, r7, #24
 8000208:	4618      	mov	r0, r3
 800020a:	f000 ffbf 	bl	800118c <HAL_RCC_OscConfig>
 800020e:	4603      	mov	r3, r0
 8000210:	2b00      	cmp	r3, #0
 8000212:	d001      	beq.n	8000218 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000214:	f000 f9aa 	bl	800056c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000218:	230f      	movs	r3, #15
 800021a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800021c:	2302      	movs	r3, #2
 800021e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000220:	2300      	movs	r3, #0
 8000222:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000224:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000228:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800022a:	2300      	movs	r3, #0
 800022c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	2102      	movs	r1, #2
 8000232:	4618      	mov	r0, r3
 8000234:	f001 fa2c 	bl	8001690 <HAL_RCC_ClockConfig>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d001      	beq.n	8000242 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800023e:	f000 f995 	bl	800056c <Error_Handler>
  }
}
 8000242:	bf00      	nop
 8000244:	3740      	adds	r7, #64	@ 0x40
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
	...

0800024c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000250:	4b12      	ldr	r3, [pc, #72]	@ (800029c <MX_I2C1_Init+0x50>)
 8000252:	4a13      	ldr	r2, [pc, #76]	@ (80002a0 <MX_I2C1_Init+0x54>)
 8000254:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000256:	4b11      	ldr	r3, [pc, #68]	@ (800029c <MX_I2C1_Init+0x50>)
 8000258:	4a12      	ldr	r2, [pc, #72]	@ (80002a4 <MX_I2C1_Init+0x58>)
 800025a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800025c:	4b0f      	ldr	r3, [pc, #60]	@ (800029c <MX_I2C1_Init+0x50>)
 800025e:	2200      	movs	r2, #0
 8000260:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000262:	4b0e      	ldr	r3, [pc, #56]	@ (800029c <MX_I2C1_Init+0x50>)
 8000264:	2200      	movs	r2, #0
 8000266:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000268:	4b0c      	ldr	r3, [pc, #48]	@ (800029c <MX_I2C1_Init+0x50>)
 800026a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800026e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000270:	4b0a      	ldr	r3, [pc, #40]	@ (800029c <MX_I2C1_Init+0x50>)
 8000272:	2200      	movs	r2, #0
 8000274:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000276:	4b09      	ldr	r3, [pc, #36]	@ (800029c <MX_I2C1_Init+0x50>)
 8000278:	2200      	movs	r2, #0
 800027a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800027c:	4b07      	ldr	r3, [pc, #28]	@ (800029c <MX_I2C1_Init+0x50>)
 800027e:	2200      	movs	r2, #0
 8000280:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000282:	4b06      	ldr	r3, [pc, #24]	@ (800029c <MX_I2C1_Init+0x50>)
 8000284:	2200      	movs	r2, #0
 8000286:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000288:	4804      	ldr	r0, [pc, #16]	@ (800029c <MX_I2C1_Init+0x50>)
 800028a:	f000 fe3b 	bl	8000f04 <HAL_I2C_Init>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000294:	f000 f96a 	bl	800056c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}
 800029c:	20000028 	.word	0x20000028
 80002a0:	40005400 	.word	0x40005400
 80002a4:	000186a0 	.word	0x000186a0

080002a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b086      	sub	sp, #24
 80002ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002ae:	f107 0308 	add.w	r3, r7, #8
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
 80002ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002bc:	463b      	mov	r3, r7
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000344 <MX_TIM1_Init+0x9c>)
 80002c6:	4a20      	ldr	r2, [pc, #128]	@ (8000348 <MX_TIM1_Init+0xa0>)
 80002c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 639;
 80002ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000344 <MX_TIM1_Init+0x9c>)
 80002cc:	f240 227f 	movw	r2, #639	@ 0x27f
 80002d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000344 <MX_TIM1_Init+0x9c>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 80002d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000344 <MX_TIM1_Init+0x9c>)
 80002da:	f242 720f 	movw	r2, #9999	@ 0x270f
 80002de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002e0:	4b18      	ldr	r3, [pc, #96]	@ (8000344 <MX_TIM1_Init+0x9c>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80002e6:	4b17      	ldr	r3, [pc, #92]	@ (8000344 <MX_TIM1_Init+0x9c>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002ec:	4b15      	ldr	r3, [pc, #84]	@ (8000344 <MX_TIM1_Init+0x9c>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80002f2:	4814      	ldr	r0, [pc, #80]	@ (8000344 <MX_TIM1_Init+0x9c>)
 80002f4:	f001 fb5a 	bl	80019ac <HAL_TIM_Base_Init>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80002fe:	f000 f935 	bl	800056c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000302:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000306:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000308:	f107 0308 	add.w	r3, r7, #8
 800030c:	4619      	mov	r1, r3
 800030e:	480d      	ldr	r0, [pc, #52]	@ (8000344 <MX_TIM1_Init+0x9c>)
 8000310:	f001 fe56 	bl	8001fc0 <HAL_TIM_ConfigClockSource>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800031a:	f000 f927 	bl	800056c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800031e:	2300      	movs	r3, #0
 8000320:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000322:	2300      	movs	r3, #0
 8000324:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000326:	463b      	mov	r3, r7
 8000328:	4619      	mov	r1, r3
 800032a:	4806      	ldr	r0, [pc, #24]	@ (8000344 <MX_TIM1_Init+0x9c>)
 800032c:	f002 f9e0 	bl	80026f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000336:	f000 f919 	bl	800056c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800033a:	bf00      	nop
 800033c:	3718      	adds	r7, #24
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	2000007c 	.word	0x2000007c
 8000348:	40012c00 	.word	0x40012c00

0800034c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b08a      	sub	sp, #40	@ 0x28
 8000350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000352:	f107 0320 	add.w	r3, r7, #32
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	605a      	str	r2, [r3, #4]
 8000364:	609a      	str	r2, [r3, #8]
 8000366:	60da      	str	r2, [r3, #12]
 8000368:	611a      	str	r2, [r3, #16]
 800036a:	615a      	str	r2, [r3, #20]
 800036c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800036e:	4b27      	ldr	r3, [pc, #156]	@ (800040c <MX_TIM3_Init+0xc0>)
 8000370:	4a27      	ldr	r2, [pc, #156]	@ (8000410 <MX_TIM3_Init+0xc4>)
 8000372:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000374:	4b25      	ldr	r3, [pc, #148]	@ (800040c <MX_TIM3_Init+0xc0>)
 8000376:	223f      	movs	r2, #63	@ 0x3f
 8000378:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800037a:	4b24      	ldr	r3, [pc, #144]	@ (800040c <MX_TIM3_Init+0xc0>)
 800037c:	2200      	movs	r2, #0
 800037e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000380:	4b22      	ldr	r3, [pc, #136]	@ (800040c <MX_TIM3_Init+0xc0>)
 8000382:	2263      	movs	r2, #99	@ 0x63
 8000384:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000386:	4b21      	ldr	r3, [pc, #132]	@ (800040c <MX_TIM3_Init+0xc0>)
 8000388:	2200      	movs	r2, #0
 800038a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800038c:	4b1f      	ldr	r3, [pc, #124]	@ (800040c <MX_TIM3_Init+0xc0>)
 800038e:	2200      	movs	r2, #0
 8000390:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000392:	481e      	ldr	r0, [pc, #120]	@ (800040c <MX_TIM3_Init+0xc0>)
 8000394:	f001 fb59 	bl	8001a4a <HAL_TIM_PWM_Init>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800039e:	f000 f8e5 	bl	800056c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003a2:	2300      	movs	r3, #0
 80003a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003a6:	2300      	movs	r3, #0
 80003a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003aa:	f107 0320 	add.w	r3, r7, #32
 80003ae:	4619      	mov	r1, r3
 80003b0:	4816      	ldr	r0, [pc, #88]	@ (800040c <MX_TIM3_Init+0xc0>)
 80003b2:	f002 f99d 	bl	80026f0 <HAL_TIMEx_MasterConfigSynchronization>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80003bc:	f000 f8d6 	bl	800056c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003c0:	2360      	movs	r3, #96	@ 0x60
 80003c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80003c4:	2300      	movs	r3, #0
 80003c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003c8:	2300      	movs	r3, #0
 80003ca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003cc:	2300      	movs	r3, #0
 80003ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	2200      	movs	r2, #0
 80003d4:	4619      	mov	r1, r3
 80003d6:	480d      	ldr	r0, [pc, #52]	@ (800040c <MX_TIM3_Init+0xc0>)
 80003d8:	f001 fd30 	bl	8001e3c <HAL_TIM_PWM_ConfigChannel>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80003e2:	f000 f8c3 	bl	800056c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	2204      	movs	r2, #4
 80003ea:	4619      	mov	r1, r3
 80003ec:	4807      	ldr	r0, [pc, #28]	@ (800040c <MX_TIM3_Init+0xc0>)
 80003ee:	f001 fd25 	bl	8001e3c <HAL_TIM_PWM_ConfigChannel>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80003f8:	f000 f8b8 	bl	800056c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80003fc:	4803      	ldr	r0, [pc, #12]	@ (800040c <MX_TIM3_Init+0xc0>)
 80003fe:	f000 f981 	bl	8000704 <HAL_TIM_MspPostInit>

}
 8000402:	bf00      	nop
 8000404:	3728      	adds	r7, #40	@ 0x28
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	200000c4 	.word	0x200000c4
 8000410:	40000400 	.word	0x40000400

08000414 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000418:	4b11      	ldr	r3, [pc, #68]	@ (8000460 <MX_USART1_UART_Init+0x4c>)
 800041a:	4a12      	ldr	r2, [pc, #72]	@ (8000464 <MX_USART1_UART_Init+0x50>)
 800041c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800041e:	4b10      	ldr	r3, [pc, #64]	@ (8000460 <MX_USART1_UART_Init+0x4c>)
 8000420:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000424:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000426:	4b0e      	ldr	r3, [pc, #56]	@ (8000460 <MX_USART1_UART_Init+0x4c>)
 8000428:	2200      	movs	r2, #0
 800042a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800042c:	4b0c      	ldr	r3, [pc, #48]	@ (8000460 <MX_USART1_UART_Init+0x4c>)
 800042e:	2200      	movs	r2, #0
 8000430:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000432:	4b0b      	ldr	r3, [pc, #44]	@ (8000460 <MX_USART1_UART_Init+0x4c>)
 8000434:	2200      	movs	r2, #0
 8000436:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000438:	4b09      	ldr	r3, [pc, #36]	@ (8000460 <MX_USART1_UART_Init+0x4c>)
 800043a:	220c      	movs	r2, #12
 800043c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800043e:	4b08      	ldr	r3, [pc, #32]	@ (8000460 <MX_USART1_UART_Init+0x4c>)
 8000440:	2200      	movs	r2, #0
 8000442:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000444:	4b06      	ldr	r3, [pc, #24]	@ (8000460 <MX_USART1_UART_Init+0x4c>)
 8000446:	2200      	movs	r2, #0
 8000448:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800044a:	4805      	ldr	r0, [pc, #20]	@ (8000460 <MX_USART1_UART_Init+0x4c>)
 800044c:	f002 f9c0 	bl	80027d0 <HAL_UART_Init>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000456:	f000 f889 	bl	800056c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800045a:	bf00      	nop
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	2000010c 	.word	0x2000010c
 8000464:	40013800 	.word	0x40013800

08000468 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b088      	sub	sp, #32
 800046c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046e:	f107 0310 	add.w	r3, r7, #16
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
 8000476:	605a      	str	r2, [r3, #4]
 8000478:	609a      	str	r2, [r3, #8]
 800047a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800047c:	4b37      	ldr	r3, [pc, #220]	@ (800055c <MX_GPIO_Init+0xf4>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	4a36      	ldr	r2, [pc, #216]	@ (800055c <MX_GPIO_Init+0xf4>)
 8000482:	f043 0310 	orr.w	r3, r3, #16
 8000486:	6193      	str	r3, [r2, #24]
 8000488:	4b34      	ldr	r3, [pc, #208]	@ (800055c <MX_GPIO_Init+0xf4>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	f003 0310 	and.w	r3, r3, #16
 8000490:	60fb      	str	r3, [r7, #12]
 8000492:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000494:	4b31      	ldr	r3, [pc, #196]	@ (800055c <MX_GPIO_Init+0xf4>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	4a30      	ldr	r2, [pc, #192]	@ (800055c <MX_GPIO_Init+0xf4>)
 800049a:	f043 0320 	orr.w	r3, r3, #32
 800049e:	6193      	str	r3, [r2, #24]
 80004a0:	4b2e      	ldr	r3, [pc, #184]	@ (800055c <MX_GPIO_Init+0xf4>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	f003 0320 	and.w	r3, r3, #32
 80004a8:	60bb      	str	r3, [r7, #8]
 80004aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ac:	4b2b      	ldr	r3, [pc, #172]	@ (800055c <MX_GPIO_Init+0xf4>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	4a2a      	ldr	r2, [pc, #168]	@ (800055c <MX_GPIO_Init+0xf4>)
 80004b2:	f043 0304 	orr.w	r3, r3, #4
 80004b6:	6193      	str	r3, [r2, #24]
 80004b8:	4b28      	ldr	r3, [pc, #160]	@ (800055c <MX_GPIO_Init+0xf4>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	f003 0304 	and.w	r3, r3, #4
 80004c0:	607b      	str	r3, [r7, #4]
 80004c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c4:	4b25      	ldr	r3, [pc, #148]	@ (800055c <MX_GPIO_Init+0xf4>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	4a24      	ldr	r2, [pc, #144]	@ (800055c <MX_GPIO_Init+0xf4>)
 80004ca:	f043 0308 	orr.w	r3, r3, #8
 80004ce:	6193      	str	r3, [r2, #24]
 80004d0:	4b22      	ldr	r3, [pc, #136]	@ (800055c <MX_GPIO_Init+0xf4>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	f003 0308 	and.w	r3, r3, #8
 80004d8:	603b      	str	r3, [r7, #0]
 80004da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004e2:	481f      	ldr	r0, [pc, #124]	@ (8000560 <MX_GPIO_Init+0xf8>)
 80004e4:	f000 fcf6 	bl	8000ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_OUT_LED_Pin|GPIO_PIN_5|IN1_Pin|IN2_Pin, GPIO_PIN_RESET);
 80004e8:	2200      	movs	r2, #0
 80004ea:	21e8      	movs	r1, #232	@ 0xe8
 80004ec:	481d      	ldr	r0, [pc, #116]	@ (8000564 <MX_GPIO_Init+0xfc>)
 80004ee:	f000 fcf1 	bl	8000ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	21c0      	movs	r1, #192	@ 0xc0
 80004f6:	481c      	ldr	r0, [pc, #112]	@ (8000568 <MX_GPIO_Init+0x100>)
 80004f8:	f000 fcec 	bl	8000ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000500:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000502:	2301      	movs	r3, #1
 8000504:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000506:	2300      	movs	r3, #0
 8000508:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050a:	2302      	movs	r3, #2
 800050c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800050e:	f107 0310 	add.w	r3, r7, #16
 8000512:	4619      	mov	r1, r3
 8000514:	4812      	ldr	r0, [pc, #72]	@ (8000560 <MX_GPIO_Init+0xf8>)
 8000516:	f000 fb59 	bl	8000bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_OUT_LED_Pin PA5 IN1_Pin IN2_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_LED_Pin|GPIO_PIN_5|IN1_Pin|IN2_Pin;
 800051a:	23e8      	movs	r3, #232	@ 0xe8
 800051c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051e:	2301      	movs	r3, #1
 8000520:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000522:	2300      	movs	r3, #0
 8000524:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000526:	2302      	movs	r3, #2
 8000528:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800052a:	f107 0310 	add.w	r3, r7, #16
 800052e:	4619      	mov	r1, r3
 8000530:	480c      	ldr	r0, [pc, #48]	@ (8000564 <MX_GPIO_Init+0xfc>)
 8000532:	f000 fb4b 	bl	8000bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000536:	23c0      	movs	r3, #192	@ 0xc0
 8000538:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053a:	2301      	movs	r3, #1
 800053c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	2300      	movs	r3, #0
 8000540:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000542:	2302      	movs	r3, #2
 8000544:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000546:	f107 0310 	add.w	r3, r7, #16
 800054a:	4619      	mov	r1, r3
 800054c:	4806      	ldr	r0, [pc, #24]	@ (8000568 <MX_GPIO_Init+0x100>)
 800054e:	f000 fb3d 	bl	8000bcc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000552:	bf00      	nop
 8000554:	3720      	adds	r7, #32
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40021000 	.word	0x40021000
 8000560:	40011000 	.word	0x40011000
 8000564:	40010800 	.word	0x40010800
 8000568:	40010c00 	.word	0x40010c00

0800056c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000570:	b672      	cpsid	i
}
 8000572:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000574:	bf00      	nop
 8000576:	e7fd      	b.n	8000574 <Error_Handler+0x8>

08000578 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800057e:	4b15      	ldr	r3, [pc, #84]	@ (80005d4 <HAL_MspInit+0x5c>)
 8000580:	699b      	ldr	r3, [r3, #24]
 8000582:	4a14      	ldr	r2, [pc, #80]	@ (80005d4 <HAL_MspInit+0x5c>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6193      	str	r3, [r2, #24]
 800058a:	4b12      	ldr	r3, [pc, #72]	@ (80005d4 <HAL_MspInit+0x5c>)
 800058c:	699b      	ldr	r3, [r3, #24]
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000596:	4b0f      	ldr	r3, [pc, #60]	@ (80005d4 <HAL_MspInit+0x5c>)
 8000598:	69db      	ldr	r3, [r3, #28]
 800059a:	4a0e      	ldr	r2, [pc, #56]	@ (80005d4 <HAL_MspInit+0x5c>)
 800059c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005a0:	61d3      	str	r3, [r2, #28]
 80005a2:	4b0c      	ldr	r3, [pc, #48]	@ (80005d4 <HAL_MspInit+0x5c>)
 80005a4:	69db      	ldr	r3, [r3, #28]
 80005a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005ae:	4b0a      	ldr	r3, [pc, #40]	@ (80005d8 <HAL_MspInit+0x60>)
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	4a04      	ldr	r2, [pc, #16]	@ (80005d8 <HAL_MspInit+0x60>)
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr
 80005d4:	40021000 	.word	0x40021000
 80005d8:	40010000 	.word	0x40010000

080005dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	@ 0x28
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a1d      	ldr	r2, [pc, #116]	@ (800066c <HAL_I2C_MspInit+0x90>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d132      	bne.n	8000662 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000670 <HAL_I2C_MspInit+0x94>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	4a1b      	ldr	r2, [pc, #108]	@ (8000670 <HAL_I2C_MspInit+0x94>)
 8000602:	f043 0308 	orr.w	r3, r3, #8
 8000606:	6193      	str	r3, [r2, #24]
 8000608:	4b19      	ldr	r3, [pc, #100]	@ (8000670 <HAL_I2C_MspInit+0x94>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	f003 0308 	and.w	r3, r3, #8
 8000610:	613b      	str	r3, [r7, #16]
 8000612:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000614:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800061a:	2312      	movs	r3, #18
 800061c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800061e:	2303      	movs	r3, #3
 8000620:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	4619      	mov	r1, r3
 8000628:	4812      	ldr	r0, [pc, #72]	@ (8000674 <HAL_I2C_MspInit+0x98>)
 800062a:	f000 facf 	bl	8000bcc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800062e:	4b12      	ldr	r3, [pc, #72]	@ (8000678 <HAL_I2C_MspInit+0x9c>)
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	627b      	str	r3, [r7, #36]	@ 0x24
 8000634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000636:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800063a:	627b      	str	r3, [r7, #36]	@ 0x24
 800063c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800063e:	f043 0302 	orr.w	r3, r3, #2
 8000642:	627b      	str	r3, [r7, #36]	@ 0x24
 8000644:	4a0c      	ldr	r2, [pc, #48]	@ (8000678 <HAL_I2C_MspInit+0x9c>)
 8000646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000648:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800064a:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <HAL_I2C_MspInit+0x94>)
 800064c:	69db      	ldr	r3, [r3, #28]
 800064e:	4a08      	ldr	r2, [pc, #32]	@ (8000670 <HAL_I2C_MspInit+0x94>)
 8000650:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000654:	61d3      	str	r3, [r2, #28]
 8000656:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <HAL_I2C_MspInit+0x94>)
 8000658:	69db      	ldr	r3, [r3, #28]
 800065a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000662:	bf00      	nop
 8000664:	3728      	adds	r7, #40	@ 0x28
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40005400 	.word	0x40005400
 8000670:	40021000 	.word	0x40021000
 8000674:	40010c00 	.word	0x40010c00
 8000678:	40010000 	.word	0x40010000

0800067c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a0d      	ldr	r2, [pc, #52]	@ (80006c0 <HAL_TIM_Base_MspInit+0x44>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d113      	bne.n	80006b6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800068e:	4b0d      	ldr	r3, [pc, #52]	@ (80006c4 <HAL_TIM_Base_MspInit+0x48>)
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	4a0c      	ldr	r2, [pc, #48]	@ (80006c4 <HAL_TIM_Base_MspInit+0x48>)
 8000694:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000698:	6193      	str	r3, [r2, #24]
 800069a:	4b0a      	ldr	r3, [pc, #40]	@ (80006c4 <HAL_TIM_Base_MspInit+0x48>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2100      	movs	r1, #0
 80006aa:	2019      	movs	r0, #25
 80006ac:	f000 fa57 	bl	8000b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80006b0:	2019      	movs	r0, #25
 80006b2:	f000 fa70 	bl	8000b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80006b6:	bf00      	nop
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40012c00 	.word	0x40012c00
 80006c4:	40021000 	.word	0x40021000

080006c8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a09      	ldr	r2, [pc, #36]	@ (80006fc <HAL_TIM_PWM_MspInit+0x34>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d10b      	bne.n	80006f2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80006da:	4b09      	ldr	r3, [pc, #36]	@ (8000700 <HAL_TIM_PWM_MspInit+0x38>)
 80006dc:	69db      	ldr	r3, [r3, #28]
 80006de:	4a08      	ldr	r2, [pc, #32]	@ (8000700 <HAL_TIM_PWM_MspInit+0x38>)
 80006e0:	f043 0302 	orr.w	r3, r3, #2
 80006e4:	61d3      	str	r3, [r2, #28]
 80006e6:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <HAL_TIM_PWM_MspInit+0x38>)
 80006e8:	69db      	ldr	r3, [r3, #28]
 80006ea:	f003 0302 	and.w	r3, r3, #2
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80006f2:	bf00      	nop
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr
 80006fc:	40000400 	.word	0x40000400
 8000700:	40021000 	.word	0x40021000

08000704 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a18      	ldr	r2, [pc, #96]	@ (8000780 <HAL_TIM_MspPostInit+0x7c>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d129      	bne.n	8000778 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000724:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <HAL_TIM_MspPostInit+0x80>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	4a16      	ldr	r2, [pc, #88]	@ (8000784 <HAL_TIM_MspPostInit+0x80>)
 800072a:	f043 0308 	orr.w	r3, r3, #8
 800072e:	6193      	str	r3, [r2, #24]
 8000730:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <HAL_TIM_MspPostInit+0x80>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	f003 0308 	and.w	r3, r3, #8
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800073c:	2330      	movs	r3, #48	@ 0x30
 800073e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000740:	2302      	movs	r3, #2
 8000742:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000744:	2302      	movs	r3, #2
 8000746:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	4619      	mov	r1, r3
 800074e:	480e      	ldr	r0, [pc, #56]	@ (8000788 <HAL_TIM_MspPostInit+0x84>)
 8000750:	f000 fa3c 	bl	8000bcc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8000754:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <HAL_TIM_MspPostInit+0x88>)
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	61fb      	str	r3, [r7, #28]
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000760:	61fb      	str	r3, [r7, #28]
 8000762:	69fb      	ldr	r3, [r7, #28]
 8000764:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000768:	61fb      	str	r3, [r7, #28]
 800076a:	69fb      	ldr	r3, [r7, #28]
 800076c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000770:	61fb      	str	r3, [r7, #28]
 8000772:	4a06      	ldr	r2, [pc, #24]	@ (800078c <HAL_TIM_MspPostInit+0x88>)
 8000774:	69fb      	ldr	r3, [r7, #28]
 8000776:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000778:	bf00      	nop
 800077a:	3720      	adds	r7, #32
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40000400 	.word	0x40000400
 8000784:	40021000 	.word	0x40021000
 8000788:	40010c00 	.word	0x40010c00
 800078c:	40010000 	.word	0x40010000

08000790 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000798:	f107 0310 	add.w	r3, r7, #16
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a1c      	ldr	r2, [pc, #112]	@ (800081c <HAL_UART_MspInit+0x8c>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d131      	bne.n	8000814 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000820 <HAL_UART_MspInit+0x90>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	4a1a      	ldr	r2, [pc, #104]	@ (8000820 <HAL_UART_MspInit+0x90>)
 80007b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007ba:	6193      	str	r3, [r2, #24]
 80007bc:	4b18      	ldr	r3, [pc, #96]	@ (8000820 <HAL_UART_MspInit+0x90>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c8:	4b15      	ldr	r3, [pc, #84]	@ (8000820 <HAL_UART_MspInit+0x90>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a14      	ldr	r2, [pc, #80]	@ (8000820 <HAL_UART_MspInit+0x90>)
 80007ce:	f043 0304 	orr.w	r3, r3, #4
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b12      	ldr	r3, [pc, #72]	@ (8000820 <HAL_UART_MspInit+0x90>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f003 0304 	and.w	r3, r3, #4
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80007e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e6:	2302      	movs	r3, #2
 80007e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ea:	2303      	movs	r3, #3
 80007ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ee:	f107 0310 	add.w	r3, r7, #16
 80007f2:	4619      	mov	r1, r3
 80007f4:	480b      	ldr	r0, [pc, #44]	@ (8000824 <HAL_UART_MspInit+0x94>)
 80007f6:	f000 f9e9 	bl	8000bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000808:	f107 0310 	add.w	r3, r7, #16
 800080c:	4619      	mov	r1, r3
 800080e:	4805      	ldr	r0, [pc, #20]	@ (8000824 <HAL_UART_MspInit+0x94>)
 8000810:	f000 f9dc 	bl	8000bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000814:	bf00      	nop
 8000816:	3720      	adds	r7, #32
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40013800 	.word	0x40013800
 8000820:	40021000 	.word	0x40021000
 8000824:	40010800 	.word	0x40010800

08000828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <NMI_Handler+0x4>

08000830 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <HardFault_Handler+0x4>

08000838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800083c:	bf00      	nop
 800083e:	e7fd      	b.n	800083c <MemManage_Handler+0x4>

08000840 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000844:	bf00      	nop
 8000846:	e7fd      	b.n	8000844 <BusFault_Handler+0x4>

08000848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800084c:	bf00      	nop
 800084e:	e7fd      	b.n	800084c <UsageFault_Handler+0x4>

08000850 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr

0800085c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr

08000868 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr

08000874 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000878:	f000 f87e 	bl	8000978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}

08000880 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000884:	4802      	ldr	r0, [pc, #8]	@ (8000890 <TIM1_UP_IRQHandler+0x10>)
 8000886:	f001 f9d1 	bl	8001c2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	2000007c 	.word	0x2000007c

08000894 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr

080008a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008a0:	f7ff fff8 	bl	8000894 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a4:	480b      	ldr	r0, [pc, #44]	@ (80008d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008a6:	490c      	ldr	r1, [pc, #48]	@ (80008d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008a8:	4a0c      	ldr	r2, [pc, #48]	@ (80008dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008ac:	e002      	b.n	80008b4 <LoopCopyDataInit>

080008ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b2:	3304      	adds	r3, #4

080008b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b8:	d3f9      	bcc.n	80008ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ba:	4a09      	ldr	r2, [pc, #36]	@ (80008e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008bc:	4c09      	ldr	r4, [pc, #36]	@ (80008e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c0:	e001      	b.n	80008c6 <LoopFillZerobss>

080008c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c4:	3204      	adds	r2, #4

080008c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c8:	d3fb      	bcc.n	80008c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ca:	f002 f867 	bl	800299c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ce:	f7ff fc3d 	bl	800014c <main>
  bx lr
 80008d2:	4770      	bx	lr
  ldr r0, =_sdata
 80008d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008dc:	08002a30 	.word	0x08002a30
  ldr r2, =_sbss
 80008e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008e4:	20000158 	.word	0x20000158

080008e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008e8:	e7fe      	b.n	80008e8 <ADC1_2_IRQHandler>
	...

080008ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f0:	4b08      	ldr	r3, [pc, #32]	@ (8000914 <HAL_Init+0x28>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a07      	ldr	r2, [pc, #28]	@ (8000914 <HAL_Init+0x28>)
 80008f6:	f043 0310 	orr.w	r3, r3, #16
 80008fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008fc:	2003      	movs	r0, #3
 80008fe:	f000 f923 	bl	8000b48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000902:	200f      	movs	r0, #15
 8000904:	f000 f808 	bl	8000918 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000908:	f7ff fe36 	bl	8000578 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800090c:	2300      	movs	r3, #0
}
 800090e:	4618      	mov	r0, r3
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40022000 	.word	0x40022000

08000918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000920:	4b12      	ldr	r3, [pc, #72]	@ (800096c <HAL_InitTick+0x54>)
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <HAL_InitTick+0x58>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	4619      	mov	r1, r3
 800092a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800092e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000932:	fbb2 f3f3 	udiv	r3, r2, r3
 8000936:	4618      	mov	r0, r3
 8000938:	f000 f93b 	bl	8000bb2 <HAL_SYSTICK_Config>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000942:	2301      	movs	r3, #1
 8000944:	e00e      	b.n	8000964 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2b0f      	cmp	r3, #15
 800094a:	d80a      	bhi.n	8000962 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800094c:	2200      	movs	r2, #0
 800094e:	6879      	ldr	r1, [r7, #4]
 8000950:	f04f 30ff 	mov.w	r0, #4294967295
 8000954:	f000 f903 	bl	8000b5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000958:	4a06      	ldr	r2, [pc, #24]	@ (8000974 <HAL_InitTick+0x5c>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800095e:	2300      	movs	r3, #0
 8000960:	e000      	b.n	8000964 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000962:	2301      	movs	r3, #1
}
 8000964:	4618      	mov	r0, r3
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000000 	.word	0x20000000
 8000970:	20000008 	.word	0x20000008
 8000974:	20000004 	.word	0x20000004

08000978 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800097c:	4b05      	ldr	r3, [pc, #20]	@ (8000994 <HAL_IncTick+0x1c>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	461a      	mov	r2, r3
 8000982:	4b05      	ldr	r3, [pc, #20]	@ (8000998 <HAL_IncTick+0x20>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4413      	add	r3, r2
 8000988:	4a03      	ldr	r2, [pc, #12]	@ (8000998 <HAL_IncTick+0x20>)
 800098a:	6013      	str	r3, [r2, #0]
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	20000008 	.word	0x20000008
 8000998:	20000154 	.word	0x20000154

0800099c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  return uwTick;
 80009a0:	4b02      	ldr	r3, [pc, #8]	@ (80009ac <HAL_GetTick+0x10>)
 80009a2:	681b      	ldr	r3, [r3, #0]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr
 80009ac:	20000154 	.word	0x20000154

080009b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c0:	4b0c      	ldr	r3, [pc, #48]	@ (80009f4 <__NVIC_SetPriorityGrouping+0x44>)
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c6:	68ba      	ldr	r2, [r7, #8]
 80009c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009cc:	4013      	ands	r3, r2
 80009ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009e2:	4a04      	ldr	r2, [pc, #16]	@ (80009f4 <__NVIC_SetPriorityGrouping+0x44>)
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	60d3      	str	r3, [r2, #12]
}
 80009e8:	bf00      	nop
 80009ea:	3714      	adds	r7, #20
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009fc:	4b04      	ldr	r3, [pc, #16]	@ (8000a10 <__NVIC_GetPriorityGrouping+0x18>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	0a1b      	lsrs	r3, r3, #8
 8000a02:	f003 0307 	and.w	r3, r3, #7
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bc80      	pop	{r7}
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	db0b      	blt.n	8000a3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	f003 021f 	and.w	r2, r3, #31
 8000a2c:	4906      	ldr	r1, [pc, #24]	@ (8000a48 <__NVIC_EnableIRQ+0x34>)
 8000a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a32:	095b      	lsrs	r3, r3, #5
 8000a34:	2001      	movs	r0, #1
 8000a36:	fa00 f202 	lsl.w	r2, r0, r2
 8000a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr
 8000a48:	e000e100 	.word	0xe000e100

08000a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	6039      	str	r1, [r7, #0]
 8000a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	db0a      	blt.n	8000a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	490c      	ldr	r1, [pc, #48]	@ (8000a98 <__NVIC_SetPriority+0x4c>)
 8000a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6a:	0112      	lsls	r2, r2, #4
 8000a6c:	b2d2      	uxtb	r2, r2
 8000a6e:	440b      	add	r3, r1
 8000a70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a74:	e00a      	b.n	8000a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	4908      	ldr	r1, [pc, #32]	@ (8000a9c <__NVIC_SetPriority+0x50>)
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	f003 030f 	and.w	r3, r3, #15
 8000a82:	3b04      	subs	r3, #4
 8000a84:	0112      	lsls	r2, r2, #4
 8000a86:	b2d2      	uxtb	r2, r2
 8000a88:	440b      	add	r3, r1
 8000a8a:	761a      	strb	r2, [r3, #24]
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000e100 	.word	0xe000e100
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b089      	sub	sp, #36	@ 0x24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab4:	69fb      	ldr	r3, [r7, #28]
 8000ab6:	f1c3 0307 	rsb	r3, r3, #7
 8000aba:	2b04      	cmp	r3, #4
 8000abc:	bf28      	it	cs
 8000abe:	2304      	movcs	r3, #4
 8000ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	3304      	adds	r3, #4
 8000ac6:	2b06      	cmp	r3, #6
 8000ac8:	d902      	bls.n	8000ad0 <NVIC_EncodePriority+0x30>
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3b03      	subs	r3, #3
 8000ace:	e000      	b.n	8000ad2 <NVIC_EncodePriority+0x32>
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	43da      	mvns	r2, r3
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	401a      	ands	r2, r3
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	fa01 f303 	lsl.w	r3, r1, r3
 8000af2:	43d9      	mvns	r1, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af8:	4313      	orrs	r3, r2
         );
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3724      	adds	r7, #36	@ 0x24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b14:	d301      	bcc.n	8000b1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b16:	2301      	movs	r3, #1
 8000b18:	e00f      	b.n	8000b3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b44 <SysTick_Config+0x40>)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b22:	210f      	movs	r1, #15
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	f7ff ff90 	bl	8000a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b2c:	4b05      	ldr	r3, [pc, #20]	@ (8000b44 <SysTick_Config+0x40>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b32:	4b04      	ldr	r3, [pc, #16]	@ (8000b44 <SysTick_Config+0x40>)
 8000b34:	2207      	movs	r2, #7
 8000b36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	e000e010 	.word	0xe000e010

08000b48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff ff2d 	bl	80009b0 <__NVIC_SetPriorityGrouping>
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b086      	sub	sp, #24
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	4603      	mov	r3, r0
 8000b66:	60b9      	str	r1, [r7, #8]
 8000b68:	607a      	str	r2, [r7, #4]
 8000b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b70:	f7ff ff42 	bl	80009f8 <__NVIC_GetPriorityGrouping>
 8000b74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	68b9      	ldr	r1, [r7, #8]
 8000b7a:	6978      	ldr	r0, [r7, #20]
 8000b7c:	f7ff ff90 	bl	8000aa0 <NVIC_EncodePriority>
 8000b80:	4602      	mov	r2, r0
 8000b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b86:	4611      	mov	r1, r2
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff ff5f 	bl	8000a4c <__NVIC_SetPriority>
}
 8000b8e:	bf00      	nop
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ff35 	bl	8000a14 <__NVIC_EnableIRQ>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff ffa2 	bl	8000b04 <SysTick_Config>
 8000bc0:	4603      	mov	r3, r0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b08b      	sub	sp, #44	@ 0x2c
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bde:	e169      	b.n	8000eb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000be0:	2201      	movs	r2, #1
 8000be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	69fa      	ldr	r2, [r7, #28]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bf4:	69ba      	ldr	r2, [r7, #24]
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	f040 8158 	bne.w	8000eae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	4a9a      	ldr	r2, [pc, #616]	@ (8000e6c <HAL_GPIO_Init+0x2a0>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d05e      	beq.n	8000cc6 <HAL_GPIO_Init+0xfa>
 8000c08:	4a98      	ldr	r2, [pc, #608]	@ (8000e6c <HAL_GPIO_Init+0x2a0>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d875      	bhi.n	8000cfa <HAL_GPIO_Init+0x12e>
 8000c0e:	4a98      	ldr	r2, [pc, #608]	@ (8000e70 <HAL_GPIO_Init+0x2a4>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d058      	beq.n	8000cc6 <HAL_GPIO_Init+0xfa>
 8000c14:	4a96      	ldr	r2, [pc, #600]	@ (8000e70 <HAL_GPIO_Init+0x2a4>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d86f      	bhi.n	8000cfa <HAL_GPIO_Init+0x12e>
 8000c1a:	4a96      	ldr	r2, [pc, #600]	@ (8000e74 <HAL_GPIO_Init+0x2a8>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d052      	beq.n	8000cc6 <HAL_GPIO_Init+0xfa>
 8000c20:	4a94      	ldr	r2, [pc, #592]	@ (8000e74 <HAL_GPIO_Init+0x2a8>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d869      	bhi.n	8000cfa <HAL_GPIO_Init+0x12e>
 8000c26:	4a94      	ldr	r2, [pc, #592]	@ (8000e78 <HAL_GPIO_Init+0x2ac>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d04c      	beq.n	8000cc6 <HAL_GPIO_Init+0xfa>
 8000c2c:	4a92      	ldr	r2, [pc, #584]	@ (8000e78 <HAL_GPIO_Init+0x2ac>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d863      	bhi.n	8000cfa <HAL_GPIO_Init+0x12e>
 8000c32:	4a92      	ldr	r2, [pc, #584]	@ (8000e7c <HAL_GPIO_Init+0x2b0>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d046      	beq.n	8000cc6 <HAL_GPIO_Init+0xfa>
 8000c38:	4a90      	ldr	r2, [pc, #576]	@ (8000e7c <HAL_GPIO_Init+0x2b0>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d85d      	bhi.n	8000cfa <HAL_GPIO_Init+0x12e>
 8000c3e:	2b12      	cmp	r3, #18
 8000c40:	d82a      	bhi.n	8000c98 <HAL_GPIO_Init+0xcc>
 8000c42:	2b12      	cmp	r3, #18
 8000c44:	d859      	bhi.n	8000cfa <HAL_GPIO_Init+0x12e>
 8000c46:	a201      	add	r2, pc, #4	@ (adr r2, 8000c4c <HAL_GPIO_Init+0x80>)
 8000c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c4c:	08000cc7 	.word	0x08000cc7
 8000c50:	08000ca1 	.word	0x08000ca1
 8000c54:	08000cb3 	.word	0x08000cb3
 8000c58:	08000cf5 	.word	0x08000cf5
 8000c5c:	08000cfb 	.word	0x08000cfb
 8000c60:	08000cfb 	.word	0x08000cfb
 8000c64:	08000cfb 	.word	0x08000cfb
 8000c68:	08000cfb 	.word	0x08000cfb
 8000c6c:	08000cfb 	.word	0x08000cfb
 8000c70:	08000cfb 	.word	0x08000cfb
 8000c74:	08000cfb 	.word	0x08000cfb
 8000c78:	08000cfb 	.word	0x08000cfb
 8000c7c:	08000cfb 	.word	0x08000cfb
 8000c80:	08000cfb 	.word	0x08000cfb
 8000c84:	08000cfb 	.word	0x08000cfb
 8000c88:	08000cfb 	.word	0x08000cfb
 8000c8c:	08000cfb 	.word	0x08000cfb
 8000c90:	08000ca9 	.word	0x08000ca9
 8000c94:	08000cbd 	.word	0x08000cbd
 8000c98:	4a79      	ldr	r2, [pc, #484]	@ (8000e80 <HAL_GPIO_Init+0x2b4>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d013      	beq.n	8000cc6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c9e:	e02c      	b.n	8000cfa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	623b      	str	r3, [r7, #32]
          break;
 8000ca6:	e029      	b.n	8000cfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	3304      	adds	r3, #4
 8000cae:	623b      	str	r3, [r7, #32]
          break;
 8000cb0:	e024      	b.n	8000cfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	68db      	ldr	r3, [r3, #12]
 8000cb6:	3308      	adds	r3, #8
 8000cb8:	623b      	str	r3, [r7, #32]
          break;
 8000cba:	e01f      	b.n	8000cfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	330c      	adds	r3, #12
 8000cc2:	623b      	str	r3, [r7, #32]
          break;
 8000cc4:	e01a      	b.n	8000cfc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d102      	bne.n	8000cd4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cce:	2304      	movs	r3, #4
 8000cd0:	623b      	str	r3, [r7, #32]
          break;
 8000cd2:	e013      	b.n	8000cfc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d105      	bne.n	8000ce8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cdc:	2308      	movs	r3, #8
 8000cde:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	69fa      	ldr	r2, [r7, #28]
 8000ce4:	611a      	str	r2, [r3, #16]
          break;
 8000ce6:	e009      	b.n	8000cfc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ce8:	2308      	movs	r3, #8
 8000cea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	69fa      	ldr	r2, [r7, #28]
 8000cf0:	615a      	str	r2, [r3, #20]
          break;
 8000cf2:	e003      	b.n	8000cfc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	623b      	str	r3, [r7, #32]
          break;
 8000cf8:	e000      	b.n	8000cfc <HAL_GPIO_Init+0x130>
          break;
 8000cfa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	2bff      	cmp	r3, #255	@ 0xff
 8000d00:	d801      	bhi.n	8000d06 <HAL_GPIO_Init+0x13a>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	e001      	b.n	8000d0a <HAL_GPIO_Init+0x13e>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	3304      	adds	r3, #4
 8000d0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	2bff      	cmp	r3, #255	@ 0xff
 8000d10:	d802      	bhi.n	8000d18 <HAL_GPIO_Init+0x14c>
 8000d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	e002      	b.n	8000d1e <HAL_GPIO_Init+0x152>
 8000d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d1a:	3b08      	subs	r3, #8
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	210f      	movs	r1, #15
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	401a      	ands	r2, r3
 8000d30:	6a39      	ldr	r1, [r7, #32]
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	fa01 f303 	lsl.w	r3, r1, r3
 8000d38:	431a      	orrs	r2, r3
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	f000 80b1 	beq.w	8000eae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d4c:	4b4d      	ldr	r3, [pc, #308]	@ (8000e84 <HAL_GPIO_Init+0x2b8>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	4a4c      	ldr	r2, [pc, #304]	@ (8000e84 <HAL_GPIO_Init+0x2b8>)
 8000d52:	f043 0301 	orr.w	r3, r3, #1
 8000d56:	6193      	str	r3, [r2, #24]
 8000d58:	4b4a      	ldr	r3, [pc, #296]	@ (8000e84 <HAL_GPIO_Init+0x2b8>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	f003 0301 	and.w	r3, r3, #1
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d64:	4a48      	ldr	r2, [pc, #288]	@ (8000e88 <HAL_GPIO_Init+0x2bc>)
 8000d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d68:	089b      	lsrs	r3, r3, #2
 8000d6a:	3302      	adds	r3, #2
 8000d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d74:	f003 0303 	and.w	r3, r3, #3
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	220f      	movs	r2, #15
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	4013      	ands	r3, r2
 8000d86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a40      	ldr	r2, [pc, #256]	@ (8000e8c <HAL_GPIO_Init+0x2c0>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d013      	beq.n	8000db8 <HAL_GPIO_Init+0x1ec>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a3f      	ldr	r2, [pc, #252]	@ (8000e90 <HAL_GPIO_Init+0x2c4>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d00d      	beq.n	8000db4 <HAL_GPIO_Init+0x1e8>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a3e      	ldr	r2, [pc, #248]	@ (8000e94 <HAL_GPIO_Init+0x2c8>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d007      	beq.n	8000db0 <HAL_GPIO_Init+0x1e4>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a3d      	ldr	r2, [pc, #244]	@ (8000e98 <HAL_GPIO_Init+0x2cc>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d101      	bne.n	8000dac <HAL_GPIO_Init+0x1e0>
 8000da8:	2303      	movs	r3, #3
 8000daa:	e006      	b.n	8000dba <HAL_GPIO_Init+0x1ee>
 8000dac:	2304      	movs	r3, #4
 8000dae:	e004      	b.n	8000dba <HAL_GPIO_Init+0x1ee>
 8000db0:	2302      	movs	r3, #2
 8000db2:	e002      	b.n	8000dba <HAL_GPIO_Init+0x1ee>
 8000db4:	2301      	movs	r3, #1
 8000db6:	e000      	b.n	8000dba <HAL_GPIO_Init+0x1ee>
 8000db8:	2300      	movs	r3, #0
 8000dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000dbc:	f002 0203 	and.w	r2, r2, #3
 8000dc0:	0092      	lsls	r2, r2, #2
 8000dc2:	4093      	lsls	r3, r2
 8000dc4:	68fa      	ldr	r2, [r7, #12]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dca:	492f      	ldr	r1, [pc, #188]	@ (8000e88 <HAL_GPIO_Init+0x2bc>)
 8000dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dce:	089b      	lsrs	r3, r3, #2
 8000dd0:	3302      	adds	r3, #2
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d006      	beq.n	8000df2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000de4:	4b2d      	ldr	r3, [pc, #180]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000de6:	689a      	ldr	r2, [r3, #8]
 8000de8:	492c      	ldr	r1, [pc, #176]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	608b      	str	r3, [r1, #8]
 8000df0:	e006      	b.n	8000e00 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000df2:	4b2a      	ldr	r3, [pc, #168]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000df4:	689a      	ldr	r2, [r3, #8]
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	4928      	ldr	r1, [pc, #160]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d006      	beq.n	8000e1a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e0c:	4b23      	ldr	r3, [pc, #140]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000e0e:	68da      	ldr	r2, [r3, #12]
 8000e10:	4922      	ldr	r1, [pc, #136]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	60cb      	str	r3, [r1, #12]
 8000e18:	e006      	b.n	8000e28 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e1a:	4b20      	ldr	r3, [pc, #128]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000e1c:	68da      	ldr	r2, [r3, #12]
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	43db      	mvns	r3, r3
 8000e22:	491e      	ldr	r1, [pc, #120]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000e24:	4013      	ands	r3, r2
 8000e26:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d006      	beq.n	8000e42 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e34:	4b19      	ldr	r3, [pc, #100]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000e36:	685a      	ldr	r2, [r3, #4]
 8000e38:	4918      	ldr	r1, [pc, #96]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	604b      	str	r3, [r1, #4]
 8000e40:	e006      	b.n	8000e50 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e42:	4b16      	ldr	r3, [pc, #88]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000e44:	685a      	ldr	r2, [r3, #4]
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	4914      	ldr	r1, [pc, #80]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d021      	beq.n	8000ea0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	490e      	ldr	r1, [pc, #56]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	600b      	str	r3, [r1, #0]
 8000e68:	e021      	b.n	8000eae <HAL_GPIO_Init+0x2e2>
 8000e6a:	bf00      	nop
 8000e6c:	10320000 	.word	0x10320000
 8000e70:	10310000 	.word	0x10310000
 8000e74:	10220000 	.word	0x10220000
 8000e78:	10210000 	.word	0x10210000
 8000e7c:	10120000 	.word	0x10120000
 8000e80:	10110000 	.word	0x10110000
 8000e84:	40021000 	.word	0x40021000
 8000e88:	40010000 	.word	0x40010000
 8000e8c:	40010800 	.word	0x40010800
 8000e90:	40010c00 	.word	0x40010c00
 8000e94:	40011000 	.word	0x40011000
 8000e98:	40011400 	.word	0x40011400
 8000e9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed0 <HAL_GPIO_Init+0x304>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	4909      	ldr	r1, [pc, #36]	@ (8000ed0 <HAL_GPIO_Init+0x304>)
 8000eaa:	4013      	ands	r3, r2
 8000eac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eba:	fa22 f303 	lsr.w	r3, r2, r3
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f47f ae8e 	bne.w	8000be0 <HAL_GPIO_Init+0x14>
  }
}
 8000ec4:	bf00      	nop
 8000ec6:	bf00      	nop
 8000ec8:	372c      	adds	r7, #44	@ 0x2c
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr
 8000ed0:	40010400 	.word	0x40010400

08000ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	460b      	mov	r3, r1
 8000ede:	807b      	strh	r3, [r7, #2]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ee4:	787b      	ldrb	r3, [r7, #1]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d003      	beq.n	8000ef2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eea:	887a      	ldrh	r2, [r7, #2]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ef0:	e003      	b.n	8000efa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ef2:	887b      	ldrh	r3, [r7, #2]
 8000ef4:	041a      	lsls	r2, r3, #16
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	611a      	str	r2, [r3, #16]
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr

08000f04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d101      	bne.n	8000f16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e12b      	b.n	800116e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d106      	bne.n	8000f30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff fb56 	bl	80005dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2224      	movs	r2, #36	@ 0x24
 8000f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f022 0201 	bic.w	r2, r2, #1
 8000f46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000f56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000f66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000f68:	f000 fcda 	bl	8001920 <HAL_RCC_GetPCLK1Freq>
 8000f6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	4a81      	ldr	r2, [pc, #516]	@ (8001178 <HAL_I2C_Init+0x274>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d807      	bhi.n	8000f88 <HAL_I2C_Init+0x84>
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	4a80      	ldr	r2, [pc, #512]	@ (800117c <HAL_I2C_Init+0x278>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	bf94      	ite	ls
 8000f80:	2301      	movls	r3, #1
 8000f82:	2300      	movhi	r3, #0
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	e006      	b.n	8000f96 <HAL_I2C_Init+0x92>
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4a7d      	ldr	r2, [pc, #500]	@ (8001180 <HAL_I2C_Init+0x27c>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	bf94      	ite	ls
 8000f90:	2301      	movls	r3, #1
 8000f92:	2300      	movhi	r3, #0
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e0e7      	b.n	800116e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	4a78      	ldr	r2, [pc, #480]	@ (8001184 <HAL_I2C_Init+0x280>)
 8000fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa6:	0c9b      	lsrs	r3, r3, #18
 8000fa8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	68ba      	ldr	r2, [r7, #8]
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	6a1b      	ldr	r3, [r3, #32]
 8000fc4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	4a6a      	ldr	r2, [pc, #424]	@ (8001178 <HAL_I2C_Init+0x274>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d802      	bhi.n	8000fd8 <HAL_I2C_Init+0xd4>
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	e009      	b.n	8000fec <HAL_I2C_Init+0xe8>
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000fde:	fb02 f303 	mul.w	r3, r2, r3
 8000fe2:	4a69      	ldr	r2, [pc, #420]	@ (8001188 <HAL_I2C_Init+0x284>)
 8000fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe8:	099b      	lsrs	r3, r3, #6
 8000fea:	3301      	adds	r3, #1
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	6812      	ldr	r2, [r2, #0]
 8000ff0:	430b      	orrs	r3, r1
 8000ff2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000ffe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	495c      	ldr	r1, [pc, #368]	@ (8001178 <HAL_I2C_Init+0x274>)
 8001008:	428b      	cmp	r3, r1
 800100a:	d819      	bhi.n	8001040 <HAL_I2C_Init+0x13c>
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	1e59      	subs	r1, r3, #1
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	fbb1 f3f3 	udiv	r3, r1, r3
 800101a:	1c59      	adds	r1, r3, #1
 800101c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001020:	400b      	ands	r3, r1
 8001022:	2b00      	cmp	r3, #0
 8001024:	d00a      	beq.n	800103c <HAL_I2C_Init+0x138>
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	1e59      	subs	r1, r3, #1
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	fbb1 f3f3 	udiv	r3, r1, r3
 8001034:	3301      	adds	r3, #1
 8001036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800103a:	e051      	b.n	80010e0 <HAL_I2C_Init+0x1dc>
 800103c:	2304      	movs	r3, #4
 800103e:	e04f      	b.n	80010e0 <HAL_I2C_Init+0x1dc>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d111      	bne.n	800106c <HAL_I2C_Init+0x168>
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	1e58      	subs	r0, r3, #1
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6859      	ldr	r1, [r3, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	440b      	add	r3, r1
 8001056:	fbb0 f3f3 	udiv	r3, r0, r3
 800105a:	3301      	adds	r3, #1
 800105c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001060:	2b00      	cmp	r3, #0
 8001062:	bf0c      	ite	eq
 8001064:	2301      	moveq	r3, #1
 8001066:	2300      	movne	r3, #0
 8001068:	b2db      	uxtb	r3, r3
 800106a:	e012      	b.n	8001092 <HAL_I2C_Init+0x18e>
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	1e58      	subs	r0, r3, #1
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6859      	ldr	r1, [r3, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	440b      	add	r3, r1
 800107a:	0099      	lsls	r1, r3, #2
 800107c:	440b      	add	r3, r1
 800107e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001082:	3301      	adds	r3, #1
 8001084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001088:	2b00      	cmp	r3, #0
 800108a:	bf0c      	ite	eq
 800108c:	2301      	moveq	r3, #1
 800108e:	2300      	movne	r3, #0
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_I2C_Init+0x196>
 8001096:	2301      	movs	r3, #1
 8001098:	e022      	b.n	80010e0 <HAL_I2C_Init+0x1dc>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d10e      	bne.n	80010c0 <HAL_I2C_Init+0x1bc>
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	1e58      	subs	r0, r3, #1
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6859      	ldr	r1, [r3, #4]
 80010aa:	460b      	mov	r3, r1
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	440b      	add	r3, r1
 80010b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80010b4:	3301      	adds	r3, #1
 80010b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010be:	e00f      	b.n	80010e0 <HAL_I2C_Init+0x1dc>
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	1e58      	subs	r0, r3, #1
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6859      	ldr	r1, [r3, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	440b      	add	r3, r1
 80010ce:	0099      	lsls	r1, r3, #2
 80010d0:	440b      	add	r3, r1
 80010d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80010d6:	3301      	adds	r3, #1
 80010d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80010e0:	6879      	ldr	r1, [r7, #4]
 80010e2:	6809      	ldr	r1, [r1, #0]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69da      	ldr	r2, [r3, #28]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a1b      	ldr	r3, [r3, #32]
 80010fa:	431a      	orrs	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	430a      	orrs	r2, r1
 8001102:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800110e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	6911      	ldr	r1, [r2, #16]
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	68d2      	ldr	r2, [r2, #12]
 800111a:	4311      	orrs	r1, r2
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	6812      	ldr	r2, [r2, #0]
 8001120:	430b      	orrs	r3, r1
 8001122:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	695a      	ldr	r2, [r3, #20]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	431a      	orrs	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	430a      	orrs	r2, r1
 800113e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f042 0201 	orr.w	r2, r2, #1
 800114e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2220      	movs	r2, #32
 800115a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	000186a0 	.word	0x000186a0
 800117c:	001e847f 	.word	0x001e847f
 8001180:	003d08ff 	.word	0x003d08ff
 8001184:	431bde83 	.word	0x431bde83
 8001188:	10624dd3 	.word	0x10624dd3

0800118c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d101      	bne.n	800119e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e272      	b.n	8001684 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f000 8087 	beq.w	80012ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011ac:	4b92      	ldr	r3, [pc, #584]	@ (80013f8 <HAL_RCC_OscConfig+0x26c>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 030c 	and.w	r3, r3, #12
 80011b4:	2b04      	cmp	r3, #4
 80011b6:	d00c      	beq.n	80011d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011b8:	4b8f      	ldr	r3, [pc, #572]	@ (80013f8 <HAL_RCC_OscConfig+0x26c>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 030c 	and.w	r3, r3, #12
 80011c0:	2b08      	cmp	r3, #8
 80011c2:	d112      	bne.n	80011ea <HAL_RCC_OscConfig+0x5e>
 80011c4:	4b8c      	ldr	r3, [pc, #560]	@ (80013f8 <HAL_RCC_OscConfig+0x26c>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011d0:	d10b      	bne.n	80011ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d2:	4b89      	ldr	r3, [pc, #548]	@ (80013f8 <HAL_RCC_OscConfig+0x26c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d06c      	beq.n	80012b8 <HAL_RCC_OscConfig+0x12c>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d168      	bne.n	80012b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e24c      	b.n	8001684 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011f2:	d106      	bne.n	8001202 <HAL_RCC_OscConfig+0x76>
 80011f4:	4b80      	ldr	r3, [pc, #512]	@ (80013f8 <HAL_RCC_OscConfig+0x26c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a7f      	ldr	r2, [pc, #508]	@ (80013f8 <HAL_RCC_OscConfig+0x26c>)
 80011fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011fe:	6013      	str	r3, [r2, #0]
 8001200:	e02e      	b.n	8001260 <HAL_RCC_OscConfig+0xd4>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d10c      	bne.n	8001224 <HAL_RCC_OscConfig+0x98>
 800120a:	4b7b      	ldr	r3, [pc, #492]	@ (80013f8 <HAL_RCC_OscConfig+0x26c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a7a      	ldr	r2, [pc, #488]	@ (80013f8 <HAL_RCC_OscConfig+0x26c>)
 8001210:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	4b78      	ldr	r3, [pc, #480]	@ (80013f8 <HAL_RCC_OscConfig+0x26c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a77      	ldr	r2, [pc, #476]	@ (80013f8 <HAL_RCC_OscConfig+0x26c>)
 800121c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	e01d      	b.n	8001260 <HAL_RCC_OscConfig+0xd4>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800122c:	d10c      	bne.n	8001248 <HAL_RCC_OscConfig+0xbc>
 800122e:	4b72      	ldr	r3, [pc, #456]	@ (80013f8 <HAL_RCC_OscConfig+0x26c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a71      	ldr	r2, [pc, #452]	@ (80013f8 <HAL_RCC_OscConfig+0x26c>)
 8001234:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	4b6f      	ldr	r3, [pc, #444]	@ (80013f8 <HAL_RCC_OscConfig+0x26c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a6e      	ldr	r2, [pc, #440]	@ (80013f8 <HAL_RCC_OscConfig+0x26c>)
 8001240:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	e00b      	b.n	8001260 <HAL_RCC_OscConfig+0xd4>
 8001248:	4b6b      	ldr	r3, [pc, #428]	@ (80013f8 <HAL_RCC_OscConfig+0x26c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a6a      	ldr	r2, [pc, #424]	@ (80013f8 <HAL_RCC_OscConfig+0x26c>)
 800124e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	4b68      	ldr	r3, [pc, #416]	@ (80013f8 <HAL_RCC_OscConfig+0x26c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a67      	ldr	r2, [pc, #412]	@ (80013f8 <HAL_RCC_OscConfig+0x26c>)
 800125a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800125e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d013      	beq.n	8001290 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001268:	f7ff fb98 	bl	800099c <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001270:	f7ff fb94 	bl	800099c <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b64      	cmp	r3, #100	@ 0x64
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e200      	b.n	8001684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001282:	4b5d      	ldr	r3, [pc, #372]	@ (80013f8 <HAL_RCC_OscConfig+0x26c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d0f0      	beq.n	8001270 <HAL_RCC_OscConfig+0xe4>
 800128e:	e014      	b.n	80012ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001290:	f7ff fb84 	bl	800099c <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001298:	f7ff fb80 	bl	800099c <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b64      	cmp	r3, #100	@ 0x64
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e1ec      	b.n	8001684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012aa:	4b53      	ldr	r3, [pc, #332]	@ (80013f8 <HAL_RCC_OscConfig+0x26c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1f0      	bne.n	8001298 <HAL_RCC_OscConfig+0x10c>
 80012b6:	e000      	b.n	80012ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d063      	beq.n	800138e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012c6:	4b4c      	ldr	r3, [pc, #304]	@ (80013f8 <HAL_RCC_OscConfig+0x26c>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 030c 	and.w	r3, r3, #12
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d00b      	beq.n	80012ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012d2:	4b49      	ldr	r3, [pc, #292]	@ (80013f8 <HAL_RCC_OscConfig+0x26c>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 030c 	and.w	r3, r3, #12
 80012da:	2b08      	cmp	r3, #8
 80012dc:	d11c      	bne.n	8001318 <HAL_RCC_OscConfig+0x18c>
 80012de:	4b46      	ldr	r3, [pc, #280]	@ (80013f8 <HAL_RCC_OscConfig+0x26c>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d116      	bne.n	8001318 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ea:	4b43      	ldr	r3, [pc, #268]	@ (80013f8 <HAL_RCC_OscConfig+0x26c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d005      	beq.n	8001302 <HAL_RCC_OscConfig+0x176>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d001      	beq.n	8001302 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e1c0      	b.n	8001684 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001302:	4b3d      	ldr	r3, [pc, #244]	@ (80013f8 <HAL_RCC_OscConfig+0x26c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	4939      	ldr	r1, [pc, #228]	@ (80013f8 <HAL_RCC_OscConfig+0x26c>)
 8001312:	4313      	orrs	r3, r2
 8001314:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001316:	e03a      	b.n	800138e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d020      	beq.n	8001362 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001320:	4b36      	ldr	r3, [pc, #216]	@ (80013fc <HAL_RCC_OscConfig+0x270>)
 8001322:	2201      	movs	r2, #1
 8001324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001326:	f7ff fb39 	bl	800099c <HAL_GetTick>
 800132a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800132c:	e008      	b.n	8001340 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800132e:	f7ff fb35 	bl	800099c <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e1a1      	b.n	8001684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001340:	4b2d      	ldr	r3, [pc, #180]	@ (80013f8 <HAL_RCC_OscConfig+0x26c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0f0      	beq.n	800132e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800134c:	4b2a      	ldr	r3, [pc, #168]	@ (80013f8 <HAL_RCC_OscConfig+0x26c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	695b      	ldr	r3, [r3, #20]
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	4927      	ldr	r1, [pc, #156]	@ (80013f8 <HAL_RCC_OscConfig+0x26c>)
 800135c:	4313      	orrs	r3, r2
 800135e:	600b      	str	r3, [r1, #0]
 8001360:	e015      	b.n	800138e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001362:	4b26      	ldr	r3, [pc, #152]	@ (80013fc <HAL_RCC_OscConfig+0x270>)
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001368:	f7ff fb18 	bl	800099c <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001370:	f7ff fb14 	bl	800099c <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e180      	b.n	8001684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001382:	4b1d      	ldr	r3, [pc, #116]	@ (80013f8 <HAL_RCC_OscConfig+0x26c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1f0      	bne.n	8001370 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0308 	and.w	r3, r3, #8
 8001396:	2b00      	cmp	r3, #0
 8001398:	d03a      	beq.n	8001410 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d019      	beq.n	80013d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013a2:	4b17      	ldr	r3, [pc, #92]	@ (8001400 <HAL_RCC_OscConfig+0x274>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a8:	f7ff faf8 	bl	800099c <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013b0:	f7ff faf4 	bl	800099c <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e160      	b.n	8001684 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013c2:	4b0d      	ldr	r3, [pc, #52]	@ (80013f8 <HAL_RCC_OscConfig+0x26c>)
 80013c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0f0      	beq.n	80013b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013ce:	2001      	movs	r0, #1
 80013d0:	f000 face 	bl	8001970 <RCC_Delay>
 80013d4:	e01c      	b.n	8001410 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001400 <HAL_RCC_OscConfig+0x274>)
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013dc:	f7ff fade 	bl	800099c <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e2:	e00f      	b.n	8001404 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013e4:	f7ff fada 	bl	800099c <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d908      	bls.n	8001404 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e146      	b.n	8001684 <HAL_RCC_OscConfig+0x4f8>
 80013f6:	bf00      	nop
 80013f8:	40021000 	.word	0x40021000
 80013fc:	42420000 	.word	0x42420000
 8001400:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001404:	4b92      	ldr	r3, [pc, #584]	@ (8001650 <HAL_RCC_OscConfig+0x4c4>)
 8001406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1e9      	bne.n	80013e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	2b00      	cmp	r3, #0
 800141a:	f000 80a6 	beq.w	800156a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800141e:	2300      	movs	r3, #0
 8001420:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001422:	4b8b      	ldr	r3, [pc, #556]	@ (8001650 <HAL_RCC_OscConfig+0x4c4>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d10d      	bne.n	800144a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800142e:	4b88      	ldr	r3, [pc, #544]	@ (8001650 <HAL_RCC_OscConfig+0x4c4>)
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	4a87      	ldr	r2, [pc, #540]	@ (8001650 <HAL_RCC_OscConfig+0x4c4>)
 8001434:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001438:	61d3      	str	r3, [r2, #28]
 800143a:	4b85      	ldr	r3, [pc, #532]	@ (8001650 <HAL_RCC_OscConfig+0x4c4>)
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001446:	2301      	movs	r3, #1
 8001448:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144a:	4b82      	ldr	r3, [pc, #520]	@ (8001654 <HAL_RCC_OscConfig+0x4c8>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001452:	2b00      	cmp	r3, #0
 8001454:	d118      	bne.n	8001488 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001456:	4b7f      	ldr	r3, [pc, #508]	@ (8001654 <HAL_RCC_OscConfig+0x4c8>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a7e      	ldr	r2, [pc, #504]	@ (8001654 <HAL_RCC_OscConfig+0x4c8>)
 800145c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001460:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001462:	f7ff fa9b 	bl	800099c <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800146a:	f7ff fa97 	bl	800099c <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b64      	cmp	r3, #100	@ 0x64
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e103      	b.n	8001684 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800147c:	4b75      	ldr	r3, [pc, #468]	@ (8001654 <HAL_RCC_OscConfig+0x4c8>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0f0      	beq.n	800146a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d106      	bne.n	800149e <HAL_RCC_OscConfig+0x312>
 8001490:	4b6f      	ldr	r3, [pc, #444]	@ (8001650 <HAL_RCC_OscConfig+0x4c4>)
 8001492:	6a1b      	ldr	r3, [r3, #32]
 8001494:	4a6e      	ldr	r2, [pc, #440]	@ (8001650 <HAL_RCC_OscConfig+0x4c4>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	6213      	str	r3, [r2, #32]
 800149c:	e02d      	b.n	80014fa <HAL_RCC_OscConfig+0x36e>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10c      	bne.n	80014c0 <HAL_RCC_OscConfig+0x334>
 80014a6:	4b6a      	ldr	r3, [pc, #424]	@ (8001650 <HAL_RCC_OscConfig+0x4c4>)
 80014a8:	6a1b      	ldr	r3, [r3, #32]
 80014aa:	4a69      	ldr	r2, [pc, #420]	@ (8001650 <HAL_RCC_OscConfig+0x4c4>)
 80014ac:	f023 0301 	bic.w	r3, r3, #1
 80014b0:	6213      	str	r3, [r2, #32]
 80014b2:	4b67      	ldr	r3, [pc, #412]	@ (8001650 <HAL_RCC_OscConfig+0x4c4>)
 80014b4:	6a1b      	ldr	r3, [r3, #32]
 80014b6:	4a66      	ldr	r2, [pc, #408]	@ (8001650 <HAL_RCC_OscConfig+0x4c4>)
 80014b8:	f023 0304 	bic.w	r3, r3, #4
 80014bc:	6213      	str	r3, [r2, #32]
 80014be:	e01c      	b.n	80014fa <HAL_RCC_OscConfig+0x36e>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	2b05      	cmp	r3, #5
 80014c6:	d10c      	bne.n	80014e2 <HAL_RCC_OscConfig+0x356>
 80014c8:	4b61      	ldr	r3, [pc, #388]	@ (8001650 <HAL_RCC_OscConfig+0x4c4>)
 80014ca:	6a1b      	ldr	r3, [r3, #32]
 80014cc:	4a60      	ldr	r2, [pc, #384]	@ (8001650 <HAL_RCC_OscConfig+0x4c4>)
 80014ce:	f043 0304 	orr.w	r3, r3, #4
 80014d2:	6213      	str	r3, [r2, #32]
 80014d4:	4b5e      	ldr	r3, [pc, #376]	@ (8001650 <HAL_RCC_OscConfig+0x4c4>)
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	4a5d      	ldr	r2, [pc, #372]	@ (8001650 <HAL_RCC_OscConfig+0x4c4>)
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	6213      	str	r3, [r2, #32]
 80014e0:	e00b      	b.n	80014fa <HAL_RCC_OscConfig+0x36e>
 80014e2:	4b5b      	ldr	r3, [pc, #364]	@ (8001650 <HAL_RCC_OscConfig+0x4c4>)
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	4a5a      	ldr	r2, [pc, #360]	@ (8001650 <HAL_RCC_OscConfig+0x4c4>)
 80014e8:	f023 0301 	bic.w	r3, r3, #1
 80014ec:	6213      	str	r3, [r2, #32]
 80014ee:	4b58      	ldr	r3, [pc, #352]	@ (8001650 <HAL_RCC_OscConfig+0x4c4>)
 80014f0:	6a1b      	ldr	r3, [r3, #32]
 80014f2:	4a57      	ldr	r2, [pc, #348]	@ (8001650 <HAL_RCC_OscConfig+0x4c4>)
 80014f4:	f023 0304 	bic.w	r3, r3, #4
 80014f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d015      	beq.n	800152e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001502:	f7ff fa4b 	bl	800099c <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001508:	e00a      	b.n	8001520 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800150a:	f7ff fa47 	bl	800099c <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001518:	4293      	cmp	r3, r2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e0b1      	b.n	8001684 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001520:	4b4b      	ldr	r3, [pc, #300]	@ (8001650 <HAL_RCC_OscConfig+0x4c4>)
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d0ee      	beq.n	800150a <HAL_RCC_OscConfig+0x37e>
 800152c:	e014      	b.n	8001558 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800152e:	f7ff fa35 	bl	800099c <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001534:	e00a      	b.n	800154c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001536:	f7ff fa31 	bl	800099c <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001544:	4293      	cmp	r3, r2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e09b      	b.n	8001684 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800154c:	4b40      	ldr	r3, [pc, #256]	@ (8001650 <HAL_RCC_OscConfig+0x4c4>)
 800154e:	6a1b      	ldr	r3, [r3, #32]
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1ee      	bne.n	8001536 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001558:	7dfb      	ldrb	r3, [r7, #23]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d105      	bne.n	800156a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800155e:	4b3c      	ldr	r3, [pc, #240]	@ (8001650 <HAL_RCC_OscConfig+0x4c4>)
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	4a3b      	ldr	r2, [pc, #236]	@ (8001650 <HAL_RCC_OscConfig+0x4c4>)
 8001564:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001568:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 8087 	beq.w	8001682 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001574:	4b36      	ldr	r3, [pc, #216]	@ (8001650 <HAL_RCC_OscConfig+0x4c4>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 030c 	and.w	r3, r3, #12
 800157c:	2b08      	cmp	r3, #8
 800157e:	d061      	beq.n	8001644 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	69db      	ldr	r3, [r3, #28]
 8001584:	2b02      	cmp	r3, #2
 8001586:	d146      	bne.n	8001616 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001588:	4b33      	ldr	r3, [pc, #204]	@ (8001658 <HAL_RCC_OscConfig+0x4cc>)
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158e:	f7ff fa05 	bl	800099c <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001596:	f7ff fa01 	bl	800099c <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e06d      	b.n	8001684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015a8:	4b29      	ldr	r3, [pc, #164]	@ (8001650 <HAL_RCC_OscConfig+0x4c4>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1f0      	bne.n	8001596 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a1b      	ldr	r3, [r3, #32]
 80015b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015bc:	d108      	bne.n	80015d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015be:	4b24      	ldr	r3, [pc, #144]	@ (8001650 <HAL_RCC_OscConfig+0x4c4>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	4921      	ldr	r1, [pc, #132]	@ (8001650 <HAL_RCC_OscConfig+0x4c4>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001650 <HAL_RCC_OscConfig+0x4c4>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a19      	ldr	r1, [r3, #32]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e0:	430b      	orrs	r3, r1
 80015e2:	491b      	ldr	r1, [pc, #108]	@ (8001650 <HAL_RCC_OscConfig+0x4c4>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001658 <HAL_RCC_OscConfig+0x4cc>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ee:	f7ff f9d5 	bl	800099c <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f6:	f7ff f9d1 	bl	800099c <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e03d      	b.n	8001684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001608:	4b11      	ldr	r3, [pc, #68]	@ (8001650 <HAL_RCC_OscConfig+0x4c4>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0f0      	beq.n	80015f6 <HAL_RCC_OscConfig+0x46a>
 8001614:	e035      	b.n	8001682 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001616:	4b10      	ldr	r3, [pc, #64]	@ (8001658 <HAL_RCC_OscConfig+0x4cc>)
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161c:	f7ff f9be 	bl	800099c <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001624:	f7ff f9ba 	bl	800099c <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e026      	b.n	8001684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001636:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <HAL_RCC_OscConfig+0x4c4>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f0      	bne.n	8001624 <HAL_RCC_OscConfig+0x498>
 8001642:	e01e      	b.n	8001682 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	69db      	ldr	r3, [r3, #28]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d107      	bne.n	800165c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e019      	b.n	8001684 <HAL_RCC_OscConfig+0x4f8>
 8001650:	40021000 	.word	0x40021000
 8001654:	40007000 	.word	0x40007000
 8001658:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800165c:	4b0b      	ldr	r3, [pc, #44]	@ (800168c <HAL_RCC_OscConfig+0x500>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a1b      	ldr	r3, [r3, #32]
 800166c:	429a      	cmp	r2, r3
 800166e:	d106      	bne.n	800167e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800167a:	429a      	cmp	r2, r3
 800167c:	d001      	beq.n	8001682 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e000      	b.n	8001684 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40021000 	.word	0x40021000

08001690 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e0d0      	b.n	8001846 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016a4:	4b6a      	ldr	r3, [pc, #424]	@ (8001850 <HAL_RCC_ClockConfig+0x1c0>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0307 	and.w	r3, r3, #7
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d910      	bls.n	80016d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b2:	4b67      	ldr	r3, [pc, #412]	@ (8001850 <HAL_RCC_ClockConfig+0x1c0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f023 0207 	bic.w	r2, r3, #7
 80016ba:	4965      	ldr	r1, [pc, #404]	@ (8001850 <HAL_RCC_ClockConfig+0x1c0>)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	4313      	orrs	r3, r2
 80016c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c2:	4b63      	ldr	r3, [pc, #396]	@ (8001850 <HAL_RCC_ClockConfig+0x1c0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d001      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e0b8      	b.n	8001846 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d020      	beq.n	8001722 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d005      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016ec:	4b59      	ldr	r3, [pc, #356]	@ (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	4a58      	ldr	r2, [pc, #352]	@ (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 80016f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80016f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0308 	and.w	r3, r3, #8
 8001700:	2b00      	cmp	r3, #0
 8001702:	d005      	beq.n	8001710 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001704:	4b53      	ldr	r3, [pc, #332]	@ (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	4a52      	ldr	r2, [pc, #328]	@ (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 800170a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800170e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001710:	4b50      	ldr	r3, [pc, #320]	@ (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	494d      	ldr	r1, [pc, #308]	@ (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 800171e:	4313      	orrs	r3, r2
 8001720:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b00      	cmp	r3, #0
 800172c:	d040      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d107      	bne.n	8001746 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001736:	4b47      	ldr	r3, [pc, #284]	@ (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d115      	bne.n	800176e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e07f      	b.n	8001846 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b02      	cmp	r3, #2
 800174c:	d107      	bne.n	800175e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800174e:	4b41      	ldr	r3, [pc, #260]	@ (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d109      	bne.n	800176e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e073      	b.n	8001846 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175e:	4b3d      	ldr	r3, [pc, #244]	@ (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e06b      	b.n	8001846 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800176e:	4b39      	ldr	r3, [pc, #228]	@ (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f023 0203 	bic.w	r2, r3, #3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	4936      	ldr	r1, [pc, #216]	@ (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 800177c:	4313      	orrs	r3, r2
 800177e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001780:	f7ff f90c 	bl	800099c <HAL_GetTick>
 8001784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001786:	e00a      	b.n	800179e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001788:	f7ff f908 	bl	800099c <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001796:	4293      	cmp	r3, r2
 8001798:	d901      	bls.n	800179e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e053      	b.n	8001846 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800179e:	4b2d      	ldr	r3, [pc, #180]	@ (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 020c 	and.w	r2, r3, #12
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d1eb      	bne.n	8001788 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017b0:	4b27      	ldr	r3, [pc, #156]	@ (8001850 <HAL_RCC_ClockConfig+0x1c0>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0307 	and.w	r3, r3, #7
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d210      	bcs.n	80017e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017be:	4b24      	ldr	r3, [pc, #144]	@ (8001850 <HAL_RCC_ClockConfig+0x1c0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f023 0207 	bic.w	r2, r3, #7
 80017c6:	4922      	ldr	r1, [pc, #136]	@ (8001850 <HAL_RCC_ClockConfig+0x1c0>)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ce:	4b20      	ldr	r3, [pc, #128]	@ (8001850 <HAL_RCC_ClockConfig+0x1c0>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d001      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e032      	b.n	8001846 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d008      	beq.n	80017fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017ec:	4b19      	ldr	r3, [pc, #100]	@ (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	4916      	ldr	r1, [pc, #88]	@ (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	2b00      	cmp	r3, #0
 8001808:	d009      	beq.n	800181e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800180a:	4b12      	ldr	r3, [pc, #72]	@ (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	490e      	ldr	r1, [pc, #56]	@ (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 800181a:	4313      	orrs	r3, r2
 800181c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800181e:	f000 f821 	bl	8001864 <HAL_RCC_GetSysClockFreq>
 8001822:	4602      	mov	r2, r0
 8001824:	4b0b      	ldr	r3, [pc, #44]	@ (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	091b      	lsrs	r3, r3, #4
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	490a      	ldr	r1, [pc, #40]	@ (8001858 <HAL_RCC_ClockConfig+0x1c8>)
 8001830:	5ccb      	ldrb	r3, [r1, r3]
 8001832:	fa22 f303 	lsr.w	r3, r2, r3
 8001836:	4a09      	ldr	r2, [pc, #36]	@ (800185c <HAL_RCC_ClockConfig+0x1cc>)
 8001838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800183a:	4b09      	ldr	r3, [pc, #36]	@ (8001860 <HAL_RCC_ClockConfig+0x1d0>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff f86a 	bl	8000918 <HAL_InitTick>

  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40022000 	.word	0x40022000
 8001854:	40021000 	.word	0x40021000
 8001858:	080029fc 	.word	0x080029fc
 800185c:	20000000 	.word	0x20000000
 8001860:	20000004 	.word	0x20000004

08001864 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001864:	b480      	push	{r7}
 8001866:	b087      	sub	sp, #28
 8001868:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	2300      	movs	r3, #0
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
 8001876:	2300      	movs	r3, #0
 8001878:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800187e:	4b1e      	ldr	r3, [pc, #120]	@ (80018f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f003 030c 	and.w	r3, r3, #12
 800188a:	2b04      	cmp	r3, #4
 800188c:	d002      	beq.n	8001894 <HAL_RCC_GetSysClockFreq+0x30>
 800188e:	2b08      	cmp	r3, #8
 8001890:	d003      	beq.n	800189a <HAL_RCC_GetSysClockFreq+0x36>
 8001892:	e027      	b.n	80018e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001894:	4b19      	ldr	r3, [pc, #100]	@ (80018fc <HAL_RCC_GetSysClockFreq+0x98>)
 8001896:	613b      	str	r3, [r7, #16]
      break;
 8001898:	e027      	b.n	80018ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	0c9b      	lsrs	r3, r3, #18
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	4a17      	ldr	r2, [pc, #92]	@ (8001900 <HAL_RCC_GetSysClockFreq+0x9c>)
 80018a4:	5cd3      	ldrb	r3, [r2, r3]
 80018a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d010      	beq.n	80018d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018b2:	4b11      	ldr	r3, [pc, #68]	@ (80018f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	0c5b      	lsrs	r3, r3, #17
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	4a11      	ldr	r2, [pc, #68]	@ (8001904 <HAL_RCC_GetSysClockFreq+0xa0>)
 80018be:	5cd3      	ldrb	r3, [r2, r3]
 80018c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a0d      	ldr	r2, [pc, #52]	@ (80018fc <HAL_RCC_GetSysClockFreq+0x98>)
 80018c6:	fb03 f202 	mul.w	r2, r3, r2
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	e004      	b.n	80018de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a0c      	ldr	r2, [pc, #48]	@ (8001908 <HAL_RCC_GetSysClockFreq+0xa4>)
 80018d8:	fb02 f303 	mul.w	r3, r2, r3
 80018dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	613b      	str	r3, [r7, #16]
      break;
 80018e2:	e002      	b.n	80018ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018e4:	4b05      	ldr	r3, [pc, #20]	@ (80018fc <HAL_RCC_GetSysClockFreq+0x98>)
 80018e6:	613b      	str	r3, [r7, #16]
      break;
 80018e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018ea:	693b      	ldr	r3, [r7, #16]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	371c      	adds	r7, #28
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	40021000 	.word	0x40021000
 80018fc:	007a1200 	.word	0x007a1200
 8001900:	08002a14 	.word	0x08002a14
 8001904:	08002a24 	.word	0x08002a24
 8001908:	003d0900 	.word	0x003d0900

0800190c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001910:	4b02      	ldr	r3, [pc, #8]	@ (800191c <HAL_RCC_GetHCLKFreq+0x10>)
 8001912:	681b      	ldr	r3, [r3, #0]
}
 8001914:	4618      	mov	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr
 800191c:	20000000 	.word	0x20000000

08001920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001924:	f7ff fff2 	bl	800190c <HAL_RCC_GetHCLKFreq>
 8001928:	4602      	mov	r2, r0
 800192a:	4b05      	ldr	r3, [pc, #20]	@ (8001940 <HAL_RCC_GetPCLK1Freq+0x20>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	0a1b      	lsrs	r3, r3, #8
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	4903      	ldr	r1, [pc, #12]	@ (8001944 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001936:	5ccb      	ldrb	r3, [r1, r3]
 8001938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800193c:	4618      	mov	r0, r3
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40021000 	.word	0x40021000
 8001944:	08002a0c 	.word	0x08002a0c

08001948 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800194c:	f7ff ffde 	bl	800190c <HAL_RCC_GetHCLKFreq>
 8001950:	4602      	mov	r2, r0
 8001952:	4b05      	ldr	r3, [pc, #20]	@ (8001968 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	0adb      	lsrs	r3, r3, #11
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	4903      	ldr	r1, [pc, #12]	@ (800196c <HAL_RCC_GetPCLK2Freq+0x24>)
 800195e:	5ccb      	ldrb	r3, [r1, r3]
 8001960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001964:	4618      	mov	r0, r3
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40021000 	.word	0x40021000
 800196c:	08002a0c 	.word	0x08002a0c

08001970 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001978:	4b0a      	ldr	r3, [pc, #40]	@ (80019a4 <RCC_Delay+0x34>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a0a      	ldr	r2, [pc, #40]	@ (80019a8 <RCC_Delay+0x38>)
 800197e:	fba2 2303 	umull	r2, r3, r2, r3
 8001982:	0a5b      	lsrs	r3, r3, #9
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	fb02 f303 	mul.w	r3, r2, r3
 800198a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800198c:	bf00      	nop
  }
  while (Delay --);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	1e5a      	subs	r2, r3, #1
 8001992:	60fa      	str	r2, [r7, #12]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1f9      	bne.n	800198c <RCC_Delay+0x1c>
}
 8001998:	bf00      	nop
 800199a:	bf00      	nop
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr
 80019a4:	20000000 	.word	0x20000000
 80019a8:	10624dd3 	.word	0x10624dd3

080019ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e041      	b.n	8001a42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d106      	bne.n	80019d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7fe fe52 	bl	800067c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2202      	movs	r2, #2
 80019dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3304      	adds	r3, #4
 80019e8:	4619      	mov	r1, r3
 80019ea:	4610      	mov	r0, r2
 80019ec:	f000 fbdc 	bl	80021a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e041      	b.n	8001ae0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d106      	bne.n	8001a76 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7fe fe29 	bl	80006c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2202      	movs	r2, #2
 8001a7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3304      	adds	r3, #4
 8001a86:	4619      	mov	r1, r3
 8001a88:	4610      	mov	r0, r2
 8001a8a:	f000 fb8d 	bl	80021a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d109      	bne.n	8001b0c <HAL_TIM_PWM_Start+0x24>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	bf14      	ite	ne
 8001b04:	2301      	movne	r3, #1
 8001b06:	2300      	moveq	r3, #0
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	e022      	b.n	8001b52 <HAL_TIM_PWM_Start+0x6a>
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d109      	bne.n	8001b26 <HAL_TIM_PWM_Start+0x3e>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	bf14      	ite	ne
 8001b1e:	2301      	movne	r3, #1
 8001b20:	2300      	moveq	r3, #0
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	e015      	b.n	8001b52 <HAL_TIM_PWM_Start+0x6a>
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	2b08      	cmp	r3, #8
 8001b2a:	d109      	bne.n	8001b40 <HAL_TIM_PWM_Start+0x58>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	bf14      	ite	ne
 8001b38:	2301      	movne	r3, #1
 8001b3a:	2300      	moveq	r3, #0
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	e008      	b.n	8001b52 <HAL_TIM_PWM_Start+0x6a>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	bf14      	ite	ne
 8001b4c:	2301      	movne	r3, #1
 8001b4e:	2300      	moveq	r3, #0
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e05e      	b.n	8001c18 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d104      	bne.n	8001b6a <HAL_TIM_PWM_Start+0x82>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2202      	movs	r2, #2
 8001b64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b68:	e013      	b.n	8001b92 <HAL_TIM_PWM_Start+0xaa>
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	2b04      	cmp	r3, #4
 8001b6e:	d104      	bne.n	8001b7a <HAL_TIM_PWM_Start+0x92>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2202      	movs	r2, #2
 8001b74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b78:	e00b      	b.n	8001b92 <HAL_TIM_PWM_Start+0xaa>
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d104      	bne.n	8001b8a <HAL_TIM_PWM_Start+0xa2>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2202      	movs	r2, #2
 8001b84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b88:	e003      	b.n	8001b92 <HAL_TIM_PWM_Start+0xaa>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2202      	movs	r2, #2
 8001b8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2201      	movs	r2, #1
 8001b98:	6839      	ldr	r1, [r7, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f000 fd84 	bl	80026a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a1e      	ldr	r2, [pc, #120]	@ (8001c20 <HAL_TIM_PWM_Start+0x138>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d107      	bne.n	8001bba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001bb8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a18      	ldr	r2, [pc, #96]	@ (8001c20 <HAL_TIM_PWM_Start+0x138>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d00e      	beq.n	8001be2 <HAL_TIM_PWM_Start+0xfa>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bcc:	d009      	beq.n	8001be2 <HAL_TIM_PWM_Start+0xfa>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a14      	ldr	r2, [pc, #80]	@ (8001c24 <HAL_TIM_PWM_Start+0x13c>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d004      	beq.n	8001be2 <HAL_TIM_PWM_Start+0xfa>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a12      	ldr	r2, [pc, #72]	@ (8001c28 <HAL_TIM_PWM_Start+0x140>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d111      	bne.n	8001c06 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f003 0307 	and.w	r3, r3, #7
 8001bec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2b06      	cmp	r3, #6
 8001bf2:	d010      	beq.n	8001c16 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 0201 	orr.w	r2, r2, #1
 8001c02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c04:	e007      	b.n	8001c16 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f042 0201 	orr.w	r2, r2, #1
 8001c14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40012c00 	.word	0x40012c00
 8001c24:	40000400 	.word	0x40000400
 8001c28:	40000800 	.word	0x40000800

08001c2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d122      	bne.n	8001c88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d11b      	bne.n	8001c88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f06f 0202 	mvn.w	r2, #2
 8001c58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 fa7f 	bl	8002172 <HAL_TIM_IC_CaptureCallback>
 8001c74:	e005      	b.n	8001c82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 fa72 	bl	8002160 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 fa81 	bl	8002184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	f003 0304 	and.w	r3, r3, #4
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d122      	bne.n	8001cdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b04      	cmp	r3, #4
 8001ca2:	d11b      	bne.n	8001cdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f06f 0204 	mvn.w	r2, #4
 8001cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2202      	movs	r2, #2
 8001cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 fa55 	bl	8002172 <HAL_TIM_IC_CaptureCallback>
 8001cc8:	e005      	b.n	8001cd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 fa48 	bl	8002160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 fa57 	bl	8002184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	2b08      	cmp	r3, #8
 8001ce8:	d122      	bne.n	8001d30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	f003 0308 	and.w	r3, r3, #8
 8001cf4:	2b08      	cmp	r3, #8
 8001cf6:	d11b      	bne.n	8001d30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f06f 0208 	mvn.w	r2, #8
 8001d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2204      	movs	r2, #4
 8001d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 fa2b 	bl	8002172 <HAL_TIM_IC_CaptureCallback>
 8001d1c:	e005      	b.n	8001d2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 fa1e 	bl	8002160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 fa2d 	bl	8002184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	f003 0310 	and.w	r3, r3, #16
 8001d3a:	2b10      	cmp	r3, #16
 8001d3c:	d122      	bne.n	8001d84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	f003 0310 	and.w	r3, r3, #16
 8001d48:	2b10      	cmp	r3, #16
 8001d4a:	d11b      	bne.n	8001d84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f06f 0210 	mvn.w	r2, #16
 8001d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2208      	movs	r2, #8
 8001d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 fa01 	bl	8002172 <HAL_TIM_IC_CaptureCallback>
 8001d70:	e005      	b.n	8001d7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f9f4 	bl	8002160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 fa03 	bl	8002184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d10e      	bne.n	8001db0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d107      	bne.n	8001db0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f06f 0201 	mvn.w	r2, #1
 8001da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f9cf 	bl	800214e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dba:	2b80      	cmp	r3, #128	@ 0x80
 8001dbc:	d10e      	bne.n	8001ddc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dc8:	2b80      	cmp	r3, #128	@ 0x80
 8001dca:	d107      	bne.n	8001ddc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 fcf1 	bl	80027be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001de6:	2b40      	cmp	r3, #64	@ 0x40
 8001de8:	d10e      	bne.n	8001e08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001df4:	2b40      	cmp	r3, #64	@ 0x40
 8001df6:	d107      	bne.n	8001e08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f9c7 	bl	8002196 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	f003 0320 	and.w	r3, r3, #32
 8001e12:	2b20      	cmp	r3, #32
 8001e14:	d10e      	bne.n	8001e34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	f003 0320 	and.w	r3, r3, #32
 8001e20:	2b20      	cmp	r3, #32
 8001e22:	d107      	bne.n	8001e34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f06f 0220 	mvn.w	r2, #32
 8001e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 fcbc 	bl	80027ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e34:	bf00      	nop
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d101      	bne.n	8001e5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001e56:	2302      	movs	r3, #2
 8001e58:	e0ae      	b.n	8001fb8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b0c      	cmp	r3, #12
 8001e66:	f200 809f 	bhi.w	8001fa8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8001e70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e70:	08001ea5 	.word	0x08001ea5
 8001e74:	08001fa9 	.word	0x08001fa9
 8001e78:	08001fa9 	.word	0x08001fa9
 8001e7c:	08001fa9 	.word	0x08001fa9
 8001e80:	08001ee5 	.word	0x08001ee5
 8001e84:	08001fa9 	.word	0x08001fa9
 8001e88:	08001fa9 	.word	0x08001fa9
 8001e8c:	08001fa9 	.word	0x08001fa9
 8001e90:	08001f27 	.word	0x08001f27
 8001e94:	08001fa9 	.word	0x08001fa9
 8001e98:	08001fa9 	.word	0x08001fa9
 8001e9c:	08001fa9 	.word	0x08001fa9
 8001ea0:	08001f67 	.word	0x08001f67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68b9      	ldr	r1, [r7, #8]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f000 f9de 	bl	800226c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	699a      	ldr	r2, [r3, #24]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 0208 	orr.w	r2, r2, #8
 8001ebe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	699a      	ldr	r2, [r3, #24]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 0204 	bic.w	r2, r2, #4
 8001ece:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6999      	ldr	r1, [r3, #24]
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	691a      	ldr	r2, [r3, #16]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	619a      	str	r2, [r3, #24]
      break;
 8001ee2:	e064      	b.n	8001fae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68b9      	ldr	r1, [r7, #8]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f000 fa24 	bl	8002338 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	699a      	ldr	r2, [r3, #24]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001efe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	699a      	ldr	r2, [r3, #24]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6999      	ldr	r1, [r3, #24]
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	021a      	lsls	r2, r3, #8
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	619a      	str	r2, [r3, #24]
      break;
 8001f24:	e043      	b.n	8001fae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68b9      	ldr	r1, [r7, #8]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f000 fa6d 	bl	800240c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	69da      	ldr	r2, [r3, #28]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f042 0208 	orr.w	r2, r2, #8
 8001f40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	69da      	ldr	r2, [r3, #28]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0204 	bic.w	r2, r2, #4
 8001f50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	69d9      	ldr	r1, [r3, #28]
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	691a      	ldr	r2, [r3, #16]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	61da      	str	r2, [r3, #28]
      break;
 8001f64:	e023      	b.n	8001fae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68b9      	ldr	r1, [r7, #8]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f000 fab7 	bl	80024e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	69da      	ldr	r2, [r3, #28]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	69da      	ldr	r2, [r3, #28]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	69d9      	ldr	r1, [r3, #28]
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	021a      	lsls	r2, r3, #8
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	61da      	str	r2, [r3, #28]
      break;
 8001fa6:	e002      	b.n	8001fae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	75fb      	strb	r3, [r7, #23]
      break;
 8001fac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d101      	bne.n	8001fdc <HAL_TIM_ConfigClockSource+0x1c>
 8001fd8:	2302      	movs	r3, #2
 8001fda:	e0b4      	b.n	8002146 <HAL_TIM_ConfigClockSource+0x186>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001ffa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002002:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68ba      	ldr	r2, [r7, #8]
 800200a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002014:	d03e      	beq.n	8002094 <HAL_TIM_ConfigClockSource+0xd4>
 8002016:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800201a:	f200 8087 	bhi.w	800212c <HAL_TIM_ConfigClockSource+0x16c>
 800201e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002022:	f000 8086 	beq.w	8002132 <HAL_TIM_ConfigClockSource+0x172>
 8002026:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800202a:	d87f      	bhi.n	800212c <HAL_TIM_ConfigClockSource+0x16c>
 800202c:	2b70      	cmp	r3, #112	@ 0x70
 800202e:	d01a      	beq.n	8002066 <HAL_TIM_ConfigClockSource+0xa6>
 8002030:	2b70      	cmp	r3, #112	@ 0x70
 8002032:	d87b      	bhi.n	800212c <HAL_TIM_ConfigClockSource+0x16c>
 8002034:	2b60      	cmp	r3, #96	@ 0x60
 8002036:	d050      	beq.n	80020da <HAL_TIM_ConfigClockSource+0x11a>
 8002038:	2b60      	cmp	r3, #96	@ 0x60
 800203a:	d877      	bhi.n	800212c <HAL_TIM_ConfigClockSource+0x16c>
 800203c:	2b50      	cmp	r3, #80	@ 0x50
 800203e:	d03c      	beq.n	80020ba <HAL_TIM_ConfigClockSource+0xfa>
 8002040:	2b50      	cmp	r3, #80	@ 0x50
 8002042:	d873      	bhi.n	800212c <HAL_TIM_ConfigClockSource+0x16c>
 8002044:	2b40      	cmp	r3, #64	@ 0x40
 8002046:	d058      	beq.n	80020fa <HAL_TIM_ConfigClockSource+0x13a>
 8002048:	2b40      	cmp	r3, #64	@ 0x40
 800204a:	d86f      	bhi.n	800212c <HAL_TIM_ConfigClockSource+0x16c>
 800204c:	2b30      	cmp	r3, #48	@ 0x30
 800204e:	d064      	beq.n	800211a <HAL_TIM_ConfigClockSource+0x15a>
 8002050:	2b30      	cmp	r3, #48	@ 0x30
 8002052:	d86b      	bhi.n	800212c <HAL_TIM_ConfigClockSource+0x16c>
 8002054:	2b20      	cmp	r3, #32
 8002056:	d060      	beq.n	800211a <HAL_TIM_ConfigClockSource+0x15a>
 8002058:	2b20      	cmp	r3, #32
 800205a:	d867      	bhi.n	800212c <HAL_TIM_ConfigClockSource+0x16c>
 800205c:	2b00      	cmp	r3, #0
 800205e:	d05c      	beq.n	800211a <HAL_TIM_ConfigClockSource+0x15a>
 8002060:	2b10      	cmp	r3, #16
 8002062:	d05a      	beq.n	800211a <HAL_TIM_ConfigClockSource+0x15a>
 8002064:	e062      	b.n	800212c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002076:	f000 faf8 	bl	800266a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002088:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	609a      	str	r2, [r3, #8]
      break;
 8002092:	e04f      	b.n	8002134 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80020a4:	f000 fae1 	bl	800266a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80020b6:	609a      	str	r2, [r3, #8]
      break;
 80020b8:	e03c      	b.n	8002134 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020c6:	461a      	mov	r2, r3
 80020c8:	f000 fa58 	bl	800257c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2150      	movs	r1, #80	@ 0x50
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 faaf 	bl	8002636 <TIM_ITRx_SetConfig>
      break;
 80020d8:	e02c      	b.n	8002134 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80020e6:	461a      	mov	r2, r3
 80020e8:	f000 fa76 	bl	80025d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2160      	movs	r1, #96	@ 0x60
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 fa9f 	bl	8002636 <TIM_ITRx_SetConfig>
      break;
 80020f8:	e01c      	b.n	8002134 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002106:	461a      	mov	r2, r3
 8002108:	f000 fa38 	bl	800257c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2140      	movs	r1, #64	@ 0x40
 8002112:	4618      	mov	r0, r3
 8002114:	f000 fa8f 	bl	8002636 <TIM_ITRx_SetConfig>
      break;
 8002118:	e00c      	b.n	8002134 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4619      	mov	r1, r3
 8002124:	4610      	mov	r0, r2
 8002126:	f000 fa86 	bl	8002636 <TIM_ITRx_SetConfig>
      break;
 800212a:	e003      	b.n	8002134 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	73fb      	strb	r3, [r7, #15]
      break;
 8002130:	e000      	b.n	8002134 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002132:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002144:	7bfb      	ldrb	r3, [r7, #15]
}
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr

08002160 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr

08002172 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr

08002184 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	bc80      	pop	{r7}
 8002194:	4770      	bx	lr

08002196 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr

080021a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a29      	ldr	r2, [pc, #164]	@ (8002260 <TIM_Base_SetConfig+0xb8>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d00b      	beq.n	80021d8 <TIM_Base_SetConfig+0x30>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021c6:	d007      	beq.n	80021d8 <TIM_Base_SetConfig+0x30>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a26      	ldr	r2, [pc, #152]	@ (8002264 <TIM_Base_SetConfig+0xbc>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d003      	beq.n	80021d8 <TIM_Base_SetConfig+0x30>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a25      	ldr	r2, [pc, #148]	@ (8002268 <TIM_Base_SetConfig+0xc0>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d108      	bne.n	80021ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a1c      	ldr	r2, [pc, #112]	@ (8002260 <TIM_Base_SetConfig+0xb8>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d00b      	beq.n	800220a <TIM_Base_SetConfig+0x62>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021f8:	d007      	beq.n	800220a <TIM_Base_SetConfig+0x62>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a19      	ldr	r2, [pc, #100]	@ (8002264 <TIM_Base_SetConfig+0xbc>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d003      	beq.n	800220a <TIM_Base_SetConfig+0x62>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a18      	ldr	r2, [pc, #96]	@ (8002268 <TIM_Base_SetConfig+0xc0>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d108      	bne.n	800221c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	4313      	orrs	r3, r2
 800221a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	4313      	orrs	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a07      	ldr	r2, [pc, #28]	@ (8002260 <TIM_Base_SetConfig+0xb8>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d103      	bne.n	8002250 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	691a      	ldr	r2, [r3, #16]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	615a      	str	r2, [r3, #20]
}
 8002256:	bf00      	nop
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr
 8002260:	40012c00 	.word	0x40012c00
 8002264:	40000400 	.word	0x40000400
 8002268:	40000800 	.word	0x40000800

0800226c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800226c:	b480      	push	{r7}
 800226e:	b087      	sub	sp, #28
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	f023 0201 	bic.w	r2, r3, #1
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800229a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f023 0303 	bic.w	r3, r3, #3
 80022a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f023 0302 	bic.w	r3, r3, #2
 80022b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	4313      	orrs	r3, r2
 80022be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a1c      	ldr	r2, [pc, #112]	@ (8002334 <TIM_OC1_SetConfig+0xc8>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d10c      	bne.n	80022e2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	f023 0308 	bic.w	r3, r3, #8
 80022ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	f023 0304 	bic.w	r3, r3, #4
 80022e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a13      	ldr	r2, [pc, #76]	@ (8002334 <TIM_OC1_SetConfig+0xc8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d111      	bne.n	800230e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80022f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	621a      	str	r2, [r3, #32]
}
 8002328:	bf00      	nop
 800232a:	371c      	adds	r7, #28
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40012c00 	.word	0x40012c00

08002338 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002338:	b480      	push	{r7}
 800233a:	b087      	sub	sp, #28
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	f023 0210 	bic.w	r2, r3, #16
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800236e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	021b      	lsls	r3, r3, #8
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	4313      	orrs	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	f023 0320 	bic.w	r3, r3, #32
 8002382:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	4313      	orrs	r3, r2
 800238e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a1d      	ldr	r2, [pc, #116]	@ (8002408 <TIM_OC2_SetConfig+0xd0>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d10d      	bne.n	80023b4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800239e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	011b      	lsls	r3, r3, #4
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80023b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a14      	ldr	r2, [pc, #80]	@ (8002408 <TIM_OC2_SetConfig+0xd0>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d113      	bne.n	80023e4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80023c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80023ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	621a      	str	r2, [r3, #32]
}
 80023fe:	bf00      	nop
 8002400:	371c      	adds	r7, #28
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr
 8002408:	40012c00 	.word	0x40012c00

0800240c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800240c:	b480      	push	{r7}
 800240e:	b087      	sub	sp, #28
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800243a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f023 0303 	bic.w	r3, r3, #3
 8002442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	4313      	orrs	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002454:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	021b      	lsls	r3, r3, #8
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	4313      	orrs	r3, r2
 8002460:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a1d      	ldr	r2, [pc, #116]	@ (80024dc <TIM_OC3_SetConfig+0xd0>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d10d      	bne.n	8002486 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002470:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	021b      	lsls	r3, r3, #8
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	4313      	orrs	r3, r2
 800247c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002484:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a14      	ldr	r2, [pc, #80]	@ (80024dc <TIM_OC3_SetConfig+0xd0>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d113      	bne.n	80024b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002494:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800249c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	011b      	lsls	r3, r3, #4
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	621a      	str	r2, [r3, #32]
}
 80024d0:	bf00      	nop
 80024d2:	371c      	adds	r7, #28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40012c00 	.word	0x40012c00

080024e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b087      	sub	sp, #28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800250e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002516:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	021b      	lsls	r3, r3, #8
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4313      	orrs	r3, r2
 8002522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800252a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	031b      	lsls	r3, r3, #12
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	4313      	orrs	r3, r2
 8002536:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a0f      	ldr	r2, [pc, #60]	@ (8002578 <TIM_OC4_SetConfig+0x98>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d109      	bne.n	8002554 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002546:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	019b      	lsls	r3, r3, #6
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	4313      	orrs	r3, r2
 8002552:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	621a      	str	r2, [r3, #32]
}
 800256e:	bf00      	nop
 8002570:	371c      	adds	r7, #28
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr
 8002578:	40012c00 	.word	0x40012c00

0800257c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800257c:	b480      	push	{r7}
 800257e:	b087      	sub	sp, #28
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	f023 0201 	bic.w	r2, r3, #1
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80025a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	011b      	lsls	r3, r3, #4
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f023 030a 	bic.w	r3, r3, #10
 80025b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	4313      	orrs	r3, r2
 80025c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	621a      	str	r2, [r3, #32]
}
 80025ce:	bf00      	nop
 80025d0:	371c      	adds	r7, #28
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr

080025d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025d8:	b480      	push	{r7}
 80025da:	b087      	sub	sp, #28
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	f023 0210 	bic.w	r2, r3, #16
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002602:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	031b      	lsls	r3, r3, #12
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	4313      	orrs	r3, r2
 800260c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002614:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	4313      	orrs	r3, r2
 800261e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	621a      	str	r2, [r3, #32]
}
 800262c:	bf00      	nop
 800262e:	371c      	adds	r7, #28
 8002630:	46bd      	mov	sp, r7
 8002632:	bc80      	pop	{r7}
 8002634:	4770      	bx	lr

08002636 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002636:	b480      	push	{r7}
 8002638:	b085      	sub	sp, #20
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
 800263e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800264c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4313      	orrs	r3, r2
 8002654:	f043 0307 	orr.w	r3, r3, #7
 8002658:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	609a      	str	r2, [r3, #8]
}
 8002660:	bf00      	nop
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr

0800266a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800266a:	b480      	push	{r7}
 800266c:	b087      	sub	sp, #28
 800266e:	af00      	add	r7, sp, #0
 8002670:	60f8      	str	r0, [r7, #12]
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	607a      	str	r2, [r7, #4]
 8002676:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002684:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	021a      	lsls	r2, r3, #8
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	431a      	orrs	r2, r3
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	4313      	orrs	r3, r2
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	4313      	orrs	r3, r2
 8002696:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	609a      	str	r2, [r3, #8]
}
 800269e:	bf00      	nop
 80026a0:	371c      	adds	r7, #28
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr

080026a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b087      	sub	sp, #28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	f003 031f 	and.w	r3, r3, #31
 80026ba:	2201      	movs	r2, #1
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6a1a      	ldr	r2, [r3, #32]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	43db      	mvns	r3, r3
 80026ca:	401a      	ands	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6a1a      	ldr	r2, [r3, #32]
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	f003 031f 	and.w	r3, r3, #31
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	fa01 f303 	lsl.w	r3, r1, r3
 80026e0:	431a      	orrs	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	621a      	str	r2, [r3, #32]
}
 80026e6:	bf00      	nop
 80026e8:	371c      	adds	r7, #28
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr

080026f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002700:	2b01      	cmp	r3, #1
 8002702:	d101      	bne.n	8002708 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002704:	2302      	movs	r3, #2
 8002706:	e046      	b.n	8002796 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800272e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	4313      	orrs	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a16      	ldr	r2, [pc, #88]	@ (80027a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d00e      	beq.n	800276a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002754:	d009      	beq.n	800276a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a12      	ldr	r2, [pc, #72]	@ (80027a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d004      	beq.n	800276a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a10      	ldr	r2, [pc, #64]	@ (80027a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d10c      	bne.n	8002784 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002770:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	4313      	orrs	r3, r2
 800277a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68ba      	ldr	r2, [r7, #8]
 8002782:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3714      	adds	r7, #20
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr
 80027a0:	40012c00 	.word	0x40012c00
 80027a4:	40000400 	.word	0x40000400
 80027a8:	40000800 	.word	0x40000800

080027ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr

080027be <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr

080027d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e042      	b.n	8002868 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d106      	bne.n	80027fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7fd ffca 	bl	8000790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2224      	movs	r2, #36	@ 0x24
 8002800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002812:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 f82b 	bl	8002870 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	691a      	ldr	r2, [r3, #16]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002828:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695a      	ldr	r2, [r3, #20]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002838:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002848:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2220      	movs	r2, #32
 8002854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2220      	movs	r2, #32
 800285c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68da      	ldr	r2, [r3, #12]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	4313      	orrs	r3, r2
 800289e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80028aa:	f023 030c 	bic.w	r3, r3, #12
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6812      	ldr	r2, [r2, #0]
 80028b2:	68b9      	ldr	r1, [r7, #8]
 80028b4:	430b      	orrs	r3, r1
 80028b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	699a      	ldr	r2, [r3, #24]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a2c      	ldr	r2, [pc, #176]	@ (8002984 <UART_SetConfig+0x114>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d103      	bne.n	80028e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80028d8:	f7ff f836 	bl	8001948 <HAL_RCC_GetPCLK2Freq>
 80028dc:	60f8      	str	r0, [r7, #12]
 80028de:	e002      	b.n	80028e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80028e0:	f7ff f81e 	bl	8001920 <HAL_RCC_GetPCLK1Freq>
 80028e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	009a      	lsls	r2, r3, #2
 80028f0:	441a      	add	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fc:	4a22      	ldr	r2, [pc, #136]	@ (8002988 <UART_SetConfig+0x118>)
 80028fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002902:	095b      	lsrs	r3, r3, #5
 8002904:	0119      	lsls	r1, r3, #4
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	4613      	mov	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	009a      	lsls	r2, r3, #2
 8002910:	441a      	add	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	fbb2 f2f3 	udiv	r2, r2, r3
 800291c:	4b1a      	ldr	r3, [pc, #104]	@ (8002988 <UART_SetConfig+0x118>)
 800291e:	fba3 0302 	umull	r0, r3, r3, r2
 8002922:	095b      	lsrs	r3, r3, #5
 8002924:	2064      	movs	r0, #100	@ 0x64
 8002926:	fb00 f303 	mul.w	r3, r0, r3
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	011b      	lsls	r3, r3, #4
 800292e:	3332      	adds	r3, #50	@ 0x32
 8002930:	4a15      	ldr	r2, [pc, #84]	@ (8002988 <UART_SetConfig+0x118>)
 8002932:	fba2 2303 	umull	r2, r3, r2, r3
 8002936:	095b      	lsrs	r3, r3, #5
 8002938:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800293c:	4419      	add	r1, r3
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	4613      	mov	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	009a      	lsls	r2, r3, #2
 8002948:	441a      	add	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	fbb2 f2f3 	udiv	r2, r2, r3
 8002954:	4b0c      	ldr	r3, [pc, #48]	@ (8002988 <UART_SetConfig+0x118>)
 8002956:	fba3 0302 	umull	r0, r3, r3, r2
 800295a:	095b      	lsrs	r3, r3, #5
 800295c:	2064      	movs	r0, #100	@ 0x64
 800295e:	fb00 f303 	mul.w	r3, r0, r3
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	3332      	adds	r3, #50	@ 0x32
 8002968:	4a07      	ldr	r2, [pc, #28]	@ (8002988 <UART_SetConfig+0x118>)
 800296a:	fba2 2303 	umull	r2, r3, r2, r3
 800296e:	095b      	lsrs	r3, r3, #5
 8002970:	f003 020f 	and.w	r2, r3, #15
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	440a      	add	r2, r1
 800297a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800297c:	bf00      	nop
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40013800 	.word	0x40013800
 8002988:	51eb851f 	.word	0x51eb851f

0800298c <memset>:
 800298c:	4603      	mov	r3, r0
 800298e:	4402      	add	r2, r0
 8002990:	4293      	cmp	r3, r2
 8002992:	d100      	bne.n	8002996 <memset+0xa>
 8002994:	4770      	bx	lr
 8002996:	f803 1b01 	strb.w	r1, [r3], #1
 800299a:	e7f9      	b.n	8002990 <memset+0x4>

0800299c <__libc_init_array>:
 800299c:	b570      	push	{r4, r5, r6, lr}
 800299e:	2600      	movs	r6, #0
 80029a0:	4d0c      	ldr	r5, [pc, #48]	@ (80029d4 <__libc_init_array+0x38>)
 80029a2:	4c0d      	ldr	r4, [pc, #52]	@ (80029d8 <__libc_init_array+0x3c>)
 80029a4:	1b64      	subs	r4, r4, r5
 80029a6:	10a4      	asrs	r4, r4, #2
 80029a8:	42a6      	cmp	r6, r4
 80029aa:	d109      	bne.n	80029c0 <__libc_init_array+0x24>
 80029ac:	f000 f81a 	bl	80029e4 <_init>
 80029b0:	2600      	movs	r6, #0
 80029b2:	4d0a      	ldr	r5, [pc, #40]	@ (80029dc <__libc_init_array+0x40>)
 80029b4:	4c0a      	ldr	r4, [pc, #40]	@ (80029e0 <__libc_init_array+0x44>)
 80029b6:	1b64      	subs	r4, r4, r5
 80029b8:	10a4      	asrs	r4, r4, #2
 80029ba:	42a6      	cmp	r6, r4
 80029bc:	d105      	bne.n	80029ca <__libc_init_array+0x2e>
 80029be:	bd70      	pop	{r4, r5, r6, pc}
 80029c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80029c4:	4798      	blx	r3
 80029c6:	3601      	adds	r6, #1
 80029c8:	e7ee      	b.n	80029a8 <__libc_init_array+0xc>
 80029ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80029ce:	4798      	blx	r3
 80029d0:	3601      	adds	r6, #1
 80029d2:	e7f2      	b.n	80029ba <__libc_init_array+0x1e>
 80029d4:	08002a28 	.word	0x08002a28
 80029d8:	08002a28 	.word	0x08002a28
 80029dc:	08002a28 	.word	0x08002a28
 80029e0:	08002a2c 	.word	0x08002a2c

080029e4 <_init>:
 80029e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029e6:	bf00      	nop
 80029e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ea:	bc08      	pop	{r3}
 80029ec:	469e      	mov	lr, r3
 80029ee:	4770      	bx	lr

080029f0 <_fini>:
 80029f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029f2:	bf00      	nop
 80029f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029f6:	bc08      	pop	{r3}
 80029f8:	469e      	mov	lr, r3
 80029fa:	4770      	bx	lr
